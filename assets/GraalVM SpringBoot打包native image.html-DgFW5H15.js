import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as p,b as s,n as h,g as k,r as a,a as r}from"./app-DDjfOKh-.js";const g={};function d(o,i){const l=a("VPBanner"),n=a("Share");return e(),p("div",null,[s(l,h(k({title:"GraalVM SpringBoot打包native image",content:"GraalVM SpringBoot打包native image",logo:null,color:"var(--banner-text)",background:"rgba(217, 244, 208, 0.5)",actions:[{text:"GraalVM SpringBoot打包native image",link:"/dev/GraalVM SpringBoot打包native image"}]})),null,16),i[0]||(i[0]=r(`<h1 id="graalvm-springboot打包native-image" tabindex="-1"><a class="header-anchor" href="#graalvm-springboot打包native-image"><span>GraalVM SpringBoot打包native image</span></a></h1><h2 id="一、openjdk是什么" tabindex="-1"><a class="header-anchor" href="#一、openjdk是什么"><span>一、OpenJDK是什么</span></a></h2><p>Java最早由SUN公司(Sun Microsystems，发起于美国斯坦福大学，SUN是Stanford University Network的缩写)发明。</p><p>OpenJDK是Java平台标准版（Java SE）的免费开源实现，由Sun Microsystems于2006年开始推动。根据GNU通用公共许可证GPL v2发布，由SUN和Java社区提供支持。</p><p>2009年Oracle收购了Sun公司，自此Java的维护方之一的SUN也变成了Oracle。Oracle JDK之前被称为SUN JDK，收购后被命名为Oracle JDK。</p><p>从 Java SE 7 开始，OpenJDK 成为了 Oracle JDK 的官方参考实现。目前OpenJDK的发行版有很多，几乎的所有都派生自OpenJDK，都可以统称为OpenJDK，它们之间没有重大的功能差异，不同的是许可证。</p><p>目前常见的OpenJDK有：OpenJDKBellSoft LibericaEclipse Temurin (Adopt OpenJDK)Azul ZuluIBM SemeruMicrosoft OpenJDKRedHat OpenJDKAmazon Corretto阿里 Dragonwell华为毕昇JDK腾讯 Kona</p><h2 id="二、graalvm是什么" tabindex="-1"><a class="header-anchor" href="#二、graalvm是什么"><span>二、GraalVM是什么</span></a></h2><p>GraalVM官网：https://www.graalvm.org</p><p>​ GraalVM 是 Oracle 开源的一款通用虚拟机产品，官方称之为 Universal GraalVM，是新一代的通用多语言高性能虚拟机。能执行各类高性能与互操作性任务，在无需额外开销的前提下允许用户构建多语言应用程序。</p><h4 id="graalvm-和-jdk-有什么关系" tabindex="-1"><a class="header-anchor" href="#graalvm-和-jdk-有什么关系"><span>GraalVM 和 JDK 有什么关系</span></a></h4><ul><li>Java 虚拟机都是内置在 JDK 中的，比如Orcale JDK、OpenJDK，默认内置的都是 HotSpot 虚拟机。</li><li>GraalVM 也是一种 JDK，一种高性能的 JDK。完全可以用它替代 OpenJDK、Orcale JDK。</li><li>GraalVM 不但包含 JIT (Graal)即时编译器，还包含 AOT (Native Image)，可直接将代码转换成机器码执行。</li></ul><h4 id="graalvm-的优势" tabindex="-1"><a class="header-anchor" href="#graalvm-的优势"><span>GraalVM 的优势</span></a></h4><p>​ GraalVM 可以完全取代 HotSpot 虚拟机。把之前运行在 HotSpot 上的代码直接平移到 GraalVM 上，不用做任何的改变，甚至都感知不到，项目可以完美的运行。</p><p>​ 使用GraalVM 的 Native Image 可以将 Java 应用编译为原生二进制可执行文件，可以使得 Java 应用<strong>脱离 JVM 运行</strong> 。并且启动速度飞快，内存负载也很低，可零预热地达到峰值性能。</p><p>​ 用 AOT 编译最终生成的可执行文件非常小，这对于云端部署非常友好。目前很多场景下都使用 Docker 容器的方式部署，打一个 Java 程序的镜像包要包含完整的 JVM 环境和编译好的 Jar 包。而AOT 方式可以最大限度的缩小 Docker 镜像的体积。在<strong>云原生</strong> 环境中，应用的启动速度和性能是关键的考量因素。</p><p>启动时间对比：<img src="https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175030-0.webp" alt="图片" loading="lazy"></p><p>内存占用对比：<img src="https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175030-1.webp" alt="图片" loading="lazy"></p><p>​ 另外，GraalVM 还是一种支持<strong>多语言混编</strong>的虚拟机程序，不仅支持 Java 语言，还支持其他语言。不仅包括嫡系的 JVM 系语言Kotlin、Scala，还包括 JavaScript、Nodejs、Ruby、Python 等。GraalVM 提供了一个全面的生态系统，消除编程语言之间的隔离，用 Graal 执行的语言可以互相调用，允许使用来自其他语言的库。</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175030-2.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h4 id="jit和aot的关系" tabindex="-1"><a class="header-anchor" href="#jit和aot的关系"><span>JIT和AOT的关系</span></a></h4><ul><li>JIT，Just-in-Time，即时编译，也就是边运行边编译，占用内存高、启动速度慢，缺点是编译时需要占用运行时的资源。</li><li>AOT，Ahead-of-Time，运行前编译，AOT 编译能提前将源代码转化为机器码，内存占用低，启动速度快，可以无需 runtime 运行，直接将 runtime 静态链接至最终的程序中，AOT 缺点就是编译时间的增加。</li></ul><h4 id="什么是-native-image" tabindex="-1"><a class="header-anchor" href="#什么是-native-image"><span>什么是 Native Image</span></a></h4><p>​ 随着云计算技术的不断发展，Serverless 和容器成为了云原生领域的两个重要技术，<strong>弹性伸缩</strong> 能力则成为云原生应用的一个重要特性，它可以让应用在云资源使用不足时自动扩展资源，以满足业务需求；而在资源使用过高时，又可以自动缩容以节省成本。这个特性可以让应用更高效地利用云资源，并保证业务的稳定性和可靠性。</p><p>​ 这时候JVM的JIT导致的启动延迟就让Java程序显得很臃肿，所以如果想让Java在云原生时代焕发第二春，支持AOT是非常重要的一步，之前Java有尝试过jaotc方案来实现，不过没多久就因为效果不达预期而被移除。而 GraalVM 则使用了另外一种实现Java AOT的思路，既直接摒弃JVM，和C/C++一样通过编译器直接将代码编译成机器码。这无疑是一种直接颠覆Java语言设计的思路，不过还是被实现了，那就是GraalVM Native Image。</p><p>​ Native Image 通过C语言实现了一个超微缩的运行时组件 —— Substrate VM，基本实现了JVM的各种特性，包含异常处理，同步，线程管理，内存管理（垃圾回收）和 JNI 等组件，但足够轻量、可以被轻松内嵌，SubstrateVM 的启动时间非常短，内存开销非常少。用这种方式编译出的 Java 程序的执行时间可与C语言持平。这一方案在经过长时间的优化和积累后，已经拥有非常不错的效果，目前已成为Oracle官方首推的Java AOT解决方案。</p><h4 id="native-image-的缺点" tabindex="-1"><a class="header-anchor" href="#native-image-的缺点"><span>Native Image 的缺点</span></a></h4><ul><li>不支持交叉编译，只能编译为本机平台的机器码程序。</li><li>对包含 Java 反射、动态代理的项目进行 AOT 编译，需要增加配置。</li><li>AOT 编译用时较久、资源占用较高。编译时内存占用几个G，CPU占用80%+是很常见的。</li></ul><p>由于是 AOT 技术，对于反射这种纯粹在运行时才能确定的部分，不能完全通过优化编译器解决，必须提前向 GraalVM 提供一个列出了涉及 Java 反射、动态代理所有的类的 JSON 列表，否则，要么编译时会失败，要么编译后的应用在运行时会失败。</p><h2 id="三、graalvm-的环境搭建" tabindex="-1"><a class="header-anchor" href="#三、graalvm-的环境搭建"><span>三、GraalVM 的环境搭建</span></a></h2><blockquote><p>目标环境：</p><ul><li>GraalVM 22.3.3</li><li>Java 语言级别：17</li><li>Maven 3.8.6</li><li>IntelliJ IDEA 2023.1.3</li><li>Visual Studio 2022</li></ul></blockquote><h4 id="_1-graalvm-版本" tabindex="-1"><a class="header-anchor" href="#_1-graalvm-版本"><span>1. GraalVM 版本</span></a></h4><ol><li><p>在之前，GraalVM 有着两个发行版：</p><p>从 GraalVM 22.3.3 开始，新增了一个全新的发行版：</p><p>新的 Oracle GraalVM 包含了原先 GraalVM EE 独享的所有优化以及绝大多数功能，对包括商业用途在内的场景都完全免费，也允许重分发构建。除了少数功能依然 EE 独占，其它对于大多数用户在功能上来说都和 GraalVM EE 一致。</p><ul><li><strong>Oracle GraalVM</strong> 闭源免费</li></ul></li><li><p>**GraalVM CE（Community Edition ）**社区版，开源免费</p><p>**GraalVM EE（Enterprise Edition）**企业版，闭源付费</p></li></ol><h4 id="_2-graalvm-下载【二选一】" tabindex="-1"><a class="header-anchor" href="#_2-graalvm-下载【二选一】"><span>2. GraalVM 下载【二选一】</span></a></h4><ul><li><p>Oracle GraalVM：https://www.oracle.com/cn/java/technologies/downloads/#graalvmjava17-windows</p><p><strong>Oracle GraalVM 已集成 Native Image</strong>，不需要单独下载 Native Image。</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175030-3.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure></li><li><p>GraalVM CE：https://github.com/graalvm/graalvm-ce-builds/releases![图片](E: /source/Git/blogAsset/images/2024/640-1727706175030-4.webp)</p><p><strong>GraalVM CE 未集成 Native Image</strong> ，需要在刚才的页面下载 <code>native-image-installable-svm-java17-windows-amd64-22.3.3.jar</code>。</p></li></ul><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175031-5.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h4 id="_3-graalvm-环境变量" tabindex="-1"><a class="header-anchor" href="#_3-graalvm-环境变量"><span>3. GraalVM 环境变量</span></a></h4><ul><li><p>将下载的 zip 压缩包解压到自己喜欢的文件夹，不要包含中文路径，解压得到的就是 GraalVM 程序文件。与安装 JDK 时类似。设置环境变量如下：</p><blockquote></blockquote><ul><li><p>变量名：JAVA_HOME</p><p>变量值：D:\\Develop\\Java\\graalvm-jdk-17.0.8+9.1</p></li><li><p>变量名：GRAALVM_HOME</p><p>变量值：%JAVA_HOME%</p></li><li><p>变量名：Path</p><p>变量值：%JAVA_HOME%\\bin</p></li></ul></li><li><p>如果上面的环境变量设置成功，在 CMD 的任意路径中输入以下命令应该能看到上面设置的路径。</p><p>where java</p><p>where gu</p><div class="language-cmd line-numbers-mode" data-highlighter="shiki" data-ext="cmd" data-title="cmd" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">C:\\&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> java</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">C:\\</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Program</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> Files</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\\</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\\</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">graalvm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ee</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">java17</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">-21.3.0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\\</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">bin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\\java.exe</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">C:\\&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> gu</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">C:\\</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Program</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> Files</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\\</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\\</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">graalvm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ee</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">java17</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">-21.3.0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\\</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">bin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\\gu.cmd</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用java -version也能看到 GraalVM 字样</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>C:\\Users\\Looming&gt;java -version</span></span>
<span class="line"><span>java version &quot;17.0.8&quot; 2023-07-18 LTS</span></span>
<span class="line"><span>Java(TM) SE Runtime Environment Oracle GraalVM 17.0.8+9.1 (build 17.0.8+9-LTS-jvmci-23.0-b14)</span></span>
<span class="line"><span>Java HotSpot(TM) 64-Bit Server VM Oracle GraalVM 17.0.8+9.1 (build 17.0.8+9-LTS-jvmci-23.0-b14, mixed mode, sharing)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_4-安装-native-image" tabindex="-1"><a class="header-anchor" href="#_4-安装-native-image"><span>4. 安装 Native Image</span></a></h4><p>​ <strong>【GraalVM CE 社区版需要安装，Oracle GraalVM跳过此步骤】</strong></p><ul><li><p>Native Image是一种将Java代码提前编译为独立可执行文件的技术，此刻执行文件包括应用程序类、依赖、运行时库以及JDK静态连接的本机代码。 Graalvm通过子模块SubstrateVM来支持Native Image，相比JVM其生成的程序具有更快的启动时间和更低的运行时开销。</p></li><li><p><code>Native Image</code> 包就是前面下载的 JAR 包。输入以下命令对 <code>Native Image</code> 进行本地安装。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>gu -L install Native-Image的JAR包路径</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中，<code>Native-Image的JAR包路径</code> 要替换成实际的路径。注意：native-image的版本必须跟GraalVM的版本对应，否则会报错。</p></li><li><p>验证组件：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>gu list</span></span>
<span class="line"><span>native-image --version</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_5-安装-visual-studio" tabindex="-1"><a class="header-anchor" href="#_5-安装-visual-studio"><span>5. 安装 Visual Studio</span></a></h4><ul><li><p>GraalVM 的运行需要 Visual Studio 中的 MSVS 的支持，因此需要下载 Visual Studio。这里下载的是 <code>Microsoft Visual Studio 2022 (64 位)</code> ，社区版就足够了。</p><p>Visual Studio 下载网址：https://visualstudio.microsoft.com/zh-hans/vs/</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175031-6.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure></li><li><p>现在，Visual Studio 在官网上只会提供在线安装包。下载完在线安装包后，选择安装含 <strong>MSVS</strong> 的选项。</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175031-7.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><ul><li>工作负荷选择：<strong>使用C++的桌面开发</strong>；</li><li>语言包选择：<strong>英语</strong>。</li><li>路径禁止包含中文。</li></ul></li><li><p>至此，GraalVM 基本运行的环境已经搭成。</p><p><strong>但是目前所有构建命令都必须在Visual Studio的名为 <code>x64 Native Tools Command Prompt for VS 2022</code> 的命令提示符中执行。快捷方式可以在“开始菜单”中找到，也可以在搜索框中搜索应用程序。</strong></p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175031-8.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>或者，也可以执行 <code>call &quot;&lt;VS2022路径&gt;\\VC\\Auxiliary\\Build\\vcvars64.bat</code> 从其他终端运行，然后再开始使用构建命令。</p></li></ul><h4 id="_6-msvc-环境变量配置" tabindex="-1"><a class="header-anchor" href="#_6-msvc-环境变量配置"><span>6. MSVC 环境变量配置</span></a></h4><p>​ 由于我们接下来的构建可能会使用maven插件来执行，为了能在任何命令行中找到并使用MSVC环境，我们需要配置一下MSVC 环境变量。</p><p>​ 如果不配置就不能在idea当中选中执行，需要每次手动打开x64 Native Tools Command Prompt for VS 2022，然后进入项目目录，手动执行gluonfx: build。<img src="https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175031-9.webp" alt="图片" loading="lazy"></p><p><strong>环境变量：</strong></p><p>​ <strong>注意要修改成自己的路径</strong>（Windows Kits目录一般在磁盘根目录）</p><blockquote><p>MSVCC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\VC\\Tools\\MSVC\\14.28.29333</p><p>WK10_INCLUDEC:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0</p><p>WK10_LIBC:\\Program Files (x86)\\Windows Kits\\10\\Lib\\10.0.18362.0</p><p>WK10_BINC:\\Program Files (x86)\\Windows Kits\\10\\bin\\10.0.18362.0</p><p>INCLUDE%WK10_INCLUDE%\\ucrt;%WK10_INCLUDE%\\um;%WK10_INCLUDE%\\shared;%MSVC%\\include;</p><p>LIB%WK10_LIB%\\um\\x64;%WK10_LIB%\\ucrt\\x64;%MSVC%\\lib\\x64;</p><p>Path下新增%MSVC%\\bin\\HostX64\\x64%WK10_BIN%\\x64</p></blockquote><p><strong>验证环境：</strong></p><p>命令行输入<code>cl</code>，回车，显示如下内容说明环境已经配置好了</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>C:\\Users\\Looming&gt;cl</span></span>
<span class="line"><span>Microsoft (R) C/C++ Optimizing Compiler Version 19.37.32824 for x64</span></span>
<span class="line"><span>Copyright (C) Microsoft Corporation. All rights reserved.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>usage: cl [ option... ] filename... [ /link linkoption... ]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Oracle GraalVM 官方文档：https://docs.oracle.com/en/graalvm/jdk/17/</p><h2 id="四、使用graalvm构建项目的几种方式" tabindex="-1"><a class="header-anchor" href="#四、使用graalvm构建项目的几种方式"><span>四、使用GraalVM构建项目的几种方式</span></a></h2><h3 id="_1-构建不含反射的命令行应用" tabindex="-1"><a class="header-anchor" href="#_1-构建不含反射的命令行应用"><span>1. 构建不含反射的命令行应用</span></a></h3><h4 id="_1-建一个简单的-java-示例项目" tabindex="-1"><a class="header-anchor" href="#_1-建一个简单的-java-示例项目"><span>(1) 建一个简单的 Java 示例项目</span></a></h4><p>​ 此项目的路径中不能有中文，否则后面 GraalVM 运行时会报错。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Demo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">       System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello, world.&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-有两种情况-第一种是打包class-第二种是打包jar" tabindex="-1"><a class="header-anchor" href="#_2-有两种情况-第一种是打包class-第二种是打包jar"><span>(2) 有两种情况，第一种是打包class，第二种是打包jar</span></a></h4><ul><li><p><strong>打包class</strong></p><ul><li><p>首先将.java编译为 <code>.class</code> 文件，可以使用javac，也可以先运行一次让IDE编译。</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175031-10.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure></li><li><p>打开x64 Native Tools Command Prompt for VS 2022</p></li><li><p>切换到.class所在目录</p></li><li><p>运行<code>native-image 类名</code></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>native-image Demo</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175032-11.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure></li><li></li></ul><p>编译完成后出现了一个exe文件，使用命令行输入文件名运行，因为这个程序没有GUI界面<img src="https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175032-12.webp" alt="图片" loading="lazy"><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175032-13.webp" alt="图片" loading="lazy"> 可以看到程序已经正常运行。</p></li><li><p><strong>打包jar</strong></p></li><li><p>依然以这个项目为例，新建一个Artifacts，然后Build Artifacts，打出一个jar包（这里不是我们的重点， 此处略过打jar包的步骤）<img src="https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175032-14.webp" alt="图片" loading="lazy"></p></li><li><p>打开x64 Native Tools Command Prompt for VS 2022</p></li><li><p>切换到.jar所在目录</p></li><li><p>运行<code>native-image -jar jar包文件名</code></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>native-image -jar Demo.jar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175032-15.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure></li><li></li></ul><p>在命令行中运行打包好的exe，一样可以正常运行<img src="https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175032-16.webp" alt="图片" loading="lazy"></p><ul><li>Native Image 官方文档：https://www.graalvm.org/latest/reference-manual/native-image/</li></ul><hr><h3 id="_2-构建-spring-boot-web-应用" tabindex="-1"><a class="header-anchor" href="#_2-构建-spring-boot-web-应用"><span>2. 构建 Spring-Boot Web 应用</span></a></h3><p>​ 在容器化、云原生时代，Spring的其缺点尤为明显，主要表现在启动慢、占用内用大、笨重。Spring官方也一直在改进这些问题，但在3.0之前，一直没有好的解决方案。</p><p>​ Spring团队致力于为Spring应用程序提供原生映像支持已经有一段时间了。在SpringBoo2.x的Spring Native实验项目中酝酿了3年多之后，随着SpringBoot 3.0.0 GA版本发布，开始正式支持GraalVM Native Image，这也意味着占据Java Web圈半壁江山的Spring框架正式进入真正的云原生时代。</p><p><strong>SpringBoot 3.0主要特性：</strong></p><ul><li>要求Java 17 作为最低版本。需要 Graal 22.3 或更高版本和 Native Build Tools Plugin 0.9.17 或更高版本。</li><li><strong>支持 GraalVM native images，取代实验性的 Spring Native 项目。</strong><ul><li>Spring Boot GraalVM Native Image Support 官方文档：https://docs.spring.io/spring-boot/docs/current/reference/html/native-image.html</li></ul></li></ul><h4 id="_1-使用spring-initializr创建spring-boot项目" tabindex="-1"><a class="header-anchor" href="#_1-使用spring-initializr创建spring-boot项目"><span>(1) 使用Spring Initializr创建Spring Boot项目</span></a></h4><ul><li>选择 Maven 类型的项目，用 GraalVM 作为 JDK ，语言级别 17 。</li></ul><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175032-17.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><ul><li>选择 Spring Boot 3.0 以上版本 ，勾选 GraalVM 支持和 Spring Web。</li></ul><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175033-18.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h4 id="_2-maven-编译插件" tabindex="-1"><a class="header-anchor" href="#_2-maven-编译插件"><span>(2) Maven 编译插件</span></a></h4><p>这时的POM.xml中应该是有native-maven-plugin和spring-boot-maven-plugin这两个插件的，我们暂时什么都不需要做。</p><p>native-maven-plugin官方文档：https://graalvm.github.io/native-build-tools/latest/maven-plugin.html</p><p>spring-boot-maven-plugin官方文档：https://docs.spring.io/spring-boot/docs/3.1.5/maven-plugin/reference/htmlsingle/</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">plugins</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">plugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.graalvm.buildtools&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;native-maven-plugin&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">plugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">plugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;spring-boot-maven-plugin&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">configuration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">builder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;paketobuildpacks/builder-jammy-tiny:latest&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">builder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">configuration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">plugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">plugins</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-写一个测试用的web接口" tabindex="-1"><a class="header-anchor" href="#_3-写一个测试用的web接口"><span>(3) 写一个测试用的web接口</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">SpringBootApplication</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RestController</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SpringNativeImageDemoApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RequestMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> hello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Hello Spring Boot 3 !&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        SpringApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">SpringNativeImageDemoApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, args);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-构建应用" tabindex="-1"><a class="header-anchor" href="#_4-构建应用"><span>(4) 构建应用</span></a></h4><p>构建、测试、发布三个操作的命令分别是：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">构建：mvn</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Pnative</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> native:compile</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">测试：mvn</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -PnativeTest</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">发布：mvn</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Pnative</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> spring-boot:build-image</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  注意此命令会打包镜像并且发布到Docker的官方仓库中</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>虽然 native:compile 命令表面意义是编译，但是实际上它就是构建原生镜像的命令</p></blockquote><ul><li>我们这里进行构建，需要<strong>进入项目目录下执行命令</strong>。如果没有配置MSVC环境变量，则需要在x64 Native Tools Command Prompt执行。</li></ul><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mvn</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Pnative</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clean</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> native:compile</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175033-19.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><ul><li>构建完成，出现BUILD SUCCESS字样</li></ul><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175033-20.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><ul><li>在项目的target目录下，可以找到我们编译好的原生应用，Windows平台下的后缀为.exe</li></ul><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175033-21.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h4 id="_5-运行程序" tabindex="-1"><a class="header-anchor" href="#_5-运行程序"><span>(5) 运行程序</span></a></h4><p><strong>我们来尝试分别运行.exe和.jar来作为对比。</strong></p><p>由于不是GUI应用，所以若想要看到控制台的输出内容，需要在cmd中运行.exe通过双击直接运行的话，退出时需要在任务管理器中手动结束应用</p><ul><li><p>**原生应用启动，耗时0.116秒，内存占用25M **<img src="https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175033-22.webp" alt="图片" loading="lazy"></p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175033-23.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure></li><li><p>**JVM方式启动应用，耗时2.46秒，内存占用134M **<img src="https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175033-24.webp" alt="图片" loading="lazy"><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175033-25.webp" alt="图片" loading="lazy"></p></li></ul><p><strong>启动后都可以正常访问，但原生应用的冷启动速度和内存占用都要小多了，并且不依赖Java环境。</strong></p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175034-26.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><hr><h3 id="_3-构建-javafx-桌面应用" tabindex="-1"><a class="header-anchor" href="#_3-构建-javafx-桌面应用"><span>3. 构建 JavaFX 桌面应用</span></a></h3><p>​ 以往，桌面应用开发技术中JavaFX并不算主流，一个主要原因就是Java应用在运行时总是需要依赖JRE环境，为了兼容性我们通常会把JRE打包进程序当中，这样也导致了程序过于臃肿占用空间非常大，并且在启动时还需要提前解压运行环境，体验非常不好。</p><p>​ GraalVM 的出现，可以说是解救 JavaFX 于水火之中，使用 Native Image 打包出来的程序，不仅不用依赖JRE环境，占用空间小，启动速度也是非常的快。</p><p>​ 接下来我们就一起来看看怎么对JavaFX项目进行打包吧，我们要用的 gluonfx-maven-plugin 这个打包插件是由 Gluon 提供的。实际上 Gluon 目前已经成为了 JavaFX 技术的主要提供商。</p><p>Gluon 官网：https://gluonhq.com</p><p>gluonfx-maven-plugin 插件官方文档网址：https://docs.gluonhq.com/#_gluonfx_plugin_for_maven</p><h4 id="_1-使用maven创建javafx项目" tabindex="-1"><a class="header-anchor" href="#_1-使用maven创建javafx项目"><span>(1) 使用Maven创建JavaFX项目</span></a></h4><p>创建过程省略...</p><p>或者我们可以下载Gluon官方示例: https://github.com/gluonhq/gluon-samples/tree/master/HelloFXML</p><ul><li><p><strong>对于 Java 8 以上的 JavaFX 项目，必须使用 Java 模块系统才能对其进行 GraalVM 打包</strong>。出于本文的重点，这里不详细介绍什么是 Java 模块系统以及它的语法。通常，构建 Java 模块系统只需要在顶级目录中添加一个模块声明文件 <code>module-info.java</code>。</p></li><li><p><strong>项目的整个文件路径中都不能含有中文</strong>，否则后面的 GraalVM 打包将失败。</p></li></ul><h4 id="_2-maven-插件配置模板" tabindex="-1"><a class="header-anchor" href="#_2-maven-插件配置模板"><span>(2) Maven 插件配置模板</span></a></h4><p>​ 在pom.xml中引入gluonfx-maven-plugin插件，<strong>需要注意几个要根据自己的项目修改的地方</strong></p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">project</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">properties</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">project.build.sourceEncoding</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;UTF-8&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">project.build.sourceEncoding</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">javafx.version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;17.0.8&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">javafx.version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        &lt;!-- 启动类 【需要根据自己的项目修改】 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">main.class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;cn.itsource.Main&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">main.class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">properties</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        &lt;!-- JavaFX 依赖 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.openjfx&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;javafx-controls&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;\${javafx.version}&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.openjfx&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;javafx-fxml&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;\${javafx.version}&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">plugins</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            &lt;!-- Maven打包插件 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">plugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.apache.maven.plugins&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;maven-compiler-plugin&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;3.11.0&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">configuration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">source</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;17&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">source</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;17&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">configuration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">plugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            &lt;!-- OpenJFX的JavaFX打包插件 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">plugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.openjfx&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;javafx-maven-plugin&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;0.0.8&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">configuration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">mainClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;\${main.class}&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">mainClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">configuration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">plugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            &lt;!-- Gluon的JavaFX打包插件 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">plugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;com.gluonhq&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;gluonfx-maven-plugin&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;1.0.21&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">configuration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                    &lt;!-- 打包平台 本机平台 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;host&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                    &lt;!-- 启动类 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">mainClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;\${main.class}&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">mainClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                    &lt;!-- jfx静态sdk版本 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">javafxStaticSdkVersion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;\${javafx.version}&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">javafxStaticSdkVersion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                    &lt;!-- 额外的资源文件后缀 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">resourcesList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;.*\\\\.properties$&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">resourcesList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                    &lt;!-- 涉及反射的类 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">reflectionList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                        &lt;!-- JavaFX Controller【需要根据自己的项目修改】 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;cc.looming.HelloController&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                        &lt;!-- JavaFX FXML --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;javafx.fxml.FXMLLoader&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                        &lt;!-- JavaFX Base --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;javafx.application.Platform&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;javafx.application.Application&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;javafx.stage.Stage&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;javafx.scene.Scene&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                        &lt;!-- JavaFX Controls 【需要根据自己的项目修改】 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                        &lt;!-- 可以在.fxml文件的头部查看import了哪些类 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;javafx.geometry.Insets&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;javafx.scene.control.Button&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;javafx.scene.control.Label&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;javafx.scene.control.ScrollPane&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;javafx.scene.control.TextArea&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;javafx.scene.control.TextField&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;javafx.scene.image.Image&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;javafx.scene.image.ImageView&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;javafx.scene.layout.AnchorPane&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;javafx.scene.layout.HBox&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;javafx.scene.layout.Pane&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;javafx.scene.layout.VBox&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;javafx.scene.shape.Polygon&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;javafx.scene.text.Font&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                        &lt;!-- 枚举类 【需要根据自己的项目修改】--&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                        &lt;!-- Controls的有些属性使用的是枚举，若用到了也需要列出来 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;javafx.geometry.NodeOrientation&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">reflectionList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">configuration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                &lt;!-- 在maven的package阶段调用本插件的build --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">executions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">execution</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">goals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">goal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;build&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">goal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">goals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">phase</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;package&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">phase</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">execution</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">executions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">plugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">plugins</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">project</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><ul><li><p>JavaFX 支持使用 FXML 这种文本语言来创建组件，然而对于这种文本语言，是借助于反射技术来实现的。为了让 GraalVM 打包成功，需要在<code>&lt;reflectionList&gt;</code>中列出所有的 JavaFX Controller控制器类，以及在FXML中使用到的各种控件。</p></li><li><p>如果需要在 JavaFX 中使用一些特殊的资源文件，这需要在此列出所有的这些文件。此插件打包时已经内置了如下类型的文件。</p><blockquote><p><code>png</code>, <code>jpg</code>, <code>jpeg</code>, <code>gif</code>, <code>bmp</code>, <code>ttf</code>, <code>raw</code></p><p><code>xml</code>, <code>fxml</code>, <code>css</code>, <code>gls</code>, <code>json</code>, <code>dat</code>,</p><p><code>license</code>, <code>frag</code>, <code>vert</code>, <code>obj</code></p></blockquote><p>已经内置了类型的文件不需要自行列出（即上面列出的类型的文件不属于上面所言的 <code>特殊的资源文件</code> ）。更多的信息，可见：https://docs.gluonhq.com/#_resourceslist</p><p>列出的方法是，在 <code>&lt;configuration&gt;</code> 中的 <code>&lt;bundlesList&gt;</code>添加<code>&lt;list&gt;</code>标签，然后在 <code>&lt;list&gt;</code> 中依次列出<code>&lt;list&gt;文件路径.文件名&lt;/list&gt;</code>。不过要注意，这个列出文件的时候，要像 Java 类一样，<strong>使用点号来代替路径分隔符</strong>，且 <strong>不需要加上文件后缀</strong>。</p></li></ul><h4 id="_3-构建应用" tabindex="-1"><a class="header-anchor" href="#_3-构建应用"><span>(3) 构建应用</span></a></h4><ul><li><p>方式一：在<strong>项目目录</strong>下的命令行中输入命令<code>mvn clean gluonfx:build</code>进行 GraalVM 打包，如果未配置MSVC环境变量，则需要在Native Tools Command中执行。</p></li><li><p>方式二：或者点击IDEA右侧的gluonfx: build<img src="https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175034-27.webp" alt="图片" loading="lazy"></p><p>打包完成之后，应该可以看到在项目路径 <code>\\target\\gluonfx\\x86_64-windows\\</code> 下的 EXE 文件。对于运行来说，就只有生成的 EXE 文件是核心文件，其它文件只是打包过程中生成的中间产物，都可以删除。</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175034-28.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure></li></ul><h4 id="_4-运行程序" tabindex="-1"><a class="header-anchor" href="#_4-运行程序"><span>(4) 运行程序</span></a></h4><ul><li>打包完成之后，可以直接在操作系统中双击运行此 EXE 文件，但是这种方式标准输出流将不会定向到运行来源，这意味着将无法看到 <code>System.out.println(...)</code> 这之类代码的输出。</li><li>如果想要看到运行过程中输出到控制台的打印和报错信息，需要使用<code>mvn gluonfx:nativerun</code>命令运行，或者在IDEA中点击 gluonfx: nativerun</li></ul><h2 id="五、相关资料" tabindex="-1"><a class="header-anchor" href="#五、相关资料"><span>五、相关资料</span></a></h2><p>Oracle GraalVM 下载：https://www.oracle.com/cn/java/technologies/downloads/#graalvmjava17-windows</p><p>GraalVM Community Edition 下载：https://github.com/graalvm/graalvm-ce-builds/releases</p><p>Visual Studio 下载：https://visualstudio.microsoft.com/zh-hans/vs/</p><p>Oracle GraalVM 官方文档：https://docs.oracle.com/en/graalvm/jdk/17/</p><p>Native Image 官方文档：https://www.graalvm.org/latest/reference-manual/native-image/</p><p>Spring Boot 3.0 更新日志：https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Release-Notes</p><p>Spring Boot GraalVM Native Image Support 官方文档：https://docs.spring.io/spring-boot/docs/current/reference/html/native-image.html</p><p>native-maven-plugin 官方文档：https://graalvm.github.io/native-build-tools/latest/maven-plugin.html</p><p>spring-boot-maven-plugin 官方文档：https://docs.spring.io/spring-boot/docs/3.1.5/maven-plugin/reference/htmlsingle/</p><p>gluonfx-maven-plugin 官方文档：https://docs.gluonhq.com/#_gluonfx_plugin_for_maven</p><p>Gluon官方示例: https://github.com/gluonhq/gluon-samples/tree/master/HelloFXML</p><p>Gluon示例程序的仓库：https://github.com/gluonhq/gluon-samples/</p><p>Gluon的JavaFX项目在线创建网站：https://start.gluon.io/</p><p>一个国人写的GraalVM最佳实践：https://gitee.com/westinyang/java-graalvm-start</p><p>Java在云原生的破局利器——AOT(JIT与AOT)：https://cloud.tencent.com/developer/article/2228910</p><p>SpringBoot3.x原生镜像实践（Linux - Liberica NIK）：https://www.cnblogs.com/throwable/p/17644981.html</p>`,134)),s(n,{colorful:"",service:"email,qq,qzone,qrcode,weibo,telegram,twitter"})])}const A=t(g,[["render",d],["__file","GraalVM SpringBoot打包native image.html.vue"]]),v=JSON.parse('{"path":"/dev/GraalVM%20SpringBoot%E6%89%93%E5%8C%85native%20image.html","title":"GraalVM SpringBoot打包native image","lang":"zh-CN","frontmatter":{"title":"GraalVM SpringBoot打包native image","excerpt":null,"description":"GraalVM SpringBoot打包native image","date":"2024-09-30T00:00:00.000Z","category":"Java","tag":"Java","author":"xlc520","article":true,"timeline":true,"icon":"java","head":[["meta",{"property":"og:url","content":"https://blog.ciberviler.top/dev/GraalVM%20SpringBoot%E6%89%93%E5%8C%85native%20image.html"}],["meta",{"property":"og:site_name","content":"StudyNote - 丰富的知识笔记库"}],["meta",{"property":"og:title","content":"GraalVM SpringBoot打包native image"}],["meta",{"property":"og:description","content":"GraalVM SpringBoot打包native image"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175030-0.webp"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-15T14:38:03.000Z"}],["meta",{"property":"article:author","content":"xlc520"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2024-09-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-15T14:38:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"GraalVM SpringBoot打包native image\\",\\"image\\":[\\"https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175030-0.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175030-1.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175030-2.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175030-3.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175031-5.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175031-6.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175031-7.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175031-8.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175031-9.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175031-10.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175032-11.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175032-12.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175032-13.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175032-14.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175032-15.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175032-16.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175032-17.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175033-18.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175033-19.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175033-20.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175033-21.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175033-22.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175033-23.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175033-24.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175033-25.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175034-26.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175034-27.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1727706175034-28.webp\\"],\\"datePublished\\":\\"2024-09-30T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-15T14:38:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xlc520\\"}]}"]]},"headers":[{"level":2,"title":"一、OpenJDK是什么","slug":"一、openjdk是什么","link":"#一、openjdk是什么","children":[]},{"level":2,"title":"二、GraalVM是什么","slug":"二、graalvm是什么","link":"#二、graalvm是什么","children":[]},{"level":2,"title":"三、GraalVM 的环境搭建","slug":"三、graalvm-的环境搭建","link":"#三、graalvm-的环境搭建","children":[]},{"level":2,"title":"四、使用GraalVM构建项目的几种方式","slug":"四、使用graalvm构建项目的几种方式","link":"#四、使用graalvm构建项目的几种方式","children":[{"level":3,"title":"1. 构建不含反射的命令行应用","slug":"_1-构建不含反射的命令行应用","link":"#_1-构建不含反射的命令行应用","children":[]},{"level":3,"title":"2. 构建 Spring-Boot Web 应用","slug":"_2-构建-spring-boot-web-应用","link":"#_2-构建-spring-boot-web-应用","children":[]},{"level":3,"title":"3. 构建 JavaFX 桌面应用","slug":"_3-构建-javafx-桌面应用","link":"#_3-构建-javafx-桌面应用","children":[]}]},{"level":2,"title":"五、相关资料","slug":"五、相关资料","link":"#五、相关资料","children":[]}],"git":{"createdTime":1731681483000,"updatedTime":1731681483000,"contributors":[{"name":"xlc","email":"2215400217@qq.com","commits":1}]},"readingTime":{"minutes":18.16,"words":5447},"filePathRelative":"dev/GraalVM SpringBoot打包native image.md","localizedDate":"2024年9月30日","excerpt":""}');export{A as comp,v as data};
