import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as n,o,c as r,b as a,d as e,e as g,a as i}from"./app-c4cf960f.js";const d={},p=i('<h1 id="六十多个-vscode-插件-助你打造最强编辑器" tabindex="-1"><a class="header-anchor" href="#六十多个-vscode-插件-助你打造最强编辑器" aria-hidden="true">#</a> 六十多个 vscode 插件，助你打造最强编辑器</h1><p>本文不做任何编辑器的比较，只是我本人日常使用 <code>vscode</code> 进行开发，并且比较喜欢折腾 <code>vscode</code> ，会到处找这一些好玩的插件，于是越攒越多，今天给大家推荐一下我收藏的 <strong>60</strong> 多个 <code>vscode</code> 插件，据说插件装太多，编辑器会变卡，可能是我的电脑配置还顶得住，目前并没有感觉到卡卡的。</p><p>接下来我会将会以 <strong>优化外观</strong>，<strong>功能扩展</strong>，<strong>提升编码效率</strong>，<strong>代码格式化</strong>，<strong>其它插件</strong> 几个分类来进行介绍。</p><p>一是把它们 <strong>分享</strong> 给有需要的小伙伴们，二是通过此文向小伙伴们 <strong>征集</strong> 其它好玩的插件，可以是任何类型的。有想要推荐其它插件的请评论区补充一下，我看到后会添加到文章中并标注出你的 <strong>ID</strong> 。</p><p>注：本文只涉及插件的基本使用，也就是让你知道存在这样一种插件，以及大致了解这个插件可以做什么事，部分插件的详细配置过于复杂，有需要的小伙伴请自行冲浪。根据每个人电脑，<code>vscode</code> 配置，以及插件的不同，部分插件可能在你电脑上不会生效。文中提到的快捷键都是 <code>windows</code> 下的，其他操作系统的快捷键请自行了解。</p><h1 id="优化外观" tabindex="-1"><a class="header-anchor" href="#优化外观" aria-hidden="true">#</a> 优化外观</h1><p>好马用好鞍，好看的编辑器外观，可以提升程序员的编码体验，可以让开发人员的心情变好，让写 <code>bug</code> 更有动力。</p><h2 id="better-comments" tabindex="-1"><a class="header-anchor" href="#better-comments" aria-hidden="true">#</a> Better Comments</h2><p>一款美化注释的插件，可以根据不同种类的注释，显示不同的颜色，一目了然。</p><figure><img src="https://static.xlc520.tk/blogImage/1de9a57c05364ca3a662aed763fcaeec.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>安装完以后，插件会默认自带几种颜色的注释，还可以通过 <code>vscode</code> 的配置文件自定义任何颜色，类型的注释。 具体的配置方法我给你们找好了。</p>',11),s={href:"https://link.juejin.cn/?target=https%3A%2F%2Fwww.cnblogs.com%2Fsuwanbin%2Fp%2F13263732.html",target:"_blank",rel:"noopener noreferrer"},l=i('<figure><img src="https://static.xlc520.tk/blogImage/bedb65b8da9a4dc6bfbd87cbc7a38a7d.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="bracket-pair-colorizer-bracket-pair-colorizer-2" tabindex="-1"><a class="header-anchor" href="#bracket-pair-colorizer-bracket-pair-colorizer-2" aria-hidden="true">#</a> Bracket Pair Colorizer / Bracket Pair Colorizer 2</h2><p>这是一个找对象的插件，不是帮你们找对象啊，是帮你找到括号的另一半。目前有两个版本，<code>Bracket Pair Colorizer 2</code> 是增强版，具体我没有深入研究具体增强了哪些内容。而且它有挺多的设置项，反正安装完默认的配置已经够用了，感兴趣的同学自行发觉更多有趣玩法吧。</p><figure><img src="https://static.xlc520.tk/blogImage/23d7197bd8a44efeaccc433741777367.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>大家可以看到配对的括号是相同的颜色，并且当我选中一个括号以后，会出现一条线帮你找到它对应的另一半括号。</p><figure><img src="https://static.xlc520.tk/blogImage/e99c17172ac749bb8eb367c528ef30e7.jpg" alt="33.gif" tabindex="0" loading="lazy"><figcaption>33.gif</figcaption></figure><h2 id="highlight-matching-tag" tabindex="-1"><a class="header-anchor" href="#highlight-matching-tag" aria-hidden="true">#</a> Highlight Matching Tag</h2><p>这也是一个找对象的插件，找的是标签的对象，看我上一个插件的演示图片中，当我点击一下 <code>html</code> 标签，配对的标签就会出现下划线来指示你谁和谁是一对。</p><figure><img src="https://static.xlc520.tk/blogImage/1c532cc1810948e4b8e94cfcbe4dd1f1.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="chinese" tabindex="-1"><a class="header-anchor" href="#chinese" aria-hidden="true">#</a> Chinese</h2><p>让你的 <code>vscode</code> 变成中文，像我这种英语弱鸡才会用，大佬们略过。为什么要放在优化外观的分类里，因为我觉得中文比英文好看🧐🧐，安装完重启就行了。</p><figure><img src="https://static.xlc520.tk/blogImage/f3467a34bb3845e08683c84cb29a45a0.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="color-highlight" tabindex="-1"><a class="header-anchor" href="#color-highlight" aria-hidden="true">#</a> Color Highlight</h2><figure><img src="https://static.xlc520.tk/blogImage/1eb327c8dea340b6b7888439f2314766.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>看名字就知道了，用于给我们代码中的颜色进行高亮展示的插件。可以看到下图中我设置的 <code>css</code> 颜色属性，直观的展示了出来。</p><figure><img src="https://static.xlc520.tk/blogImage/da5b9509149643d19e95d0ebea9a71a1.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="community-material-theme-material-theme" tabindex="-1"><a class="header-anchor" href="#community-material-theme-material-theme" aria-hidden="true">#</a> Community Material Theme / Material Theme</h2><figure><img src="https://static.xlc520.tk/blogImage/e1718e04f3254d4b94c5381424f457c6.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>修改编辑器的主题，内置很多种，我用的是 <code>Material Theme Palenight High Contrast</code> 这一款。安装完了以后点击 <strong>设置颜色主题</strong> 就可以了。</p><h2 id="material-theme-icons" tabindex="-1"><a class="header-anchor" href="#material-theme-icons" aria-hidden="true">#</a> Material Theme Icons</h2><figure><img src="https://static.xlc520.tk/blogImage/302e02cda07249d8bd44d115640e1e5a.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>设置文件图标的，这个插件的长这个样子，还有很多其它修改文件图标的插件，不喜欢这一款的，大家可以自行找一找。</p><figure><img src="https://static.xlc520.tk/blogImage/ecef44f36f3e483da18c8e4a790e2b7c.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="error-gutters" tabindex="-1"><a class="header-anchor" href="#error-gutters" aria-hidden="true">#</a> Error Gutters</h2><figure><img src="https://static.xlc520.tk/blogImage/24beb253e8d9420da7b2cf09138432d1.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>报错的地方都有大红波浪线提示，可以说是非常的直观了。</p><figure><img src="https://static.xlc520.tk/blogImage/973041a772a64e51839b5d1d96b9c6f8.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="image-preview" tabindex="-1"><a class="header-anchor" href="#image-preview" aria-hidden="true">#</a> Image preview</h2><figure><img src="https://static.xlc520.tk/blogImage/8a2f33048d8246e68d0bd227c0a445ba.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>预览代码中图片的引用，鼠标移上去就会有小窗展示图片。</p><figure><img src="https://static.xlc520.tk/blogImage/965445fd42494131b6385e305a2dd88e.jpg" alt="20210603225907507.gif" tabindex="0" loading="lazy"><figcaption>20210603225907507.gif</figcaption></figure><h2 id="indent-rainbow" tabindex="-1"><a class="header-anchor" href="#indent-rainbow" aria-hidden="true">#</a> indent-rainbow</h2><figure><img src="https://static.xlc520.tk/blogImage/b97d9779b05644089c9b152cbb18bff8.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>看名字就知道了，彩虹缩进，就是把代码不同的缩进展示不同的颜色。</p><figure><img src="https://static.xlc520.tk/blogImage/89f97650dd6845e38b2295c497d433e5.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="indenticator" tabindex="-1"><a class="header-anchor" href="#indenticator" aria-hidden="true">#</a> Indenticator</h2><figure><img src="https://static.xlc520.tk/blogImage/a07a03c5a0764b6f8de38a5e7d9ee14c.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>当你点击一个缩进部分的时候，会出现一条白线来告诉你当前处于的缩进层级，可以更方便的查看代码结构。</p><figure><img src="https://static.xlc520.tk/blogImage/fd6668febcb748cc8933183c6d14a8f7.jpg" alt="20180508105328382.gif" tabindex="0" loading="lazy"><figcaption>20180508105328382.gif</figcaption></figure><h2 id="trailing-spaces" tabindex="-1"><a class="header-anchor" href="#trailing-spaces" aria-hidden="true">#</a> Trailing Spaces</h2><figure><img src="https://static.xlc520.tk/blogImage/89821584ebb34fbd9700c414d9368767.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>把尾随空格显示出来。</p><figure><img src="https://static.xlc520.tk/blogImage/e33b2abedec746f785199f5ab430a1ed.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="vscode-great-icons" tabindex="-1"><a class="header-anchor" href="#vscode-great-icons" aria-hidden="true">#</a> VSCode Great Icons</h2><figure><img src="https://static.xlc520.tk/blogImage/8b56f035f3ff45b3ac38d79b16b8640f.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>另一个修改文件图标的插件，我用的就是这个，相对于 <code>Material Theme Icons</code> 我更喜欢这个的风格，萝卜青菜可有所爱，大家各取所需。</p><figure><img src="https://static.xlc520.tk/blogImage/cd5d6327b2134752b41398bd3fe25093.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h1 id="功能扩展" tabindex="-1"><a class="header-anchor" href="#功能扩展" aria-hidden="true">#</a> 功能扩展</h1><p>编辑器自身的功能还是有限的，为了应付日常开发，不得不安装很多其他的软件进行辅助，不过也可以通过插件的方式引入一些常用的辅助软件，它们的功能可能没有原生的强大，但是基本上已经够用，并且是真的很方便。</p><h2 id="az-al-dev-tools-al-code-outline" tabindex="-1"><a class="header-anchor" href="#az-al-dev-tools-al-code-outline" aria-hidden="true">#</a> AZ AL Dev Tools/AL Code Outline</h2><p>用来梳理代码结构的插件，安装完后在文件图标里就会多出一个 <code>AL OUTLINE</code> 的选项。</p><figure><img src="https://static.xlc520.tk/blogImage/96fd9d95f3794ef580966c99296f44b3.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>为了演示我找了一个比较长，比较典型的 <code>vue</code> 文件，请忽略我的代码内容，专注于插件的功能🤣🤣， 可以看到展开第一层是极具 <code>vue</code> 单文件组件特点的 <code>template</code>，<code>script</code>，<code>style</code>。逐层展开就可以看到 <code>dom</code> 节点， <code>methods</code> 里面定义的函数等，然后点击就可以快速定位到目标所在位置，妈妈再也不用担心我全局搜啦！</p><figure><img src="https://static.xlc520.tk/blogImage/8640c0c2a43c41218a74afba51e29bfb.jpg" alt="12.gif" tabindex="0" loading="lazy"><figcaption>12.gif</figcaption></figure><p>注：它这个里面好像是默认展开的，应该是可以设置是否默认展开，但我没研究过，感兴趣的大佬可以深入调查一下。</p><h2 id="code-runner" tabindex="-1"><a class="header-anchor" href="#code-runner" aria-hidden="true">#</a> Code Runner</h2><p>运行代码，可以在编辑器中查看结果，前端同学可以在控制台看 <code>console.log</code> ，还有很多其他玩法，具体使用参考此篇文章</p><p>👉👉 VSCode插件推荐 | Code Runner: 代码一键运行，支持超过40种语言</p><figure><img src="https://static.xlc520.tk/blogImage/55906fc48cdc4d7d8b3939e3fecc20bb.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="codeif" tabindex="-1"><a class="header-anchor" href="#codeif" aria-hidden="true">#</a> CodeIf</h2><figure><img src="https://static.xlc520.tk/blogImage/6cff11f551bb4547ad97510d24a8dc76.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>在网上看到一句话，<strong>在计算机科学中只有两件难事:缓存失效和命名</strong>。哈哈哈，确实如此，当开发项目时，命名一直都是一种让人痛苦的事情。</p><p>但是命名又是开发过程中一项非常重要的事情，一个好的函数命名，能够让你瞬间明白它实现的功能，所以，每当开发过程中遇到要命名的变量、函数、类时就要冥思苦想，各种翻译。</p><p>但是，<code>CodeIf</code> 的出现让这个问题迎刃而解，它通过搜索 <code>GitHub</code>, <code>Bitbucket</code>, <code>GitLab</code> 来找到真实的使用变量名，为你提供一些高频使用的词汇。</p><p>使用时只需要选中变量名，然后 <strong>右键</strong> 选择 <code>CodeIf</code> 就可以跳转到网页，显示候选命名。</p><figure><img src="https://static.xlc520.tk/blogImage/786fcc9aa61740b5b112cadc55901fac.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="color-info" tabindex="-1"><a class="header-anchor" href="#color-info" aria-hidden="true">#</a> Color Info</h2><figure><img src="https://static.xlc520.tk/blogImage/d735fa7441ba41918ac87515eb1b889f.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>查看颜色详细信息的插件，可以小窗口显示颜色值，rgb,hsl,cmyk,hex等等，可以在配置项里添加要展示的信息类型。</p><figure><img src="https://static.xlc520.tk/blogImage/5fcf52fdf4d743438ce04dd3abf335bc.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="code-spell-checker" tabindex="-1"><a class="header-anchor" href="#code-spell-checker" aria-hidden="true">#</a> Code Spell Checker</h2><figure><img src="https://static.xlc520.tk/blogImage/859f54333d5045d8a2b9ddf7e8c153c0.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>检查代码中单词拼写是否正确，当单词不正常的时候，就会在下方出现波浪线进行提示，还可以自定义词典，忽略某个单词的检查等，更多用法参考下面链接。</p><p>👉👉 VSCode中插件Code Spell Checker</p><figure><img src="https://static.xlc520.tk/blogImage/f88a2af524fc4e19967ac6c4625ca171.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="debugger-for-chrome" tabindex="-1"><a class="header-anchor" href="#debugger-for-chrome" aria-hidden="true">#</a> Debugger for Chrome</h2><p>这款插件是专门为前端调试开发的，很方便调试，跟谷歌的控制台是一样的功能，安装以后，无需打开浏览器的控制台就能进行断点调试。对应的还有 <code>Debugger for Firefox</code>，<code>Debugger for Microsoft Edge</code>等，其他的我没用过，大家按需安装即可，使用方法应该都大同小异。</p><figure><img src="https://static.xlc520.tk/blogImage/9137ba93ccd74013947fc53b610ac733.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>安装完以后，左边会出现一个调试的小图标，打开以后再点击上方小齿轮进行配置。根目录下会自动新建 <code>.vscode</code> 文件夹以及 <code>launch.json</code> 文件，不用管。</p><figure><img src="https://static.xlc520.tk/blogImage/6d50ae57a7da483faddef771b11843e7.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>配置文件的具体内容和使用方法可以看这一篇，很详细。</p><p>👉👉 VSCode配置 Debugger for Chrome插件</p><h2 id="git-history" tabindex="-1"><a class="header-anchor" href="#git-history" aria-hidden="true">#</a> Git History</h2><figure><img src="https://static.xlc520.tk/blogImage/3c7f8846e48243b097e9c02ab5bd3af7.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>右键单击文件选择 <code>Git：View File History</code> 来以列表的形式查看所有的提交记录。</p><figure><img src="https://static.xlc520.tk/blogImage/e4ee5df43e1c402fa28c8b65fa3c3d2d.jpg" alt="2.gif" tabindex="0" loading="lazy"><figcaption>2.gif</figcaption></figure><h2 id="gitlens-—-git-supercharged" tabindex="-1"><a class="header-anchor" href="#gitlens-—-git-supercharged" aria-hidden="true">#</a> GitLens — Git supercharged</h2><p>这个也是跟 <code>git</code> 相关的插件，功能比上一个要强大一些。上一个插件的演示图片中可以看到我的每一行代码都有上一次 <code>git</code> 提交的记录，那就是这个插件的功劳。</p><p>还有其他很多的操作，详情查阅下方链接。</p>',89),f={href:"https://link.juejin.cn/?target=https%3A%2F%2Fwww.jianshu.com%2Fp%2Fa91cb8a2e55d",target:"_blank",rel:"noopener noreferrer"},h=i('<figure><img src="https://static.xlc520.tk/blogImage/555a1cf5377a4e6780a33bae9bf68fc0.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="leetcode" tabindex="-1"><a class="header-anchor" href="#leetcode" aria-hidden="true">#</a> LeetCode</h2><p>可以在 <code>vscode</code> 中刷算法题的。我自己没用过😣😣</p><figure><img src="https://static.xlc520.tk/blogImage/049f861a63ab49129b3ad67a42dcb427.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="local-history" tabindex="-1"><a class="header-anchor" href="#local-history" aria-hidden="true">#</a> Local History</h2><figure><img src="https://static.xlc520.tk/blogImage/8e1f22640a8d4c7c8b90815974ffda82.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>这个就很强了，本地代码的修改记录。通常我们写错代码了可以撤销，但是撤销完以后再修改，想要取消撤销就难了。 有了这个插件直接看代码的修改记录。还可以跟当前版本进行对比，神器。</p><p>安装完以后，项目根目录下会自动生成 <code>.history</code> 的文件夹。代码的修改记录就会放在这里面。记得添加<code>.gitignore</code>，不然每次提交代码的时候就要遭重了。</p><figure><img src="https://static.xlc520.tk/blogImage/74e483fa0e584c829fb025a83f543c7e.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="open-in-browser" tabindex="-1"><a class="header-anchor" href="#open-in-browser" aria-hidden="true">#</a> open in browser</h2><p>在浏览器中打开 <code>html</code> 文件。</p><figure><img src="https://static.xlc520.tk/blogImage/15a5a6a15efb4fd9b639f1cdb542bf8a.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>安装完以后在目标的 <code>html</code> 文件上右击，选择 <code>open in default browser</code> 即可打开使用浏览器打开文件。</p><figure><img src="https://static.xlc520.tk/blogImage/eae4d8633b6541289ea04152ec8933b3.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="partial-diff" tabindex="-1"><a class="header-anchor" href="#partial-diff" aria-hidden="true">#</a> Partial Diff</h2><figure><img src="https://static.xlc520.tk/blogImage/1cba70a7f5e249bf88c9fe5d182af588.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>文件比较界的大拿肯定是 <code>Beyond Compare</code> 了，但是它是收费的！那么 <code>Partial Diff</code> 这款神奇的插件就成为了良好的替代品，选中一代码，右键<code> Select Text for Compare</code> ，选中另外一部分代码，右键<code>Compare Text with Previous Selection</code>即可。我的是中文的，就更明显了🤣🤣</p><figure><img src="https://static.xlc520.tk/blogImage/0909cd037c894052abfdfd51878eb461.jpg" alt="45.gif" tabindex="0" loading="lazy"><figcaption>45.gif</figcaption></figure><h2 id="postcode" tabindex="-1"><a class="header-anchor" href="#postcode" aria-hidden="true">#</a> Postcode</h2><p><code>Postman</code> 都听说过吧，这个插件就基本上可以理解为，在 <code>vscode</code> 里面使用 <code>postman</code> 。</p><figure><img src="https://static.xlc520.tk/blogImage/fa7ad4637891473a90e001620e1f5f5b.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>安装完以后左侧菜单会出现一个 <strong>小盒子</strong> 的图标，点开以后点击 <code>Create Request</code> 就可以正常使用了。</p><figure><img src="https://static.xlc520.tk/blogImage/a50cf3efef7a4b74af9615a61cd031ed.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><figure><img src="https://static.xlc520.tk/blogImage/c1601db79545441393e6bcfbbaebdb94.jpg" alt="120920378-0c83c880-c6dc-11eb-814a-e667563eed95.gif" tabindex="0" loading="lazy"><figcaption>120920378-0c83c880-c6dc-11eb-814a-e667563eed95.gif</figcaption></figure><h2 id="project-manager" tabindex="-1"><a class="header-anchor" href="#project-manager" aria-hidden="true">#</a> Project Manager</h2><figure><img src="https://static.xlc520.tk/blogImage/e47c75cb2798422fa02e2f6fa181f4da.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>项目管理器，适用于经常切换项目的大佬，虽然我平时接触的项目也不多，不过自己搞着玩的工程也不少。有了这个插件，就不用新窗口打开项目了。</p><p>安装完以后左侧列表会出现一个 <strong>文件夹</strong> 的小图标，点开以后就可以进行项目管理了，通常都是操作<code>projects.json</code> 这个文件，点击项目名字就可以切换了，也可以新窗口打开。</p><figure><img src="https://static.xlc520.tk/blogImage/f60ff11f07404742931de47f63e94b76.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="quokka-js" tabindex="-1"><a class="header-anchor" href="#quokka-js" aria-hidden="true">#</a> Quokka.js</h2><figure><img src="https://static.xlc520.tk/blogImage/a91b83a4645a45f9acd6d6c80df1898c.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>实时显示代码的运行结果，使用方法请跳转链接</p>',32),b={href:"https://link.juejin.cn/?target=http%3A%2F%2Fwww.duocaichajian.com%2Fplugin%2F43.html",target:"_blank",rel:"noopener noreferrer"},m=i('<figure><img src="https://static.xlc520.tk/blogImage/6544d46e54534e48aca2d0532ab2e94a.jpg" alt="vsc-intro.gif" tabindex="0" loading="lazy"><figcaption>vsc-intro.gif</figcaption></figure><h1 id="提升编码效率" tabindex="-1"><a class="header-anchor" href="#提升编码效率" aria-hidden="true">#</a> 提升编码效率</h1><p>如何达到极致的编码效率，当然是能不手写则不手写。下面这些插件就是辅助大家进行一些自动化，这样就可以节省下很多的时间用来摸鱼了。</p><h2 id="auto-import" tabindex="-1"><a class="header-anchor" href="#auto-import" aria-hidden="true">#</a> Auto Import</h2><p><code>Typescript</code> 自动导入，其实现在很多的插件基本都内置了这种功能，已经不是必须品了。可能是因为我装了各种奇奇怪怪的插件，我现在想导入什么东西的时候，一大堆的提示，随便选一个都能导进来😂</p><figure><img src="https://static.xlc520.tk/blogImage/5ff7742759fa4f2d81603ff4526e8e32.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="auto-rename-tag" tabindex="-1"><a class="header-anchor" href="#auto-rename-tag" aria-hidden="true">#</a> Auto Rename Tag</h2><p>自动修改标签名，重命名一个开始标签时，自动重命名配对的结束标签。</p><figure><img src="https://static.xlc520.tk/blogImage/327e483ced7d4f6cba1dc04b9f1c5e98.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>一下子就对应的全修改掉了，是不是很 <code>nice</code>。</p><figure><img src="https://static.xlc520.tk/blogImage/7e310c13e685440f81c4267210acc8f3.jpg" alt="1.gif" tabindex="0" loading="lazy"><figcaption>1.gif</figcaption></figure><h2 id="change-case" tabindex="-1"><a class="header-anchor" href="#change-case" aria-hidden="true">#</a> change-case</h2><figure><img src="https://static.xlc520.tk/blogImage/b1ee314635a64f85be71d765ae8cd8b8.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>快速切换变量格式，什么大坨峰，小驼峰，下划线等等，它里面有很多类型。使用方法按 <code>F1（windows）</code> ，输入对应命令即可。</p><figure><img src="https://static.xlc520.tk/blogImage/a10e7c728fc6483c811340aaa9e78396.jpg" alt="44.gif" tabindex="0" loading="lazy"><figcaption>44.gif</figcaption></figure><h2 id="css-peek" tabindex="-1"><a class="header-anchor" href="#css-peek" aria-hidden="true">#</a> CSS Peek</h2><p>可以通过点击类名迅速定位到样式的定义。不知道是不是我自己的原因，有的时候会失效，需要点击 <strong>禁用</strong> ，再点击 <strong>启用</strong> 就好使了。具体使用方法参考链接</p>',17),u={href:"https://link.juejin.cn/?target=https%3A%2F%2Fcloud.tencent.com%2Fdeveloper%2Fnews%2F424186",target:"_blank",rel:"noopener noreferrer"},x=i(`<figure><img src="https://static.xlc520.tk/blogImage/37758d06d88949b59ac3e3b5f82700f0.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="ecmascript-quotes-transformer" tabindex="-1"><a class="header-anchor" href="#ecmascript-quotes-transformer" aria-hidden="true">#</a> ECMAScript Quotes Transformer</h2><p>用于 <strong>模板字符串</strong> 和 <strong>普通字符串拼接</strong> 的相互转化，但其实我日常开发基本上都是统一使用模板字符串的，很少有这种互相转化的需求。</p><figure><img src="https://static.xlc520.tk/blogImage/c611b1aedcd74a8eb061acfbf715762e.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>用法也是非常简单，选中需要转化的行，按 <code>f1</code> 输入命令即可，一般输入 <code>esq</code> 就出现提示了。</p><figure><img src="https://static.xlc520.tk/blogImage/614c3ed80075493591b45e42bfea472e.jpg" alt="1.gif" tabindex="0" loading="lazy"><figcaption>1.gif</figcaption></figure><h2 id="embrace" tabindex="-1"><a class="header-anchor" href="#embrace" aria-hidden="true">#</a> embrace</h2><p>快速的在选中代码两边添加各种引号、括号，不用来回移动光标，不过好像现在市面上的编辑器大多都内置这功能了吧🤨🤨</p><figure><img src="https://static.xlc520.tk/blogImage/d1d7aef3a33548a78f6ea5f5a3dfc800.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="file-utils" tabindex="-1"><a class="header-anchor" href="#file-utils" aria-hidden="true">#</a> File Utils</h2><figure><img src="https://static.xlc520.tk/blogImage/d67881fd6e5c4296ba2f7c2a4a11e66a.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>创建，复制，移动，重命名，删除文件和目录的便捷方法，演示图片来自官网。</p><figure><img src="https://static.xlc520.tk/blogImage/affeab1477024a2d95cea01f00b1f1cd.jpg" alt="demo.gif" tabindex="0" loading="lazy"><figcaption>demo.gif</figcaption></figure><h2 id="javascript-console-utils" tabindex="-1"><a class="header-anchor" href="#javascript-console-utils" aria-hidden="true">#</a> javascript console utils</h2><figure><img src="https://static.xlc520.tk/blogImage/0e26d0afd5c34c20a5cc7e74b72e4b21.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>前端人员的调试少不了 <code>console.log</code> ，那么这就是一款快速生成 <code>console.log</code> 的插件。使用方法非常简单， 选中变量，然后按 <code>ctrl + shift + L</code> 就可以生成了。需要删除的时候按 <code>ctrl + shift + D</code> 即可删除。</p><figure><img src="https://static.xlc520.tk/blogImage/96ce2210bf7140368049e348733d6ab6.jpg" alt="4.gif" tabindex="0" loading="lazy"><figcaption>4.gif</figcaption></figure><h2 id="json2ts" tabindex="-1"><a class="header-anchor" href="#json2ts" aria-hidden="true">#</a> json2ts</h2><figure><img src="https://static.xlc520.tk/blogImage/ba615eb4e6064f9e945dd0f3783b4618.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>自动把 <code>json</code> 格式转成 <code>ts</code> 的类型，复制 <code>json</code> 之后按 <code>ctrl + alt + v</code> 即可。</p><figure><img src="https://static.xlc520.tk/blogImage/00250de6c221498288c36c070f48ef7d.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="korofileheader" tabindex="-1"><a class="header-anchor" href="#korofileheader" aria-hidden="true">#</a> koroFileHeader</h2><figure><img src="https://static.xlc520.tk/blogImage/b6e08a6f3b614244b70bd97dd6e52900.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>自动添加 <strong>头部注释</strong> 和 <strong>函数注释</strong> 的插件。支持自定义内容，需要在 <code>settings.json</code> 中进行自定义配置。</p><figure><img src="https://static.xlc520.tk/blogImage/6a36853971284c1a9a7e0d27eedb63f2.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token comment">//自动生成注释插件  文件头部注释</span>
  <span class="token string-property property">&quot;fileheader.customMade&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;Author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;一尾流莺&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;Description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;Date&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Do not edit&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;LastEditTime&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Do not edit&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;FilePath&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">//自动生成注释插件  函数注释</span>
  <span class="token string-property property">&quot;fileheader.cursorMode&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;param&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;return&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mithril-emmet" tabindex="-1"><a class="header-anchor" href="#mithril-emmet" aria-hidden="true">#</a> Mithril Emmet</h2><p>快速生成代码结构，不过好像新版本 <code>vscode</code> 已经内置了。</p><figure><img src="https://static.xlc520.tk/blogImage/4ff310b1ce674d74a0f050807710f63f.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="path-intellisense" tabindex="-1"><a class="header-anchor" href="#path-intellisense" aria-hidden="true">#</a> Path Intellisense</h2><figure><img src="https://static.xlc520.tk/blogImage/2f51f75bdce748689a476624928bcd5f.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>引入文件的时候，路径自动补全。</p><figure><img src="https://static.xlc520.tk/blogImage/97cd956a9fcd4fbb90ccb9cec6df3cf6.jpg" alt="3333333333.gif" tabindex="0" loading="lazy"><figcaption>3333333333.gif</figcaption></figure><h2 id="npm-intellisense" tabindex="-1"><a class="header-anchor" href="#npm-intellisense" aria-hidden="true">#</a> Npm Intellisense</h2><figure><img src="https://static.xlc520.tk/blogImage/c7115d02a0ab493b8028981dc676868a.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>导入 <code>npm</code> 包的时候，智能提示。</p><figure><img src="https://static.xlc520.tk/blogImage/f26e74a7a8fd461ebece7f5fa9cff7b1.jpg" alt="444.gif" tabindex="0" loading="lazy"><figcaption>444.gif</figcaption></figure><h2 id="px-to-rem-rpx-cssrem" tabindex="-1"><a class="header-anchor" href="#px-to-rem-rpx-cssrem" aria-hidden="true">#</a> px to rem &amp; rpx (cssrem)</h2><p>自动换算单位的插件。</p><figure><img src="https://static.xlc520.tk/blogImage/fcc899934cf14d86b5782674c7358027.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>很简单，出现提示以后回车即可。</p><figure><img src="https://static.xlc520.tk/blogImage/0014da831a7e4c6694d5ff3ccf95f657.jpg" alt="1.gif" tabindex="0" loading="lazy"><figcaption>1.gif</figcaption></figure><h2 id="turbo-console-log" tabindex="-1"><a class="header-anchor" href="#turbo-console-log" aria-hidden="true">#</a> Turbo Console Log</h2><figure><img src="https://static.xlc520.tk/blogImage/19d04537f19347378bff13e66b52b7ba.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>另一个用来生成 <code>console.log</code> 的插件，不同的是，他支持自定义 <code>console.log</code> 的内容，包括文件名，路径，大小等，还可以添加自己喜欢的 <code>emoji</code> 表情，快捷键 <code>ctrl + alt + L</code>。</p><figure><img src="https://static.xlc520.tk/blogImage/86c090e36dcd4c27a89a3430614f964b.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="代码片段类插件" tabindex="-1"><a class="header-anchor" href="#代码片段类插件" aria-hidden="true">#</a> 代码片段类插件</h2><p>这一类的插件都很多，但功能都是提供代码片段，作用就是使用几个字符的简写，就可以敲出整段代码。</p><figure><img src="https://static.xlc520.tk/blogImage/02cdccca5c1545509972b3f8cf682d28.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><ul><li><strong>JavaScript (ES6) code snippets</strong></li><li><strong>Jest Snippets</strong></li><li><strong>HTML Snippets</strong></li><li><strong>Vue VSCode Snippets</strong></li><li><strong>Vue 3 Snippets</strong></li><li><strong>... ...</strong></li></ul><figure><img src="https://static.xlc520.tk/blogImage/a23a2253c32a4c7895a323d06de44f4b.jpg" alt="3.gif" tabindex="0" loading="lazy"><figcaption>3.gif</figcaption></figure><h1 id="代码格式化" tabindex="-1"><a class="header-anchor" href="#代码格式化" aria-hidden="true">#</a> 代码格式化</h1><h2 id="beautify" tabindex="-1"><a class="header-anchor" href="#beautify" aria-hidden="true">#</a> Beautify</h2><p>用来代码格式化的，但是我好像安装了没怎么用，我一直都是 <code>eslint + prettier</code>，有正在用的小伙伴可以在评论区发表一下看法，感兴趣的请自己搜索使用方法。</p><figure><img src="https://static.xlc520.tk/blogImage/f62dd8d5a1224ca3a5aa40019050a487.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="eslint" tabindex="-1"><a class="header-anchor" href="#eslint" aria-hidden="true">#</a> ESLint</h2><p>这个就不用说了吧，代码检查，不符合规范的就会跟你报错，或者警告。具体的规范需要在根目录下新建 <code>.eslintrc.js</code> 文件去配置，也可以用很多大公司现有的规范，太复杂了就不细讲了，贴出教程链接。</p>`,57),k={href:"https://link.juejin.cn/?target=https%3A%2F%2Fwww.jianshu.com%2Fp%2Fad1e46faaea2",target:"_blank",rel:"noopener noreferrer"},j=i('<figure><img src="https://static.xlc520.tk/blogImage/1bf41fc809054b7d8827ef6587d7a7ea.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="prettier-code-formatter" tabindex="-1"><a class="header-anchor" href="#prettier-code-formatter" aria-hidden="true">#</a> Prettier - Code formatter</h2><p>代码格式化插件，这个插件通常搭配 <code>eslint</code> 使用，也可以单独使用。</p><figure><img src="https://static.xlc520.tk/blogImage/c6127a0655564917a884da5265753c66.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>在根目录下新建 <code>.prettierrc.json</code> 文件，在里面书写自己想要的格式就行了。更具体的配置内容查看链接</p><p>👉👉 # vscode 使用Prettier插件格式化配置使用</p><figure><img src="https://static.xlc520.tk/blogImage/dc1655149c624a9da511d737151e4253.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="vetur-volar" tabindex="-1"><a class="header-anchor" href="#vetur-volar" aria-hidden="true">#</a> vetur / volar</h2><figure><img src="https://static.xlc520.tk/blogImage/ab94d21cf6c540bb851fb3468d996b58.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><figure><img src="https://static.xlc520.tk/blogImage/6525229bbd904943af71de3b8900c7d7.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>使用 <code>vue</code> 进行开发的小伙伴都少不了跟它们打交道，<code>volar</code> 是跟 <code>vue3</code> 更配的，功能也能多，由于这两个插件功能过于庞大，就不展开讲了，感兴趣的自行搜索使用。</p><h1 id="其他好玩的插件" tabindex="-1"><a class="header-anchor" href="#其他好玩的插件" aria-hidden="true">#</a> 其他好玩的插件</h1><p>除了功能性插件，当然还有很多花里胡哨的玩意。下面给大家介绍几款可能对开发影响不大，但是非常好玩的插件。</p><h2 id="小霸王" tabindex="-1"><a class="header-anchor" href="#小霸王" aria-hidden="true">#</a> 小霸王</h2><p>还记得小时候玩的手柄游戏吗？大佬已经给我们出了插件了，不过我还是要友情提醒一句：游戏有风险，摸鱼需谨慎！</p><figure><img src="https://static.xlc520.tk/blogImage/c97425a812534bd8a8ed2561b5023230.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>操作非常简单，安装完左侧会出现游戏手柄图标，点击打开就可以下载游戏进行玩耍。</p><figure><img src="https://static.xlc520.tk/blogImage/8f7b86dab1b946418d3041ea77191ea2.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="emoji" tabindex="-1"><a class="header-anchor" href="#emoji" aria-hidden="true">#</a> Emoji</h2><figure><img src="https://static.xlc520.tk/blogImage/9c74a1a3b1e043559cbd7e0174d8c4e2.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>在代码中添加 <code>emoji</code> 表情，我自己除了写一些注释，<code>console.log</code> 之外，基本没有别的作用，但是挺好玩的，别人看你的代码中各种小表情，也会觉得你是一个可爱的人吧。</p><p>它的官方示例里面还可以把 <code>emoji</code> 设为变量名，我可不建议你们这样做。使用方法也是非常的简单，按 <code>f1（windows）</code> 输入 <code>emoji</code> ，可以看到有三个选项，分别是 <code>emoji</code> 表情，<code>markdown</code> 下的 <code>emoji</code>，还有 <code>unicode</code> 下的 <code>emoji</code>。选中一个模式回车进入列表，再回车就可以输入到代码中了。</p><figure><img src="https://static.xlc520.tk/blogImage/eb1118a1c8b24f53b77f6a64c1d4763d.jpg" alt="2.gif" tabindex="0" loading="lazy"><figcaption>2.gif</figcaption></figure><h2 id="settings-sync" tabindex="-1"><a class="header-anchor" href="#settings-sync" aria-hidden="true">#</a> Settings Sync</h2><figure><img src="https://static.xlc520.tk/blogImage/be1a049a68e14a00bdb43990272d045c.jpg" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>可以同步 <code>vscode</code> 配置的插件，由于我没有换过电脑，所以还没亲测，但是网上用的人还是蛮多的。</p><h2 id="彩虹屁插件" tabindex="-1"><a class="header-anchor" href="#彩虹屁插件" aria-hidden="true">#</a> 彩虹屁插件</h2>',27);function y(I,z){const t=n("ExternalLinkIcon");return o(),r("div",null,[p,a("p",null,[e("👉👉 "),a("a",s,[e("vscode 插件-better comments-代码注释高亮"),g(t)])]),l,a("p",null,[e("👉👉 "),a("a",f,[e("VsCode中好用的git源代码管理插件GitLens"),g(t)])]),h,a("p",null,[e("👉👉"),a("a",b,[e(" VS Code插件之Quokka.js"),g(t)])]),m,a("p",null,[e("👉👉 "),a("a",u,[e("cssPeek插件大大提升你的开发效率"),g(t)])]),x,a("p",null,[e("👉👉"),a("a",k,[e("Eslint 超简单入门教程"),g(t)])]),j])}const q=c(d,[["render",y],["__file","六十多个vscode 插件.html.vue"]]);export{q as default};
