import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,b as n,d as s,e,a as t}from"./app-865676a6.js";const l={},u=t(`<h1 id="开发中报错异常解决" tabindex="-1"><a class="header-anchor" href="#开发中报错异常解决" aria-hidden="true">#</a> 开发中报错异常解决</h1><p>2022年2月6日 开始整理开发中遇到的问题</p><h2 id="vue打包部署-刷新404" tabindex="-1"><a class="header-anchor" href="#vue打包部署-刷新404" aria-hidden="true">#</a> vue打包部署 刷新404</h2><blockquote><p>2022年3月20日22:14:21</p></blockquote><p><code>vue hash</code>模式下，<code>URL</code>中存在<code>&#39;#&#39;</code>，用<code>&#39;history&#39;</code>模式就能解决这个问题。但是<code>history</code>模式会出现刷新页面后，页面出现404。解决的办法是用<code>nginx</code>配置一下。<br> 在<code>nginx</code>的配置文件中修改</p><p><strong>方法一：</strong></p><div class="language-awk line-numbers-mode" data-ext="awk"><pre class="language-awk"><code>location <span class="token operator">/</span><span class="token punctuation">{</span>
    root   <span class="token operator">/</span>data<span class="token operator">/</span>nginx<span class="token operator">/</span>html<span class="token punctuation">;</span>
    index  index.html index.htm<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">-</span>e <span class="token variable">$request_filename</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        rewrite <span class="token operator">^</span><span class="token regex">/(.*) /</span>index.html last<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方法二：</strong><br> vue.js官方教程里提到的</p>`,8),r={href:"https://router.vuejs.org/zh/guide/essentials/history-mode.html",target:"_blank",rel:"noopener noreferrer"},d=t(`<div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code>  <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
		<span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">server_name</span>  localhost</span><span class="token punctuation">;</span>
        
    	<span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>
            <span class="token directive"><span class="token keyword">root</span>   html</span><span class="token punctuation">;</span>
            <span class="token comment"># 第一种方法</span>
            <span class="token directive"><span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ /index.html</span><span class="token punctuation">;</span>
            <span class="token comment"># 第二种方法，需要指向下面的@router否则会出现vue的路由在nginx中刷新出现404</span>
            <span class="token comment">#try_files $uri $uri/ @router;</span>
            <span class="token directive"><span class="token keyword">index</span>  index.html index.htm</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">#对应上面的@router，主要原因是路由的路径资源并不是一个真实的路径，所以无法找到具体的文件</span>
        <span class="token comment">#因此需要rewrite到index.html中，然后交给路由在处理请求资源</span>
        <span class="token directive"><span class="token keyword">location</span> @router</span> <span class="token punctuation">{</span>
            <span class="token directive"><span class="token keyword">rewrite</span> ^.*$ /index.html last</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> 
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方案三</strong></p><p>去掉这行代码。url上会出现带有#的地址。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>mode: &#39;history&#39;,
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_1-spring-boot集成druid异常discard-long-time-none-received-connection" tabindex="-1"><a class="header-anchor" href="#_1-spring-boot集成druid异常discard-long-time-none-received-connection" aria-hidden="true">#</a> 1.Spring Boot集成Druid异常discard long time none received connection.</h2><blockquote><p>2022年2月6日15:54:03</p></blockquote><h3 id="spring-boot集成druid异常" tabindex="-1"><a class="header-anchor" href="#spring-boot集成druid异常" aria-hidden="true">#</a> Spring Boot集成Druid异常</h3><p>在Spring Boot集成Druid项目中，发现错误日志中频繁的出现如下错误信息：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>discard <span class="token keyword">long</span> time none received connection<span class="token punctuation">.</span> <span class="token punctuation">,</span> jdbcUrl <span class="token operator">:</span> jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token doc-comment comment">/******?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;useUnicode=true&amp;characterEncoding=UTF-8, version : 1.2.3, lastPacketReceivedIdleMillis : 172675
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>经过排查发现是Druid版本导致的异常，在1.2.2及以前版本并未出现如此异常。而在其以上版本均存在此问题，下面就来分析一下异常原因及解决方案。</p><h3 id="异常分析" tabindex="-1"><a class="header-anchor" href="#异常分析" aria-hidden="true">#</a> 异常分析</h3><p>首先上面的异常并不影响程序的正常运行，但作为程序员看到程序中不停的出现异常还是难以忍受的。所以还是要刨根问底的解决一下的。</p><p>跟踪堆栈信息会发现对应的异常是从com.alibaba.druid.pool.DruidAbstractDataSource#testConnectionInternal方法中抛出的，对应的代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>valid <span class="token operator">&amp;&amp;</span> isMySql<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// unexcepted branch</span>
    <span class="token keyword">long</span> lastPacketReceivedTimeMs <span class="token operator">=</span> <span class="token class-name">MySqlUtils</span><span class="token punctuation">.</span><span class="token function">getLastPacketReceivedTimeMs</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastPacketReceivedTimeMs <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> mysqlIdleMillis <span class="token operator">=</span> currentTimeMillis <span class="token operator">-</span> lastPacketReceivedTimeMs<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>lastPacketReceivedTimeMs <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token comment">//</span>
                <span class="token operator">&amp;&amp;</span> mysqlIdleMillis <span class="token operator">&gt;=</span> timeBetweenEvictionRunsMillis<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">discardConnection</span><span class="token punctuation">(</span>holder<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> errorMsg <span class="token operator">=</span> <span class="token string">&quot;discard long time none received connection. &quot;</span>
                    <span class="token operator">+</span> <span class="token string">&quot;, jdbcUrl : &quot;</span> <span class="token operator">+</span> jdbcUrl
                    <span class="token operator">+</span> <span class="token string">&quot;, jdbcUrl : &quot;</span> <span class="token operator">+</span> jdbcUrl
                    <span class="token operator">+</span> <span class="token string">&quot;, lastPacketReceivedIdleMillis : &quot;</span> <span class="token operator">+</span> mysqlIdleMillis<span class="token punctuation">;</span>
            <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>errorMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中，MySqlUtils.getLastPacketReceivedTimeMs(conn) 是获取上一次使用的时间，mysqlIdleMillis 就是计算出来空闲的时间，timeBetweenEvictionRunsMillis 是常量60秒。如果连接空闲了60秒以上，那就discardConnection(holder) 丢弃这个旧连接并顺带打印了一个日志LOG.warn(errorMsg)。</p><h3 id="原理追踪" tabindex="-1"><a class="header-anchor" href="#原理追踪" aria-hidden="true">#</a> 原理追踪</h3>`,16),k={href:"https://cloud.tencent.com/product/cdb?from=10680",target:"_blank",rel:"noopener noreferrer"},v={href:"https://cloud.tencent.com/solution/database?from=10680",target:"_blank",rel:"noopener noreferrer"},m=t(`<p>来看看valid的来源，还是在该方法的上面：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">boolean</span> valid <span class="token operator">=</span> validConnectionChecker<span class="token punctuation">.</span><span class="token function">isValidConnection</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> validationQuery<span class="token punctuation">,</span> validationQueryTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们找到validConnectionChecker的Mysql实现子类MySqlValidConnectionChecker，该类中对isValidConnection的实现如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValidConnection</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> conn<span class="token punctuation">,</span> <span class="token class-name">String</span> validateQuery<span class="token punctuation">,</span> <span class="token keyword">int</span> validationQueryTimeout<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>conn<span class="token punctuation">.</span><span class="token function">isClosed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>usePingMethod<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token keyword">instanceof</span> <span class="token class-name">DruidPooledConnection</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            conn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">DruidPooledConnection</span><span class="token punctuation">)</span> conn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token keyword">instanceof</span> <span class="token class-name">ConnectionProxy</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            conn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ConnectionProxy</span><span class="token punctuation">)</span> conn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRawObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>validationQueryTimeout <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                validationQueryTimeout <span class="token operator">=</span> <span class="token constant">DEFAULT_VALIDATION_QUERY_TIMEOUT</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                ping<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> validationQueryTimeout <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Throwable</span> cause <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>cause <span class="token keyword">instanceof</span> <span class="token class-name">SQLException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span><span class="token punctuation">)</span> cause<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">String</span> query <span class="token operator">=</span> validateQuery<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>validateQuery <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> validateQuery<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        query <span class="token operator">=</span> <span class="token constant">DEFAULT_VALIDATION_QUERY</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">Statement</span> stmt <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>validationQueryTimeout <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            stmt<span class="token punctuation">.</span><span class="token function">setQueryTimeout</span><span class="token punctuation">(</span>validationQueryTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        rs <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token class-name">JdbcUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">JdbcUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到上述方法中有三个返回的地方：第一个连接已关闭；第二个使用ping的形式进行检查；第三，使用select 1的方式进行检查。而使用ping的形式检查时，无论是否抛异常都会返回true。这里我们禁用该模式即可。</p><p>进入ping的业务逻辑主要靠变量usePingMethod来判断，追踪代码会发现在这里进行的设置：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configFromProperties</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> property <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;druid.mysql.usePingMethod&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;true&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setUsePingMethod</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;false&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setUsePingMethod</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么，也就是说，当我们把系统属性druid.mysql.usePingMethod设置为false即可禁用该功能。</p><h3 id="禁用ping-method" tabindex="-1"><a class="header-anchor" href="#禁用ping-method" aria-hidden="true">#</a> 禁用Ping Method</h3><p>找到了问题的根源，那么剩下的就是如何禁用了，通常有三种形式。</p><p>第一，在启动程序时在运行参数中增加：-Ddruid.mysql.usePingMethod=false。</p><p>第二，在Spring Boot项目中，可在启动类中添加如下静态代码快：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;druid.mysql.usePingMethod&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;false&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第三，类文件配置。在项目的DruidConfig类中新增加：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">/*
* 解决druid 日志报错：discard long time none received connection:xxx
* */</span>
<span class="token annotation punctuation">@PostConstruct</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;druid.mysql.usePingMethod&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;false&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，已可以成功关闭该功能，异常信息再也不会出现了。</p><h3 id="为什么要清空空闲60秒以上的连接" tabindex="-1"><a class="header-anchor" href="#为什么要清空空闲60秒以上的连接" aria-hidden="true">#</a> 为什么要清空空闲60秒以上的连接</h3><p>猜测，阿里给数据库设置的数据库空闲等待时间是60秒，mysql数据库到了空闲等待时间将关闭空闲的连接，以提升数据库服务器的处理能力。</p><p>MySQL的默认空闲等待时间是8小时，就是「wait_timeout」的配置值。如果数据库主动关闭了空闲的连接，而连接池并不知道，还在使用这个连接，就会产生异常。</p><h2 id="_2-数据库语句错误" tabindex="-1"><a class="header-anchor" href="#_2-数据库语句错误" aria-hidden="true">#</a> 2.数据库语句错误</h2><p>1.limit放在where后面</p><p>正确：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> <span class="token keyword">delete</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>错误：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span> <span class="token keyword">where</span> <span class="token keyword">delete</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,25);function b(g,h){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[n("a",r,[s("https://router.vuejs.org/zh/guide/essentials/history-mode.html"),e(a)])]),d,n("p",null,[s("在上述代码中，我们看到进入该业务逻辑是有前提条件的，也就是valid和isMySql变量同时为true。isMySql为true是必须的，我们使用的本身就是"),n("a",k,[s("Mysql"),e(a)]),n("a",v,[s("数据库"),e(a)]),s("。那么是否可以让valid为false呢？这样不就不会进入该业务处理了吗？")]),m])}const w=p(l,[["render",b],["__file","报错异常解决.html.vue"]]);export{w as default};
