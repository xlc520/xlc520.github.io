import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,b as n,d as s,e as t,a as p}from"./app-CXNU22eb.js";const i={},u=p(`<h1 id="springboot-接口数据加解密技巧" tabindex="-1"><a class="header-anchor" href="#springboot-接口数据加解密技巧"><span>SpringBoot 接口数据加解密技巧</span></a></h1><p>主要的需求点如下：</p><ol><li>尽量少改动，不影响之前的业务逻辑；</li><li>考虑到时间紧迫性，可采用对称性加密方式，服务需要对接安卓、IOS、H5 三端，另外考虑到 H5 端存储密钥安全性相对来说会低一些，故分针对 H5 和安卓、IOS 分配两套密钥；</li><li>要兼容低版本的接口，后面新开发的接口可不用兼容；</li><li>接口有 GET 和 POST 两种接口，需要都要进行加解密；</li></ol><p>需求解析：</p><ol><li>服务端、客户端和 H5 统一拦截加解密，网上有成熟方案，也可以按其他服务中实现的加解密流程来搞；</li><li>使用 AES 放松加密，考虑到 H5 端存储密钥安全性相对来说会低一些，故分针对 H5 和安卓、IOS 分配两套密钥；</li><li>本次涉及客户端和服务端的整体改造，经讨论，新接口统一加 /secret/ 前缀来区分</li></ol><p>按本次需求来简单还原问题，定义两个对象，后面用得着，</p><p>用户类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">UserType</span> userType <span class="token operator">=</span> <span class="token class-name">UserType</span><span class="token punctuation">.</span><span class="token constant">COMMON</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> registerTime<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户类型枚举类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Getter</span>
<span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>shape <span class="token operator">=</span> <span class="token class-name">JsonFormat<span class="token punctuation">.</span>Shape</span><span class="token punctuation">.</span><span class="token constant">OBJECT</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">UserType</span> <span class="token punctuation">{</span>
    <span class="token function">VIP</span><span class="token punctuation">(</span><span class="token string">&quot;VIP用户&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">COMMON</span><span class="token punctuation">(</span><span class="token string">&quot;普通用户&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> code<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> type<span class="token punctuation">;</span>

    <span class="token class-name">UserType</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构造一个简单的用户列表查询示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;/user&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/secret/user&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/list&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">listUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">User</span> u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        u<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        u<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;boyka&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        u<span class="token punctuation">.</span><span class="token function">setRegisterTime</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        u<span class="token punctuation">.</span><span class="token function">setUserType</span><span class="token punctuation">(</span><span class="token class-name">UserType</span><span class="token punctuation">.</span><span class="token constant">COMMON</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        response<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        response<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>
        response<span class="token punctuation">.</span><span class="token function">setMsg</span><span class="token punctuation">(</span><span class="token string">&quot;用户列表查询成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> response<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用：localhost:8080/user/list</p><p>查询结果如下，没毛病：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token punctuation">{</span>
 <span class="token string">&quot;code&quot;</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
 <span class="token string">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
  <span class="token string">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token string">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;boyka&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;userType&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
   <span class="token string">&quot;code&quot;</span><span class="token operator">:</span> <span class="token string">&quot;COMMON&quot;</span><span class="token punctuation">,</span>
   <span class="token string">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;普通用户&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string">&quot;registerTime&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2022-03-24 23:58:39&quot;</span>
 <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
 <span class="token string">&quot;msg&quot;</span><span class="token operator">:</span> <span class="token string">&quot;用户列表查询成功&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>目前主要是利用 ControllerAdvice 来对请求和响应体进行拦截，主要定义 SecretRequestAdvice 对请求进行加密和 SecretResponseAdvice 对响应进行加密(实际情况会稍微复杂一点，项目中又 GET 类型请求，自定义了一个 Filter 进行不同的请求解密处理)。</p><p>好了，网上的 ControllerAdvice 使用示例非常多，我这把两个核心方法给大家展示看看，相信大佬们一看就晓得了，不需多言。上代码：</p><p>SecretRequestAdvice 请求解密：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ControllerAdvice</span>
<span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token class-name">Ordered</span><span class="token punctuation">.</span><span class="token constant">HIGHEST_PRECEDENCE</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecretRequestAdvice</span> <span class="token keyword">extends</span> <span class="token class-name">RequestBodyAdviceAdapter</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> methodParameter<span class="token punctuation">,</span> <span class="token class-name">Type</span> type<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> aClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">HttpInputMessage</span> <span class="token function">beforeBodyRead</span><span class="token punctuation">(</span><span class="token class-name">HttpInputMessage</span> inputMessage<span class="token punctuation">,</span> <span class="token class-name">MethodParameter</span> parameter<span class="token punctuation">,</span> <span class="token class-name">Type</span> targetType<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> converterType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//如果支持加密消息，进行消息解密。</span>
        <span class="token class-name">String</span> httpBody<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">TRUE</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">SecretFilter</span><span class="token punctuation">.</span>secretThreadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            httpBody <span class="token operator">=</span> <span class="token function">decryptBody</span><span class="token punctuation">(</span>inputMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            httpBody <span class="token operator">=</span> <span class="token class-name">StreamUtils</span><span class="token punctuation">.</span><span class="token function">copyToString</span><span class="token punctuation">(</span>inputMessage<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//返回处理后的消息体给messageConvert</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SecretHttpMessage</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>httpBody<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> inputMessage<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 解密消息体
     *
     * <span class="token keyword">@param</span> <span class="token parameter">inputMessage</span> 消息体
     * <span class="token keyword">@return</span> 明文
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">decryptBody</span><span class="token punctuation">(</span><span class="token class-name">HttpInputMessage</span> inputMessage<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">InputStream</span> encryptStream <span class="token operator">=</span> inputMessage<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> requestBody <span class="token operator">=</span> <span class="token class-name">StreamUtils</span><span class="token punctuation">.</span><span class="token function">copyToString</span><span class="token punctuation">(</span>encryptStream<span class="token punctuation">,</span> <span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 验签过程</span>
        <span class="token class-name">HttpHeaders</span> headers <span class="token operator">=</span> inputMessage<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;clientType&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token operator">||</span> <span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;timestamp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token operator">||</span> <span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;salt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token operator">||</span> <span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;signature&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ResultException</span><span class="token punctuation">(</span><span class="token constant">SECRET_API_ERROR</span><span class="token punctuation">,</span> <span class="token string">&quot;请求解密参数错误，clientType、timestamp、salt、signature等参数传递是否正确传递&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">String</span> timestamp <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;timestamp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> salt <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;salt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> signature <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;signature&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> privateKey <span class="token operator">=</span> <span class="token class-name">SecretFilter</span><span class="token punctuation">.</span>clientPrivateKeyThreadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ReqSecret</span> reqSecret <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>requestBody<span class="token punctuation">,</span> <span class="token class-name">ReqSecret</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> data <span class="token operator">=</span> reqSecret<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> newSignature <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>privateKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            newSignature <span class="token operator">=</span> <span class="token class-name">Md5Utils</span><span class="token punctuation">.</span><span class="token function">genSignature</span><span class="token punctuation">(</span>timestamp <span class="token operator">+</span> salt <span class="token operator">+</span> data <span class="token operator">+</span> privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>newSignature<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>signature<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 验签失败</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ResultException</span><span class="token punctuation">(</span><span class="token constant">SECRET_API_ERROR</span><span class="token punctuation">,</span> <span class="token string">&quot;验签失败，请确认加密方式是否正确&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> decrypt <span class="token operator">=</span> <span class="token class-name">EncryptUtils</span><span class="token punctuation">.</span><span class="token function">aesDecrypt</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>decrypt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                decrypt <span class="token operator">=</span> <span class="token string">&quot;{}&quot;</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> decrypt<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;error: &quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ResultException</span><span class="token punctuation">(</span><span class="token constant">SECRET_API_ERROR</span><span class="token punctuation">,</span> <span class="token string">&quot;解密失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SecretResponseAdvice 响应加密：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ControllerAdvice</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecretResponseAdvice</span> <span class="token keyword">implements</span> <span class="token class-name">ResponseBodyAdvice</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">SecretResponseAdvice</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> methodParameter<span class="token punctuation">,</span> <span class="token class-name">Class</span> aClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">beforeBodyWrite</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token class-name">MethodParameter</span> methodParameter<span class="token punctuation">,</span> <span class="token class-name">MediaType</span> mediaType<span class="token punctuation">,</span> <span class="token class-name">Class</span> aClass<span class="token punctuation">,</span> <span class="token class-name">ServerHttpRequest</span> serverHttpRequest<span class="token punctuation">,</span> <span class="token class-name">ServerHttpResponse</span> serverHttpResponse<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 判断是否需要加密</span>
        <span class="token class-name">Boolean</span> respSecret <span class="token operator">=</span> <span class="token class-name">SecretFilter</span><span class="token punctuation">.</span>secretThreadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> secretKey <span class="token operator">=</span> <span class="token class-name">SecretFilter</span><span class="token punctuation">.</span>clientPrivateKeyThreadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 清理本地缓存</span>
        <span class="token class-name">SecretFilter</span><span class="token punctuation">.</span>secretThreadLocal<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SecretFilter</span><span class="token punctuation">.</span>clientPrivateKeyThreadLocal<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> respSecret <span class="token operator">&amp;&amp;</span> respSecret<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">ResponseBasic</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 外层加密级异常</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">SECRET_API_ERROR</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ResponseBasic</span><span class="token punctuation">)</span> o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token class-name">SecretResponseBasic</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ResponseBasic</span><span class="token punctuation">)</span> o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ResponseBasic</span><span class="token punctuation">)</span> o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ResponseBasic</span><span class="token punctuation">)</span> o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// 业务逻辑</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token class-name">String</span> data <span class="token operator">=</span> <span class="token class-name">EncryptUtils</span><span class="token punctuation">.</span><span class="token function">aesEncrypt</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">,</span> secretKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 增加签名</span>
                    <span class="token keyword">long</span> timestamp <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">;</span>
                    <span class="token keyword">int</span> salt <span class="token operator">=</span> <span class="token class-name">EncryptUtils</span><span class="token punctuation">.</span><span class="token function">genSalt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">String</span> dataNew <span class="token operator">=</span> timestamp <span class="token operator">+</span> <span class="token string">&quot;&quot;</span> <span class="token operator">+</span> salt <span class="token operator">+</span> <span class="token string">&quot;&quot;</span> <span class="token operator">+</span> data <span class="token operator">+</span> secretKey<span class="token punctuation">;</span>
                    <span class="token class-name">String</span> newSignature <span class="token operator">=</span> <span class="token class-name">Md5Utils</span><span class="token punctuation">.</span><span class="token function">genSignature</span><span class="token punctuation">(</span>dataNew<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> <span class="token class-name">SecretResponseBasic</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> timestamp<span class="token punctuation">,</span> salt<span class="token punctuation">,</span> newSignature<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;beforeBodyWrite error:&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> <span class="token class-name">SecretResponseBasic</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token constant">SECRET_API_ERROR</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;服务端处理结果数据异常&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> o<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>OK， 代码 Demo 撸好了，试运行一波：</p><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>请求方法：
localhost:8080/secret/user/list

header:
Content-Type:application/json
signature:55efb04a83ca083dd1e6003cde127c45
timestamp:1648308048
salt:123456
clientType:ANDORID

body体:
// 原始请求体
{
 &quot;page&quot;: 1,
 &quot;size&quot;: 10
}
// 加密后的请求体
{
 &quot;data&quot;: &quot;1ZBecdnDuMocxAiW9UtBrJzlvVbueP9K0MsIxQccmU3OPG92oRinVm0GxBwdlXXJ&quot;
}

// 加密响应体：
{
    &quot;data&quot;: &quot;fxHYvnIE54eAXDbErdrDryEsIYNvsOOkyEKYB1iBcre/QU1wMowHE2BNX/je6OP3NlsCtAeDqcp7J1N332el8q2FokixLvdxAPyW5Un9JiT0LQ3MB8p+nN23pTSIvh9VS92lCA8KULWg2nViSFL5X1VwKrF0K/dcVVZnpw5h227UywP6ezSHjHdA+Q0eKZFGTEv3IzNXWqq/otx5fl1gKQ==&quot;,
    &quot;code&quot;: 200,
    &quot;signature&quot;: &quot;aa61f19da0eb5d99f13c145a40a7746b&quot;,
    &quot;msg&quot;: &quot;&quot;,
    &quot;timestamp&quot;: 1648480034,
    &quot;salt&quot;: 632648
}

// 解密后的响应体：
{
 &quot;code&quot;: 200,
 &quot;data&quot;: [{
  &quot;id&quot;: 1,
  &quot;name&quot;: &quot;boyka&quot;,
  &quot;registerTime&quot;: &quot;2022-03-27T00:19:43.699&quot;,
  &quot;userType&quot;: &quot;COMMON&quot;
 }],
 &quot;msg&quot;: &quot;用户列表查询成功&quot;,
 &quot;salt&quot;: 0
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>OK，客户端请求加密-》发起请求-》服务端解密-》业务处理-》服务端响应加密-》客户端解密展示，看起来没啥问题，实际是头天下午花了 2 小时碰需求，差不多花 1 小时写好 demo 测试，然后对所有接口统一进行了处理，整体一下午赶脚应该行了吧，告诉 H5 和安卓端同学明儿上午联调（不小的大家到这个时候发现猫腻没有，当时确实疏忽了，翻了大车……）</p><p>次日，安卓端反馈，你这个加解密有问题，解密后的数据格式和之前不一样，仔细一看，擦，这个 userType 和 registerTime 是不对劲，开始思考：这个能是哪儿的问题呢？1s 之后，初步定位，应该是响应体的 JSON.toJSONString 的问题：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> data <span class="token operator">=</span> <span class="token class-name">EncryptUtils</span><span class="token punctuation">.</span><span class="token function">aesEncrypt</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Debug 断点调试，果然，是 JSON.toJSONString(o)这一步骤转换出了问题，那 JSON 转换时是不是有高级属性可以配置生成想要的序列化格式呢？FastJson 在序列化时提供重载方法，找到其中一个&quot;SerializerFeature&quot;参数可以琢磨一下，这个参数是可以对序列化进行配置的，它提供了很多配置类型，其中感觉这几个比较沾边：</p><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>WriteEnumUsingToString,
WriteEnumUsingName,
UseISO8601DateFormat
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对枚举类型来说，默认是使用的 WriteEnumUsingName(枚举的 Name)， 另一种 WriteEnumUsingToString 是重新 toString 方法，理论上可以转换成想要的样子，即这个样子：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Getter</span>
<span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>shape <span class="token operator">=</span> <span class="token class-name">JsonFormat<span class="token punctuation">.</span>Shape</span><span class="token punctuation">.</span><span class="token constant">OBJECT</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">UserType</span> <span class="token punctuation">{</span>
    <span class="token function">VIP</span><span class="token punctuation">(</span><span class="token string">&quot;VIP用户&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">COMMON</span><span class="token punctuation">(</span><span class="token string">&quot;普通用户&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> code<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> type<span class="token punctuation">;</span>

    <span class="token class-name">UserType</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;{&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;\\&quot;code\\&quot;:\\&quot;&quot;</span> <span class="token operator">+</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token char">&#39;\\&quot;&#39;</span> <span class="token operator">+</span>
                <span class="token string">&quot;, \\&quot;type\\&quot;:\\&quot;&quot;</span> <span class="token operator">+</span> type <span class="token operator">+</span> <span class="token char">&#39;\\&quot;&#39;</span> <span class="token operator">+</span>
                <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果转换出来的数据是字符串类型&quot;{&quot;code&quot;:&quot;COMMON&quot;, &quot;type&quot;:&quot;普通用户&quot;}&quot;，这个方法好像行不通，还有什么好办法呢？思前想后，看文章开始定义的 User 和 UserType 类，标记数据序列化格式@JsonFormat，再突然想起之前看到过的一些文章，SpringMVC 底层默认是使用 Jackson 进行序列化的，那好了，就用 Jacksong 实施呗，将 SecretResponseAdvice 中的序列化方法替换一下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token class-name">String</span> data <span class="token operator">=</span> <span class="token class-name">EncryptUtils</span><span class="token punctuation">.</span><span class="token function">aesEncrypt</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">,</span> secretKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
 换为：
 <span class="token class-name">String</span> data <span class="token operator">=</span><span class="token class-name">EncryptUtils</span><span class="token punctuation">.</span><span class="token function">aesEncrypt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">,</span> secretKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重新运行一波，走起：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
 <span class="token property">&quot;code&quot;</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
 <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
  <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;boyka&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;userType&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
   <span class="token property">&quot;code&quot;</span><span class="token operator">:</span> <span class="token string">&quot;COMMON&quot;</span><span class="token punctuation">,</span>
   <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;普通用户&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;registerTime&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
   <span class="token property">&quot;month&quot;</span><span class="token operator">:</span> <span class="token string">&quot;MARCH&quot;</span><span class="token punctuation">,</span>
   <span class="token property">&quot;year&quot;</span><span class="token operator">:</span> <span class="token number">2022</span><span class="token punctuation">,</span>
   <span class="token property">&quot;dayOfMonth&quot;</span><span class="token operator">:</span> <span class="token number">29</span><span class="token punctuation">,</span>
   <span class="token property">&quot;dayOfWeek&quot;</span><span class="token operator">:</span> <span class="token string">&quot;TUESDAY&quot;</span><span class="token punctuation">,</span>
   <span class="token property">&quot;dayOfYear&quot;</span><span class="token operator">:</span> <span class="token number">88</span><span class="token punctuation">,</span>
   <span class="token property">&quot;monthValue&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
   <span class="token property">&quot;hour&quot;</span><span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span>
   <span class="token property">&quot;minute&quot;</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
   <span class="token property">&quot;nano&quot;</span><span class="token operator">:</span> <span class="token number">453000000</span><span class="token punctuation">,</span>
   <span class="token property">&quot;second&quot;</span><span class="token operator">:</span> <span class="token number">36</span><span class="token punctuation">,</span>
   <span class="token property">&quot;chronology&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ISO&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;calendarType&quot;</span><span class="token operator">:</span> <span class="token string">&quot;iso8601&quot;</span>
   <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
 <span class="token property">&quot;msg&quot;</span><span class="token operator">:</span> <span class="token string">&quot;用户列表查询成功&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,34),k={href:"https://link.juejin.cn/?target=https%3A%2F%2Fwww.cnblogs.com%2Fyzeng%2Fp%2F11522411.html",target:"_blank",rel:"noopener noreferrer"},r=p(`<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token constant">DATE_TIME_FORMATTER</span> <span class="token operator">=</span> <span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2ObjectMapperBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                            <span class="token punctuation">.</span><span class="token function">findModulesViaServiceLoader</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
                            <span class="token punctuation">.</span><span class="token function">serializerByType</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LocalDateTimeSerializer</span><span class="token punctuation">(</span>
                                    <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token constant">DATE_TIME_FORMATTER</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                            <span class="token punctuation">.</span><span class="token function">deserializerByType</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LocalDateTimeDeserializer</span><span class="token punctuation">(</span>
                                    <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token constant">DATE_TIME_FORMATTER</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>转换结果：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
 <span class="token property">&quot;code&quot;</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
 <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
  <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;boyka&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;userType&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
   <span class="token property">&quot;code&quot;</span><span class="token operator">:</span> <span class="token string">&quot;COMMON&quot;</span><span class="token punctuation">,</span>
   <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;普通用户&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;registerTime&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2022-03-29 22:57:33&quot;</span>
 <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
 <span class="token property">&quot;msg&quot;</span><span class="token operator">:</span> <span class="token string">&quot;用户列表查询成功&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>OK，和非加密版的终于一致了，完了吗？感觉还是可能存在些什么问题，首先业务代码的时间序列化需求不一样，有&quot;yyyy-MM-dd hh:mm:ss&quot; 的，也有&quot;yyyy-MM-dd&quot;的，还可能其他配置思考不到位的，导致和之前非加密版返回数据不一致的问题，到时候联调测出来了也麻烦，有没有一劳永逸的办法呢？同事一句话点亮我，看一下 spring 框架自身是怎么序列化的，照着配置应该就行嘛，好像有点道理，不从 0 开始分析源码了</p><p>感觉写可以。</p><p>跟着执行链路，找到具体的响应序列化，重点就是 RequestResponseBodyMethodProcessor，</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">writeWithMessageConverters</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">T</span> value<span class="token punctuation">,</span> <span class="token class-name">MethodParameter</span> returnType<span class="token punctuation">,</span> <span class="token class-name">ServletServerHttpRequest</span> inputMessage<span class="token punctuation">,</span> <span class="token class-name">ServletServerHttpResponse</span> outputMessage<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">HttpMediaTypeNotAcceptableException</span><span class="token punctuation">,</span> <span class="token class-name">HttpMessageNotWritableException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取响应的拦截器链并执行beforeBodyWrite方法，也就是执行了我们自定义的SecretResponseAdvice中的beforeBodyWrite啦</span>
  body <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">beforeBodyWrite</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> returnType<span class="token punctuation">,</span> selectedMediaType<span class="token punctuation">,</span> converter<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> inputMessage<span class="token punctuation">,</span> outputMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>body <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 执行响应体序列化工作</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>genericConverter <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    genericConverter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Type</span><span class="token punctuation">)</span>targetType<span class="token punctuation">,</span> selectedMediaType<span class="token punctuation">,</span> outputMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    converter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> selectedMediaType<span class="token punctuation">,</span> outputMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进而通过实例化的 AbstractJackson2HttpMessageConverter 对象找到执行序列化的核心方法</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token operator">-&gt;</span> <span class="token class-name">AbstractGenericHttpMessageConverter</span><span class="token operator">:</span>
 
 <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Type</span> type<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">MediaType</span> contentType<span class="token punctuation">,</span> <span class="token class-name">HttpOutputMessage</span> outputMessage<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">HttpMessageNotWritableException</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">writeInternal</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> type<span class="token punctuation">,</span> outputMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
  outputMessage<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     
    <span class="token punctuation">}</span>
 <span class="token operator">-&gt;</span> 找到<span class="token class-name">Jackson</span>序列化 <span class="token class-name">AbstractJackson2HttpMessageConverter</span><span class="token operator">:</span>
 <span class="token comment">// 从spring容器中获取并设置的ObjectMapper实例</span>
 <span class="token keyword">protected</span> <span class="token class-name">ObjectMapper</span> objectMapper<span class="token punctuation">;</span>
 
 <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">writeInternal</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Type</span> type<span class="token punctuation">,</span> <span class="token class-name">HttpOutputMessage</span> outputMessage<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">HttpMessageNotWritableException</span> <span class="token punctuation">{</span>
        <span class="token class-name">MediaType</span> contentType <span class="token operator">=</span> outputMessage<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">JsonEncoding</span> encoding <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getJsonEncoding</span><span class="token punctuation">(</span>contentType<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">JsonGenerator</span> generator <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>objectMapper<span class="token punctuation">.</span><span class="token function">getFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createGenerator</span><span class="token punctuation">(</span>outputMessage<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">writePrefix</span><span class="token punctuation">(</span>generator<span class="token punctuation">,</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Object</span> value <span class="token operator">=</span> object<span class="token punctuation">;</span>
  <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> serializationView <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token class-name">FilterProvider</span> filters <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token class-name">JavaType</span> javaType <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token class-name">MappingJacksonValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token class-name">MappingJacksonValue</span> container <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MappingJacksonValue</span><span class="token punctuation">)</span>object<span class="token punctuation">;</span>
   value <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   serializationView <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">getSerializationView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   filters <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">getFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">TypeUtils</span><span class="token punctuation">.</span><span class="token function">isAssignable</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> value<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   javaType <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getJavaType</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token class-name">ObjectWriter</span> objectWriter <span class="token operator">=</span> serializationView <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>objectMapper<span class="token punctuation">.</span><span class="token function">writerWithView</span><span class="token punctuation">(</span>serializationView<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>objectMapper<span class="token punctuation">.</span><span class="token function">writer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>filters <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   objectWriter <span class="token operator">=</span> objectWriter<span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>filters<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>javaType <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> javaType<span class="token punctuation">.</span><span class="token function">isContainerType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   objectWriter <span class="token operator">=</span> objectWriter<span class="token punctuation">.</span><span class="token function">forType</span><span class="token punctuation">(</span>javaType<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token class-name">SerializationConfig</span> config <span class="token operator">=</span> objectWriter<span class="token punctuation">.</span><span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>contentType <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> contentType<span class="token punctuation">.</span><span class="token function">isCompatibleWith</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">TEXT_EVENT_STREAM</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span><span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token class-name">SerializationFeature</span><span class="token punctuation">.</span><span class="token constant">INDENT_OUTPUT</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   objectWriter <span class="token operator">=</span> objectWriter<span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>ssePrettyPrinter<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
        <span class="token comment">// 重点进行序列化</span>
  objectWriter<span class="token punctuation">.</span><span class="token function">writeValue</span><span class="token punctuation">(</span>generator<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">writeSuffix</span><span class="token punctuation">(</span>generator<span class="token punctuation">,</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span>
  generator<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么，可以看出 SpringMVC 在进行响应序列化的时候是从容器中获取的 ObjectMapper 实例对象，并会根据不同的默认配置条件进行序列化，那处理方法就简单了，我也可以从 Spring 容器拿数据进行序列化啊。SecretResponseAdvice 进行如下进一步改造：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@ControllerAdvice</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecretResponseAdvice</span> <span class="token keyword">implements</span> <span class="token class-name">ResponseBodyAdvice</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">ObjectMapper</span> objectMapper<span class="token punctuation">;</span>
     
      <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">beforeBodyWrite</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token class-name">String</span> dataStr <span class="token operator">=</span>objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> data <span class="token operator">=</span> <span class="token class-name">EncryptUtils</span><span class="token punctuation">.</span><span class="token function">aesEncrypt</span><span class="token punctuation">(</span>dataStr<span class="token punctuation">,</span> secretKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>经测试，响应数据和非加密版万全一致啦，还有 GET 部分的请求加密，以及后面加解密惨遭跨域问题，后面有空再和大家聊聊。</p>`,12),d={href:"https://github.com/boykait/encrypt-demo",target:"_blank",rel:"noopener noreferrer"};function v(m,b){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s('解密后的 userType 枚举类型和非加密版本一样了，舒服了，== 好像还不对，registerTime 怎么变成这个样子了？原本是"2022-03-24 23: 58:39" 这种格式的，'),n("a",k,[s("Jackson 之 LocalDateTime 转换，无需改实体类"),t(a)]),s(" 这篇文章讲到了这个问题，并提出了一种解决方案，不过用在我们目前这个需求里面，就是有损改装了啊，不太可取，遂去 Jackson 官网上查找一下相关文档，当然 Jackson 也提供了 ObjectMapper 的序列化配置，重新再初始化配置 ObjectMpper 对象：")]),r,n("p",null,[n("a",d,[s("https://github.com/boykait/encrypt-demo"),t(a)])])])}const q=e(i,[["render",v],["__file","SpringBoot 接口数据加解密技巧.html.vue"]]),f=JSON.parse('{"path":"/dev/SpringBoot%20%E6%8E%A5%E5%8F%A3%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%A7%A3%E5%AF%86%E6%8A%80%E5%B7%A7.html","title":"SpringBoot 接口数据加解密技巧","lang":"zh-CN","frontmatter":{"author":"xlc520","title":"SpringBoot 接口数据加解密技巧","excerpt":null,"description":"SpringBoot 接口数据加解密技巧 主要的需求点如下： 尽量少改动，不影响之前的业务逻辑； 考虑到时间紧迫性，可采用对称性加密方式，服务需要对接安卓、IOS、H5 三端，另外考虑到 H5 端存储密钥安全性相对来说会低一些，故分针对 H5 和安卓、IOS 分配两套密钥； 要兼容低版本的接口，后面新开发的接口可不用兼容； 接口有 GET 和 POST...","date":"2023-08-30T00:00:00.000Z","category":"Java","tag":"Java","article":true,"timeline":true,"icon":"java","head":[["meta",{"property":"og:url","content":"https://blog.ciberviler.top/dev/SpringBoot%20%E6%8E%A5%E5%8F%A3%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%A7%A3%E5%AF%86%E6%8A%80%E5%B7%A7.html"}],["meta",{"property":"og:site_name","content":"StudyNote"}],["meta",{"property":"og:title","content":"SpringBoot 接口数据加解密技巧"}],["meta",{"property":"og:description","content":"SpringBoot 接口数据加解密技巧 主要的需求点如下： 尽量少改动，不影响之前的业务逻辑； 考虑到时间紧迫性，可采用对称性加密方式，服务需要对接安卓、IOS、H5 三端，另外考虑到 H5 端存储密钥安全性相对来说会低一些，故分针对 H5 和安卓、IOS 分配两套密钥； 要兼容低版本的接口，后面新开发的接口可不用兼容； 接口有 GET 和 POST..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-27T13:32:36.000Z"}],["meta",{"property":"article:author","content":"xlc520"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2023-08-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-27T13:32:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringBoot 接口数据加解密技巧\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-08-30T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-27T13:32:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xlc520\\"}]}"]]},"headers":[],"git":{"createdTime":1656560760000,"updatedTime":1714224756000,"contributors":[{"name":"xlc","email":"2215400217@qq.com","commits":1},{"name":"xlc520","email":"2215400217@qq.com","commits":1}]},"readingTime":{"minutes":8.76,"words":2627},"filePathRelative":"dev/SpringBoot 接口数据加解密技巧.md","localizedDate":"2023年8月30日","autoDesc":true}');export{q as comp,f as data};
