const t=JSON.parse('{"key":"v-2eca75e7","path":"/dev/Spring%20Boot%20%E4%BC%81%E4%B8%9A%E8%A7%84%E8%8C%83.html","title":"Spring Boot 企业规范","lang":"zh-CN","frontmatter":{"author":"xlc520","title":"Spring Boot 企业规范","description":"Spring Boot 企业规范 1、正确的包目录风格 正确的包目录将有助于轻松理解代码和应用程序的流程。 我们可以使用有意义的包目录来构建我们的应用程序。 我们可以将所有控制器包含在单独的包中，将服务包含在单独的包中，将 util 类包含在单独的包中等等。这种风格在小型微服务中非常方便。 如果我们正在处理庞大的代码库，则可以使用基于功能模块的方法。我...","date":"2023-11-24T00:00:00.000Z","category":"Java","tag":"Java","article":true,"timeline":true,"icon":"java","head":[["meta",{"property":"og:url","content":"https://blog.ciberviler.top/dev/Spring%20Boot%20%E4%BC%81%E4%B8%9A%E8%A7%84%E8%8C%83.html"}],["meta",{"property":"og:site_name","content":"StudyNote"}],["meta",{"property":"og:title","content":"Spring Boot 企业规范"}],["meta",{"property":"og:description","content":"Spring Boot 企业规范 1、正确的包目录风格 正确的包目录将有助于轻松理解代码和应用程序的流程。 我们可以使用有意义的包目录来构建我们的应用程序。 我们可以将所有控制器包含在单独的包中，将服务包含在单独的包中，将 util 类包含在单独的包中等等。这种风格在小型微服务中非常方便。 如果我们正在处理庞大的代码库，则可以使用基于功能模块的方法。我..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://static.xlc520.tk/blogImage/640-1700667020609-0.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-07T11:49:56.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"Spring Boot 企业规范"}],["meta",{"property":"article:author","content":"xlc520"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2023-11-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-07T11:49:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring Boot 企业规范\\",\\"image\\":[\\"https://static.xlc520.tk/blogImage/640-1700667020609-0.png\\",\\"https://static.xlc520.tk/blogImage/640-1700829446082-1.png\\",\\"https://static.xlc520.tk/blogImage/640-1700829446083-2.png\\",\\"https://static.xlc520.tk/blogImage/640-1700829446083-3.png\\",\\"https://static.xlc520.tk/blogImage/640-1700829446083-4.png\\",\\"https://static.xlc520.tk/blogImage/640-1700829446083-5.png\\",\\"https://static.xlc520.tk/blogImage/640-1700829446083-6.png\\",\\"https://static.xlc520.tk/blogImage/640-1700829446083-7.png\\",\\"https://static.xlc520.tk/blogImage/640-1700829446083-8.png\\",\\"https://static.xlc520.tk/blogImage/640-1700829446084-9.png\\",\\"https://static.xlc520.tk/blogImage/640-1700829446084-10.png\\",\\"https://static.xlc520.tk/blogImage/640-1700829446084-11.png\\",\\"https://static.xlc520.tk/blogImage/640-1700829446084-12.png\\"],\\"datePublished\\":\\"2023-11-24T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-07T11:49:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xlc520\\"}]}"]]},"headers":[{"level":3,"title":"1、正确的包目录风格","slug":"_1、正确的包目录风格","link":"#_1、正确的包目录风格","children":[]},{"level":3,"title":"2、使用设计模式","slug":"_2、使用设计模式","link":"#_2、使用设计模式","children":[]},{"level":3,"title":"3、使用 Spring Boot starter","slug":"_3、使用-spring-boot-starter","link":"#_3、使用-spring-boot-starter","children":[]},{"level":3,"title":"4、使用生产版本的依赖项","slug":"_4、使用生产版本的依赖项","link":"#_4、使用生产版本的依赖项","children":[]},{"level":3,"title":"5、使用 Lombok","slug":"_5、使用-lombok","link":"#_5、使用-lombok","children":[]},{"level":3,"title":"6、将构造函数注入与 Lombok 一起使用","slug":"_6、将构造函数注入与-lombok-一起使用","link":"#_6、将构造函数注入与-lombok-一起使用","children":[]},{"level":3,"title":"7、使用 slf4j 日志","slug":"_7、使用-slf4j-日志","link":"#_7、使用-slf4j-日志","children":[]},{"level":3,"title":"8、控制器仅用于路由","slug":"_8、控制器仅用于路由","link":"#_8、控制器仅用于路由","children":[]},{"level":3,"title":"9、使用Service来实现业务逻辑","slug":"_9、使用service来实现业务逻辑","link":"#_9、使用service来实现业务逻辑","children":[]},{"level":3,"title":"10、避免空指针异常","slug":"_10、避免空指针异常","link":"#_10、避免空指针异常","children":[]},{"level":3,"title":"11、使用集合框架的最佳实践","slug":"_11、使用集合框架的最佳实践","link":"#_11、使用集合框架的最佳实践","children":[]},{"level":3,"title":"12、使用分页","slug":"_12、使用分页","link":"#_12、使用分页","children":[]},{"level":3,"title":"13、使用缓存","slug":"_13、使用缓存","link":"#_13、使用缓存","children":[]},{"level":3,"title":"14、使用自定义异常处理程序和全局异常处理","slug":"_14、使用自定义异常处理程序和全局异常处理","link":"#_14、使用自定义异常处理程序和全局异常处理","children":[]},{"level":3,"title":"15、使用自定义响应对象","slug":"_15、使用自定义响应对象","link":"#_15、使用自定义响应对象","children":[]},{"level":3,"title":"16、删除不必要的代码、变量、方法和类。","slug":"_16、删除不必要的代码、变量、方法和类。","link":"#_16、删除不必要的代码、变量、方法和类。","children":[]},{"level":3,"title":"17、使用注释","slug":"_17、使用注释","link":"#_17、使用注释","children":[]},{"level":3,"title":"18、对类、方法、函数、变量和其他属性使用有意义的词语。","slug":"_18、对类、方法、函数、变量和其他属性使用有意义的词语。","link":"#_18、对类、方法、函数、变量和其他属性使用有意义的词语。","children":[]},{"level":3,"title":"19、使用正确的大小写进行声明","slug":"_19、使用正确的大小写进行声明","link":"#_19、使用正确的大小写进行声明","children":[]},{"level":3,"title":"20、简单点","slug":"_20、简单点","link":"#_20、简单点","children":[]},{"level":3,"title":"21、使用通用的代码格式样式","slug":"_21、使用通用的代码格式样式","link":"#_21、使用通用的代码格式样式","children":[]},{"level":3,"title":"22、使用 SonarLint 插件","slug":"_22、使用-sonarlint-插件","link":"#_22、使用-sonarlint-插件","children":[]}],"git":{"createdTime":1701949796000,"updatedTime":1701949796000,"contributors":[{"name":"xlc","email":"2215400217@qq.com","commits":1}]},"readingTime":{"minutes":8.28,"words":2484},"filePathRelative":"dev/Spring Boot 企业规范.md","localizedDate":"2023年11月24日","excerpt":"\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>Spring Boot 是一种广泛使用且非常流行的企业级高性能框架。以下是一些最佳实践和一些技巧，我们可以使用它们来改进 Spring Boot 应用程序并使其更加高效。这篇文章会有点长，完整读完文章需要一些时间。\\n</code></pre></div>","autoDesc":true}');export{t as data};
