import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as t}from"./app-a8514216.js";const p={},e=t(`<h1 id="快速使用" tabindex="-1"><a class="header-anchor" href="#快速使用" aria-hidden="true">#</a> 快速使用</h1><p><code>mybatis-plus</code>作为<code>mybatis</code>的增强工具，它的出现极大的简化了开发中的数据库操作，但是长久以来，它的<strong>联表查询</strong>能力一直被大家所诟病。一旦遇到<code>left join</code>或<code>right join</code>的左右连接，你还是得老老实实的打开xml文件，手写上一大段的sql语句。</p><p>直到前几天，偶然碰到了这么一款叫做<code>mybatis-plus-join</code>的工具（后面就简称<code>mpj</code>了），使用了一下，不得不说真香！彻底将我从xml地狱中解放了出来，终于可以以类似<code>mybatis-plus</code>中<code>QueryWrapper</code>的方式来进行联表查询了，话不多说，我们下面开始体验。</p><h2 id="引入依赖" tabindex="-1"><a class="header-anchor" href="#引入依赖" aria-hidden="true">#</a> <strong>引入依赖</strong></h2><p>首先在项目中引入引入依赖坐标，因为<code>mpj</code>中依赖较高版本<code>mybatis-plus</code>中的一些api，所以项目建议直接使用高版本。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.yulichang<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-plus-join<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>引入相关依赖后，在<code>springboot</code>项目中，像往常一样正常配置数据源连接信息就可以了。</p><h2 id="数据准备" tabindex="-1"><a class="header-anchor" href="#数据准备" aria-hidden="true">#</a> <strong>数据准备</strong></h2><p>因为要实现联表查询，所以我们先来建几张表进行测试。</p><p>订单表：</p><figure><img src="https://static.xlc520.tk/blogImage/640-16586333873680.png" alt="mybatis-plus-join" tabindex="0" loading="lazy"><figcaption>mybatis-plus-join</figcaption></figure><p>用户表，包含用户姓名：</p><figure><img src="https://static.xlc520.tk/blogImage/640-16586333873681.png" alt="mybatis-plus-join" tabindex="0" loading="lazy"><figcaption>mybatis-plus-join</figcaption></figure><p>商品表，包含商品名称和单价：</p><figure><img src="https://static.xlc520.tk/blogImage/640-16586333873682.png" alt="mybatis-plus-join" tabindex="0" loading="lazy"><figcaption>mybatis-plus-join</figcaption></figure><p>在订单表中，通过用户id和商品id与其他两张表进行关联。</p><h2 id="修改mapper" tabindex="-1"><a class="header-anchor" href="#修改mapper" aria-hidden="true">#</a> <strong>修改Mapper</strong></h2><p>以往在使用<code>myatis-plus</code>的时候，我们的<code>Mapper</code>层接口都是直接继承的<code>BaseMapper</code>，使用<code>mpj</code>后需要对其进行修改，改为继承<code>MPJBaseMapper</code>接口。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderMapper</span> <span class="token keyword">extends</span> <span class="token class-name">MPJBaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对其余两个表的<code>Mapper</code>接口也进行相同的改造。此外，我们的<code>service</code>也可以选择继承<code>MPJBaseService</code>，<code>serviceImpl</code>选择继承<code>MPJBaseServiceImpl</code>，这两者为非必须继承。</p><h2 id="查询" tabindex="-1"><a class="header-anchor" href="#查询" aria-hidden="true">#</a> <strong>查询</strong></h2><p><code>Mapper</code>接口改造完成后，我们把它注入到<code>Service</code>中，虽然说我们要完成3张表的联表查询，但是以<code>Order</code>作为主表的话，那么只注入这一个对应的<code>OrderMapper</code>就可以，非常简单。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">OrderMapper</span> orderMapper<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mpjlambdawrapper" tabindex="-1"><a class="header-anchor" href="#mpjlambdawrapper" aria-hidden="true">#</a> MPJLambdaWrapper</h3><p>接下来，我们体验一下再也不用写sql的联表查询：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderDto</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> orderMapper<span class="token punctuation">.</span><span class="token function">selectJoinList</span><span class="token punctuation">(</span><span class="token class-name">OrderDto</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
     <span class="token keyword">new</span> <span class="token class-name">MPJLambdaWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token class-name">Order</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">Product</span><span class="token operator">::</span><span class="token function">getUnitPrice</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">selectAs</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span><span class="token class-name">OrderDto</span><span class="token operator">::</span><span class="token function">getUserName</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">selectAs</span><span class="token punctuation">(</span><span class="token class-name">Product</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span><span class="token class-name">OrderDto</span><span class="token operator">::</span><span class="token function">getProductName</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">leftJoin</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> <span class="token class-name">Order</span><span class="token operator">::</span><span class="token function">getUserId</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">leftJoin</span><span class="token punctuation">(</span><span class="token class-name">Product</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Product</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> <span class="token class-name">Order</span><span class="token operator">::</span><span class="token function">getProductId</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">Order</span><span class="token operator">::</span><span class="token function">getStatus</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不看代码，我们先调用接口来看一下执行结果：</p><figure><img src="https://static.xlc520.tk/blogImage/640-16586333873683.png" alt="mybatis-plus-join" tabindex="0" loading="lazy"><figcaption>mybatis-plus-join</figcaption></figure><p>可以看到，成功查询出了关联表中的信息，下面我们一点点介绍上面代码的语义。</p><p>首先，调用<code>mapper</code>的<code>selectJoinList()</code>方法，进行关联查询，返回多条结果。后面的第一个参数<code>OrderDto.class</code>代表接收返回查询结果的类，作用和我们之前在<code>xml</code>中写的<code>resultType</code>类似。</p><p>这个类可以直接继承实体，再添加上需要在关联查询中返回的列即可：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@ToString</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderDto</span> <span class="token keyword">extends</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> userName<span class="token punctuation">;</span>
    <span class="token class-name">String</span> productName<span class="token punctuation">;</span>
    <span class="token class-name">Double</span> unitPrice<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来的<code>MPJLambdaWrapper</code>就是构建查询条件的核心了，看一下我们在上面用到的几个方法：</p><ul><li><code>selectAll()</code>：查询指定实体类的全部字段</li><li><code>select()</code>：查询指定的字段，支持可变长参数同时查询多个字段，但是在同一个<code>select</code>中只能查询相同表的字段，所以如果查询多张表的字段需要分开写</li><li><code>selectAs()</code>：字段别名查询，用于数据库字段与接收结果的<code>dto</code>中属性名称不一致时转换</li><li><code>leftJoin()</code>：左连接，其中第一个参数是参与联表的表对应的实体类，第二个参数是这张表联表的<code>ON</code>字段，第三个参数是参与联表的<code>ON</code>的另一个实体类属性</li></ul><p>除此之外，还可以正常调用<code>mybatis-plus</code>中的各种原生方法，文档中还提到，默认主表别名是<code>t</code>，其他的表别名以先后调用的顺序使用<code>t1</code>、<code>t2</code>、<code>t3</code>以此类推。</p><p>我们用插件读取日志转化为可读的sql语句，可以看到两条左连接条件都被正确地添加到了sql中：</p><figure><img src="https://static.xlc520.tk/blogImage/640-16586333873694.png" alt="mybatis-plus-join" tabindex="0" loading="lazy"><figcaption>mybatis-plus-join</figcaption></figure><h3 id="mpjquerywrapper" tabindex="-1"><a class="header-anchor" href="#mpjquerywrapper" aria-hidden="true">#</a> MPJQueryWrapper</h3><p>和<code>mybatis-plus</code>非常类似，除了<code>LamdaWrapper</code>外还提供了普通<code>QueryWrapper</code>的写法，改造上面的代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getOrderSimple</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderDto</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> orderMapper<span class="token punctuation">.</span><span class="token function">selectJoinList</span><span class="token punctuation">(</span><span class="token class-name">OrderDto</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
     <span class="token keyword">new</span> <span class="token class-name">MPJQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token class-name">Order</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&quot;t2.unit_price&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;t2.name as product_name&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&quot;t1.name as user_name&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">leftJoin</span><span class="token punctuation">(</span><span class="token string">&quot;t_user t1 on t1.id = t.user_id&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">leftJoin</span><span class="token punctuation">(</span><span class="token string">&quot;t_product t2 on t2.id = t.product_id&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;t.status&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果与之前完全相同，需要注意的是，这样写时在引用表名时不要使用数据库中的原表名，主表默认使用<code>t</code>，其他表使用<code>join</code>语句中我们为它起的别名，如果使用原表名在运行中会出现报错。</p><p>并且，在<code>MPJQueryWrapper</code>中，可以更灵活的支持子查询操作，如果业务比较复杂，那么使用这种方式也是不错的选择。</p><h2 id="分页查询" tabindex="-1"><a class="header-anchor" href="#分页查询" aria-hidden="true">#</a> <strong>分页查询</strong></h2><p><code>mpj</code>中也能很好的支持列表查询中的分页功能，首先我们要在项目中加入分页拦截器：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">MybatisPlusInterceptor</span> <span class="token function">mybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">MybatisPlusInterceptor</span> interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">(</span><span class="token class-name">DbType</span><span class="token punctuation">.</span><span class="token constant">H2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> interceptor<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来改造上面的代码，调用<code>selectJoinPage()</code>方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">page</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderDto</span><span class="token punctuation">&gt;</span></span> orderPage <span class="token operator">=</span> orderMapper<span class="token punctuation">.</span><span class="token function">selectJoinPage</span><span class="token punctuation">(</span>
      <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderDto</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token class-name">OrderDto</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
      <span class="token keyword">new</span> <span class="token class-name">MPJLambdaWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token class-name">Order</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">Product</span><span class="token operator">::</span><span class="token function">getUnitPrice</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">selectAs</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span> <span class="token class-name">OrderDto</span><span class="token operator">::</span><span class="token function">getUserName</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">selectAs</span><span class="token punctuation">(</span><span class="token class-name">Product</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span> <span class="token class-name">OrderDto</span><span class="token operator">::</span><span class="token function">getProductName</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">leftJoin</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> <span class="token class-name">Order</span><span class="token operator">::</span><span class="token function">getUserId</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">leftJoin</span><span class="token punctuation">(</span><span class="token class-name">Product</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Product</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> <span class="token class-name">Order</span><span class="token operator">::</span><span class="token function">getProductId</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">orderByAsc</span><span class="token punctuation">(</span><span class="token class-name">Order</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    orderPage<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意在这里需要添加一个分页参数的<code>Page</code>对象，我们再执行上面的代码，并对日志进行解析，查看sql语句：</p><figure><img src="https://static.xlc520.tk/blogImage/640-16586333873695.png" alt="mybatis-plus-join" tabindex="0" loading="lazy"><figcaption>mybatis-plus-join</figcaption></figure><p>可以看到底层通过添加<code>limit</code>进行了分页，同理，<code>MPJQueryWrapper</code>也可以这样进行分页。</p><h1 id="官方介绍及使用" tabindex="-1"><a class="header-anchor" href="#官方介绍及使用" aria-hidden="true">#</a> 官方介绍及使用</h1><p>mybatis-plus-join是mybatis plus的一个多表插件，上手简单，十分钟不到就能学会全部使用方式，只要会用mp就会用这个插件，仅仅依赖了lombok，而且是扩展mp的构造器并非更改原本的构造器，不会对原有项目产生一点点影响，相信大多数项目都有这俩插件，四舍五入就是没依赖。</p><p>mybatis-plus-join示例：</p><blockquote><p>gitee: https://gitee.com/mhb0409/mybatis-plus-join-example github: https://github.com/bobo667/mybatis-plus-join-example</p></blockquote><p><strong>目前支持大部分mp常用版本</strong></p><p>maven坐标</p><p>mybatis plus：3.2.0版本依赖地址：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>icu.mhb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-plus-join<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最新版本依赖地址：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>icu.mhb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-plus-join<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="版本对应关系-此处只显示对应的最新版本" tabindex="-1"><a class="header-anchor" href="#版本对应关系-此处只显示对应的最新版本" aria-hidden="true">#</a> 版本对应关系（此处只显示对应的最新版本）</h2><blockquote><p>标注：*号代表，从起始版本之后都是可以使用的</p></blockquote><table><thead><tr><th>Mybatis-plus</th><th>Mybatis-plus-join</th></tr></thead><tbody><tr><td>3.2.0</td><td>1.2.0</td></tr><tr><td>3.3.1 - 3.42</td><td>1.0.2</td></tr><tr><td>3.4.3.4 - *</td><td>1.0.3 、1.0.4、1.0.5、1.0.6、1.0.8、1.0.9、1.1.1、1.1.2</td></tr></tbody></table><h2 id="怎么使用" tabindex="-1"><a class="header-anchor" href="#怎么使用" aria-hidden="true">#</a> 怎么使用</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   
    <span class="token doc-comment comment">/**
     * 查询列表
     *
     * <span class="token keyword">@param</span> <span class="token parameter">wrapper</span> 实体对象封装操作类
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>E<span class="token punctuation">&gt;</span></span>     返回泛型（如果只查询一个字段可以传递String Int之类的类型）
     * <span class="token keyword">@return</span> 返回E 类型的列表
     */</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>EV<span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>EV<span class="token punctuation">&gt;</span></span> <span class="token function">joinList</span><span class="token punctuation">(</span><span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> wrapper<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span>EV<span class="token punctuation">&gt;</span></span> clz<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 查询单个对象
     *
     * <span class="token keyword">@param</span> <span class="token parameter">wrapper</span> 实体对象封装操作类
     * <span class="token keyword">@param</span> <span class="token parameter">clz</span>     返回对象 （如果只查询一个字段可以传递String Int之类的类型）
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>E<span class="token punctuation">&gt;</span></span>     包装泛型类型
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>EV<span class="token punctuation">&gt;</span></span>    返回类型泛型
     * <span class="token keyword">@return</span> EV
     */</span>
    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">,</span> EV<span class="token punctuation">&gt;</span></span> <span class="token class-name">EV</span> <span class="token function">joinGetOne</span><span class="token punctuation">(</span><span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> wrapper<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span>EV<span class="token punctuation">&gt;</span></span> clz<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token doc-comment comment">/**
     * 查询count
     *
     * <span class="token keyword">@param</span> <span class="token parameter">wrapper</span> 实体对象封装操作类
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>E<span class="token punctuation">&gt;</span></span>     返回泛型
     * <span class="token keyword">@return</span> 总数
     */</span>
    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">int</span> <span class="token function">joinCount</span><span class="token punctuation">(</span><span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token doc-comment comment">/**
     * 翻页查询
     *
     * <span class="token keyword">@param</span> <span class="token parameter">page</span>    翻页对象
     * <span class="token keyword">@param</span> <span class="token parameter">wrapper</span> 实体对象封装操作类
     */</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>EV<span class="token punctuation">,</span> <span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">IPage</span><span class="token punctuation">&lt;</span>EV<span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span>EV<span class="token punctuation">&gt;</span></span> <span class="token function">joinPage</span><span class="token punctuation">(</span><span class="token class-name">E</span> page<span class="token punctuation">,</span> <span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> wrapper<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span>EV<span class="token punctuation">&gt;</span></span> clz<span class="token punctuation">)</span><span class="token punctuation">;</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一共是四个方法，分别重写于mp的</p><p><code>joinList -&gt; list </code></p><p><code>joinGetOne -&gt; getOne</code></p><p><code>joinCount -&gt; count</code></p><p><code>joinPage -&gt; page</code></p><p><strong>注意：这几个方法，前面俩参数和mp的用法一致，最后一个class类型的是返回类型，这个主要是大多数多表操作都是需要有额外字段，所以需要额外定义，而<code>Wrapper&lt;E&gt; wrapper</code>中的这个需要填写在需要构建条件的实体，这个实体是任意的，不强制，创建条件构造器的时候定义的那个对象就是主表</strong></p><h2 id="基本使用方法" tabindex="-1"><a class="header-anchor" href="#基本使用方法" aria-hidden="true">#</a> 基本使用方法</h2><p>1.mapper继承 <code>JoinBaseMapper&lt; T&gt;</code></p><p>2.service继承 <code>JoinIService&lt; T&gt;</code></p><p>3.impl 继承 <code>JoinServiceImpl&lt;M,T&gt;</code></p><p>4.注入mp自定义方法，主要是继承JoinDefaultSqlInjector</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">icu<span class="token punctuation">.</span>mhb<span class="token punctuation">.</span>mpj<span class="token punctuation">.</span>example<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>injector<span class="token punctuation">.</span></span><span class="token class-name">AbstractMethod</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">icu<span class="token punctuation">.</span>mhb<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>plugln<span class="token punctuation">.</span>injector<span class="token punctuation">.</span></span><span class="token class-name">JoinDefaultSqlInjector</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisPlusConfig</span> <span class="token keyword">extends</span> <span class="token class-name">JoinDefaultSqlInjector</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AbstractMethod</span><span class="token punctuation">&gt;</span></span> <span class="token function">getMethodList</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> mapperClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AbstractMethod</span><span class="token punctuation">&gt;</span></span> methodList <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getMethodList</span><span class="token punctuation">(</span>mapperClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 自己的自定义方法</span>
        <span class="token keyword">return</span> methodList<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后就可以愉快的使用了</p><h2 id="自定义查询字段和表别名关键字" tabindex="-1"><a class="header-anchor" href="#自定义查询字段和表别名关键字" aria-hidden="true">#</a> 自定义查询字段和表别名关键字</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 为何要这个东西，因为在不同数据库之间，别名关键字不一样，例如Mysql表别名是 As 而oracle中 是 is 关键字所以需要</span>

<span class="token comment">// 以oracle 关键字为例</span>
<span class="token comment">// 解释一下为什么要这样声明，因为注入器在启动的时候就进行初始化，所以这个构建需要在初始化之前，最简单的办法就是在注入MybatisPlusPropertiesCustomizer的地方进行实例化</span>
 <span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">MybatisPlusPropertiesCustomizer</span> <span class="token function">plusPropertiesCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">MybatisPlusJoinConfig</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">// 查询字段别名关键字</span>
                <span class="token punctuation">.</span><span class="token function">columnAliasKeyword</span><span class="token punctuation">(</span><span class="token string">&quot;as&quot;</span><span class="token punctuation">)</span>
                <span class="token comment">// 表、left join、right join、inner join 表别名关键字</span>
                <span class="token punctuation">.</span><span class="token function">tableAliasKeyword</span><span class="token punctuation">(</span><span class="token string">&quot;is&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">MybatisPlusProperties</span><span class="token operator">::</span><span class="token function">getGlobalConfig</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 运行的SQL</span>
<span class="token constant">SELECT</span> <span class="token number">1</span> as id
 <span class="token constant">FROM</span> users is users
 <span class="token constant">LEFT</span> <span class="token constant">JOIN</span> users_age is users_age
 <span class="token constant">ON</span> users_age<span class="token punctuation">.</span>id <span class="token operator">=</span> users<span class="token punctuation">.</span>age_id

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面来看构造器的使用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 第一步new 一个JoinLambdaWrapper构造参数是主表的实体对象（如果在service中直接使用joinLambdaWrapper()方法即可获得）</span>
<span class="token class-name">JoinLambdaWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Users</span><span class="token punctuation">&gt;</span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JoinLambdaWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Users</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 第二步 使用leftJoin方法创建一个左连接</span>
<span class="token comment">/*
	有三个方法可以使用 
	leftJoin 左联
	rightJoin 右联
	innerJoin 内联
*/</span>

<span class="token comment">// 这一部分一个参数是join中定义的连接的表，第二个参数是随意的表，但是是要出现构造器中的</span>
wrapper<span class="token punctuation">.</span><span class="token function">leftJoin</span><span class="token punctuation">(</span><span class="token class-name">UsersAge</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">UsersAge</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span><span class="token class-name">Users</span><span class="token operator">::</span><span class="token function">getAgeId</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 然后可以设置多表中的查询条件，这一步和mp一致</span>
wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">UserAge</span><span class="token operator">::</span><span class="token function">getAgeName</span><span class="token punctuation">,</span><span class="token string">&quot;95&quot;</span><span class="token punctuation">)</span>
  		<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">UserAge</span><span class="token operator">::</span><span class="token function">getAgeName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 最后一步 需要使用end方法结束</span>
wrapper<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  

<span class="token comment">// 完整的就是</span>
<span class="token class-name">JoinLambdaWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Users</span><span class="token punctuation">&gt;</span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JoinLambdaWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Users</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
wrapper<span class="token punctuation">.</span><span class="token function">leftJoin</span><span class="token punctuation">(</span><span class="token class-name">UsersAge</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">UsersAge</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span><span class="token class-name">Users</span><span class="token operator">::</span><span class="token function">getAgeId</span><span class="token punctuation">)</span>
  	<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">UserAge</span><span class="token operator">::</span><span class="token function">getAgeName</span><span class="token punctuation">,</span><span class="token string">&quot;95&quot;</span><span class="token punctuation">)</span>
  	<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">UserAge</span><span class="token operator">::</span><span class="token function">getAgeName</span><span class="token punctuation">)</span>
  	<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

usersService<span class="token punctuation">.</span><span class="token function">joinList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">,</span><span class="token class-name">UsersVo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 执行SQL </span>
select 
  users<span class="token punctuation">.</span>user_id<span class="token punctuation">,</span>
  users<span class="token punctuation">.</span>user_name<span class="token punctuation">,</span>
  users_age<span class="token punctuation">.</span>age_name
from users users
  left join users_age users_age on users_age<span class="token punctuation">.</span>id <span class="token operator">=</span> users<span class="token punctuation">.</span>age_id
where <span class="token punctuation">(</span>
	users_age<span class="token punctuation">.</span>age_name <span class="token operator">=</span> <span class="token char">&#39;95&#39;</span>
<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>是不是就很简单，就和mp的原生的比，就是增加了 join方法啥的</p><h2 id="加料用法" tabindex="-1"><a class="header-anchor" href="#加料用法" aria-hidden="true">#</a> 加料用法</h2><p>OK，来点丝滑的加料用法</p><h3 id="自定义别名和返回map类型" tabindex="-1"><a class="header-anchor" href="#自定义别名和返回map类型" aria-hidden="true">#</a> 自定义别名和返回map类型</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 两个参数代表自定义别名</span>
<span class="token class-name">JoinLambdaWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Users</span><span class="token punctuation">&gt;</span></span> wrapper <span class="token operator">=</span> <span class="token function">joinLambdaQueryWrapper</span><span class="token punctuation">(</span><span class="token class-name">Users</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;userMaster&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

wrapper
       <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">Users</span><span class="token operator">::</span><span class="token function">getUserId</span><span class="token punctuation">,</span> <span class="token class-name">Users</span><span class="token operator">::</span><span class="token function">getUserName</span><span class="token punctuation">)</span>
  		<span class="token comment">// leftJoin innerJoin rightJoin 三个参数代表使用默认别名，四个参数代表使用自定义别名</span>
       <span class="token punctuation">.</span><span class="token function">leftJoin</span><span class="token punctuation">(</span><span class="token class-name">UsersAge</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">UsersAge</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> <span class="token class-name">Users</span><span class="token operator">::</span><span class="token function">getAgeId</span><span class="token punctuation">,</span> <span class="token string">&quot;u_age&quot;</span><span class="token punctuation">)</span>
       <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">UsersAge</span><span class="token operator">::</span><span class="token function">getAgeDoc</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
       <span class="token punctuation">.</span><span class="token function">leftJoin</span><span class="token punctuation">(</span><span class="token class-name">UsersAge</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">UsersAge</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> <span class="token class-name">Users</span><span class="token operator">::</span><span class="token function">getAgeId</span><span class="token punctuation">,</span> <span class="token string">&quot;u_a&quot;</span><span class="token punctuation">)</span>
       <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">UsersAge</span><span class="token operator">::</span><span class="token function">getAgeName</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 需要注意的是当返回参数为map的时候是没有下划线转驼峰的，如果需要请自行配置mybatis的下划线转驼峰</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&gt;</span></span> dataList <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">joinList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// SQL</span>
<span class="token constant">SELECT</span>
	userMaster<span class="token punctuation">.</span>user_id<span class="token punctuation">,</span>
	userMaster<span class="token punctuation">.</span>user_name<span class="token punctuation">,</span>
	u_age<span class="token punctuation">.</span>age_doc<span class="token punctuation">,</span>
	u_a<span class="token punctuation">.</span>age_name 
<span class="token constant">FROM</span>
	users <span class="token constant">AS</span> userMaster
	<span class="token constant">LEFT</span> <span class="token constant">JOIN</span> users_age <span class="token constant">AS</span> u_age <span class="token constant">ON</span> u_age<span class="token punctuation">.</span>id <span class="token operator">=</span> userMaster<span class="token punctuation">.</span>age_id
	<span class="token constant">LEFT</span> <span class="token constant">JOIN</span> users_age <span class="token constant">AS</span> u_a <span class="token constant">ON</span> u_a<span class="token punctuation">.</span>id <span class="token operator">=</span> userMaster<span class="token punctuation">.</span>age_id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="一对一查询映射" tabindex="-1"><a class="header-anchor" href="#一对一查询映射" aria-hidden="true">#</a> 一对一查询映射</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 很多时候连表返回的字段很多都相同，所以在每个vo里面都会出现，如果把这些重复性字段封装成一个类，会更好维护，所以说针对这个情况 版本 &gt;= 1.0.6 即可使用oneToOneSelect 方法</span>

 <span class="token class-name">JoinLambdaWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Users</span><span class="token punctuation">&gt;</span></span> wrapper <span class="token operator">=</span> <span class="token function">joinLambdaQueryWrapper</span><span class="token punctuation">(</span><span class="token class-name">Users</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 wrapper<span class="token punctuation">.</span><span class="token function">leftJoin</span><span class="token punctuation">(</span><span class="token class-name">UsersAge</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">UsersAge</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> <span class="token class-name">Users</span><span class="token operator">::</span><span class="token function">getAgeId</span><span class="token punctuation">)</span>
   <span class="token comment">// oneToOneSelect 第一个参数需要映射的实体类字段，第二个参数则是查询函数</span>
        <span class="token punctuation">.</span><span class="token function">oneToOneSelect</span><span class="token punctuation">(</span><span class="token class-name">UsersVo</span><span class="token operator">::</span><span class="token function">getUsersAge</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>cb<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
             cb<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">UsersAge</span><span class="token operator">::</span><span class="token function">getAgeDoc</span><span class="token punctuation">,</span> <span class="token class-name">UsersAge</span><span class="token operator">::</span><span class="token function">getAgeName</span><span class="token punctuation">)</span>
               <span class="token comment">/* 
              当你出现两个实体类映射字段相同，例如 user实体中有个字段id，userAge表中也有个字段id，你									想要同时获取这两个字段，这时候则可以使用
               |column : 查询字段
               |alias  : 别名
							 |fieldName : 字段名称
               add(SFunction&lt;T, ?&gt; column, String alias, SFunction&lt;F, ?&gt; fieldName)
               */</span>
               <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">UsersAge</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> <span class="token string">&quot;ageId&quot;</span><span class="token punctuation">,</span> <span class="token class-name">UsersAge</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">joinList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">,</span> <span class="token class-name">UsersVo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 执行SQL </span>
<span class="token constant">SELECT</span> users<span class="token punctuation">.</span>user_name<span class="token punctuation">,</span> users<span class="token punctuation">.</span>create_time<span class="token punctuation">,</span> users<span class="token punctuation">.</span>age_id<span class="token punctuation">,</span> users<span class="token punctuation">.</span>user_id<span class="token punctuation">,</span> users_age<span class="token punctuation">.</span>age_doc
	<span class="token punctuation">,</span> users_age<span class="token punctuation">.</span>age_name<span class="token punctuation">,</span> users_age<span class="token punctuation">.</span>id <span class="token constant">AS</span> ageId
<span class="token constant">FROM</span> users users
	<span class="token constant">LEFT</span> <span class="token constant">JOIN</span> users_age users_age <span class="token constant">ON</span> users_age<span class="token punctuation">.</span>id <span class="token operator">=</span> users<span class="token punctuation">.</span>age_id
  
<span class="token comment">// 返回结果</span>
<span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
   <span class="token string">&quot;ageId&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>
   <span class="token string">&quot;createTime&quot;</span><span class="token operator">:</span><span class="token number">1635416270000</span><span class="token punctuation">,</span>
   <span class="token string">&quot;userId&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>
   <span class="token string">&quot;userName&quot;</span><span class="token operator">:</span><span class="token string">&quot;名字啊&quot;</span><span class="token punctuation">,</span>
   <span class="token string">&quot;usersAge&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
     <span class="token string">&quot;ageDoc&quot;</span><span class="token operator">:</span><span class="token string">&quot;90&quot;</span><span class="token punctuation">,</span>
     <span class="token string">&quot;ageName&quot;</span><span class="token operator">:</span><span class="token string">&quot;90&quot;</span><span class="token punctuation">,</span>
     <span class="token string">&quot;id&quot;</span><span class="token operator">:</span><span class="token number">1</span>
   <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">]</span>



</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多对多查询映射" tabindex="-1"><a class="header-anchor" href="#多对多查询映射" aria-hidden="true">#</a> 多对多查询映射</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">JoinLambdaWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UsersAge</span><span class="token punctuation">&gt;</span></span> wrapper <span class="token operator">=</span> <span class="token function">joinLambdaQueryWrapper</span><span class="token punctuation">(</span><span class="token class-name">UsersAge</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

wrapper<span class="token punctuation">.</span><span class="token function">leftJoin</span><span class="token punctuation">(</span><span class="token class-name">Users</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Users</span><span class="token operator">::</span><span class="token function">getAgeId</span><span class="token punctuation">,</span> <span class="token class-name">UsersAge</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">)</span>
  			<span class="token comment">// manyToManySelect 多对多，对应的就是 mybatis中的resultMap中的collection标签</span>
  			<span class="token comment">// 该方法第一个参数代表的是需要映射到的实体类字段</span>
        <span class="token comment">// 第二个参数代表list中的实体类型 例如 List&lt;Users&gt; 这里的实体类型就是Users</span>
  			<span class="token comment">// 第三个就是要查询的字段</span>
        <span class="token punctuation">.</span><span class="token function">manyToManySelect</span><span class="token punctuation">(</span><span class="token class-name">UsersAgesVo</span><span class="token operator">::</span><span class="token function">getUsersList</span><span class="token punctuation">,</span> <span class="token class-name">Users</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>cb<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
           cb<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Users</span><span class="token operator">::</span><span class="token function">getUserName</span><span class="token punctuation">,</span> <span class="token class-name">Users</span><span class="token operator">::</span><span class="token function">getUserId</span><span class="token punctuation">,</span> <span class="token class-name">Users</span><span class="token operator">::</span><span class="token function">getCreateTime</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">joinList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">,</span> <span class="token class-name">UsersAgesVo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 执行SQL</span>
<span class="token constant">SELECT</span> 		   
 users_age<span class="token punctuation">.</span>age_doc<span class="token punctuation">,</span>users_age<span class="token punctuation">.</span>age_name<span class="token punctuation">,</span>users_age<span class="token punctuation">.</span>id<span class="token punctuation">,</span>users<span class="token punctuation">.</span>user_name<span class="token punctuation">,</span>users<span class="token punctuation">.</span>user_id<span class="token punctuation">,</span>users<span class="token punctuation">.</span>create_time
<span class="token constant">FROM</span> users_age <span class="token constant">AS</span> users_age
	<span class="token constant">LEFT</span> <span class="token constant">JOIN</span> users <span class="token constant">AS</span> users <span class="token constant">ON</span> users<span class="token punctuation">.</span>age_id <span class="token operator">=</span> users_age<span class="token punctuation">.</span>id<span class="token punctuation">;</span>

<span class="token comment">// 返回数据</span>
<span class="token punctuation">[</span>
  <span class="token punctuation">{</span><span class="token string">&quot;ageDoc&quot;</span><span class="token operator">:</span><span class="token string">&quot;90&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;ageName&quot;</span><span class="token operator">:</span><span class="token string">&quot;90&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;id&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>
   <span class="token string">&quot;usersList&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span>
     <span class="token punctuation">{</span><span class="token string">&quot;createTime&quot;</span><span class="token operator">:</span><span class="token number">1635416270000</span><span class="token punctuation">,</span><span class="token string">&quot;userId&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;userName&quot;</span><span class="token operator">:</span><span class="token string">&quot;名字啊&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token punctuation">{</span><span class="token string">&quot;createTime&quot;</span><span class="token operator">:</span><span class="token number">1635416270000</span><span class="token punctuation">,</span><span class="token string">&quot;userId&quot;</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&quot;userName&quot;</span><span class="token operator">:</span><span class="token string">&quot;名字2&quot;</span><span class="token punctuation">}</span>
   <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="返回基础类型数据" tabindex="-1"><a class="header-anchor" href="#返回基础类型数据" aria-hidden="true">#</a> 返回基础类型数据</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 当我们只需要查询一个字段，例如id列表，现在支持直接传递基础类型</span>

<span class="token class-name">JoinLambdaWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Users</span><span class="token punctuation">&gt;</span></span> wrapper <span class="token operator">=</span> <span class="token function">joinLambdaQueryWrapper</span><span class="token punctuation">(</span><span class="token class-name">Users</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">Users</span><span class="token operator">::</span><span class="token function">getUserId</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> ids <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">joinList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 输出结果：[1,2]</span>

<span class="token comment">// 也支持返回单个数据类型</span>

<span class="token class-name">JoinLambdaWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Users</span><span class="token punctuation">&gt;</span></span> wrapper <span class="token operator">=</span> <span class="token function">joinLambdaQueryWrapper</span><span class="token punctuation">(</span><span class="token class-name">Users</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">Users</span><span class="token operator">::</span><span class="token function">getUserName</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">Users</span><span class="token operator">::</span><span class="token function">getUserId</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token string">&quot;limit 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">String</span> userName <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">joinGetOne</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 输出结果：&quot;我是名字1&quot;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="根据实体不为空的数据查询" tabindex="-1"><a class="header-anchor" href="#根据实体不为空的数据查询" aria-hidden="true">#</a> 根据实体不为空的数据查询</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 如果需要根据实体查询可以采用这样的实例化</span>
<span class="token class-name">JoinLambdaWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Users</span><span class="token punctuation">&gt;</span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JoinLambdaWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Users</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">&quot;name啊&quot;</span><span class="token punctuation">)</span>
                                                                          <span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 或者可以采用这样的setEntity</span>
<span class="token comment">// wrapper.setEntity(new Users().setUserName(&quot;name啊&quot;));</span>

<span class="token comment">// 这一部分一个参数是join中定义的连接的表，第二个参数是随意的表，但是是要出现构造器中的</span>
wrapper<span class="token punctuation">.</span><span class="token function">leftJoin</span><span class="token punctuation">(</span><span class="token class-name">UsersAge</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">UsersAge</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span><span class="token class-name">Users</span><span class="token operator">::</span><span class="token function">getAgeId</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 然后可以设置多表中的查询条件，这一步和mp一致</span>
wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">UserAge</span><span class="token operator">::</span><span class="token function">getAgeName</span><span class="token punctuation">,</span><span class="token string">&quot;95&quot;</span><span class="token punctuation">)</span>
  		<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">UserAge</span><span class="token operator">::</span><span class="token function">getAgeName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 最后一步 需要使用end方法结束</span>
wrapper<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 执行查询</span>
usersService<span class="token punctuation">.</span><span class="token function">joinList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">,</span><span class="token class-name">UsersVo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 执行SQL </span>
select 
  users<span class="token punctuation">.</span>user_id<span class="token punctuation">,</span>
  users<span class="token punctuation">.</span>user_name<span class="token punctuation">,</span>
  users_age<span class="token punctuation">.</span>age_name
from users users
  left join users_age users_age on users_age<span class="token punctuation">.</span>id <span class="token operator">=</span> users<span class="token punctuation">.</span>age_id
where 
 users<span class="token punctuation">.</span>user_id <span class="token operator">=</span> <span class="token number">1</span>
 and users<span class="token punctuation">.</span>user_name <span class="token operator">=</span> <span class="token char">&#39;name啊&#39;</span>
 and users_age<span class="token punctuation">.</span>age_name <span class="token operator">=</span> <span class="token char">&#39;95&#39;</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="notdefaultselectall-不默认查询主表全部的字段" tabindex="-1"><a class="header-anchor" href="#notdefaultselectall-不默认查询主表全部的字段" aria-hidden="true">#</a> notDefaultSelectAll() 不默认查询主表全部的字段</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 如果需要根据实体查询可以采用这样的实例化</span>
<span class="token class-name">JoinLambdaWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Users</span><span class="token punctuation">&gt;</span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JoinLambdaWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Users</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">&quot;name啊&quot;</span><span class="token punctuation">)</span>
                                                                          <span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 因为默认是查询主表所有查询字段，如果不需要查询主表全部字段就调用该方法</span>
wrapper<span class="token punctuation">.</span><span class="token function">notDefaultSelectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 这一部分一个参数是join中定义的连接的表，第二个参数是随意的表，但是是要出现构造器中的</span>
wrapper<span class="token punctuation">.</span><span class="token function">leftJoin</span><span class="token punctuation">(</span><span class="token class-name">UsersAge</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">UsersAge</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span><span class="token class-name">Users</span><span class="token operator">::</span><span class="token function">getAgeId</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 然后可以设置多表中的查询条件，这一步和mp一致</span>
wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">UserAge</span><span class="token operator">::</span><span class="token function">getAgeName</span><span class="token punctuation">,</span><span class="token string">&quot;95&quot;</span><span class="token punctuation">)</span>
  		<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">UserAge</span><span class="token operator">::</span><span class="token function">getAgeName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 最后一步 需要使用end方法结束</span>
wrapper<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 执行查询</span>
usersService<span class="token punctuation">.</span><span class="token function">joinList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">,</span><span class="token class-name">UsersVo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 执行SQL </span>
select 
  users_age<span class="token punctuation">.</span>age_name
from users users
  left join users_age users_age on users_age<span class="token punctuation">.</span>id <span class="token operator">=</span> users<span class="token punctuation">.</span>age_id
where 
 users<span class="token punctuation">.</span>user_id <span class="token operator">=</span> <span class="token number">1</span>
 and users<span class="token punctuation">.</span>user_name <span class="token operator">=</span> <span class="token char">&#39;name啊&#39;</span>
 and users_age<span class="token punctuation">.</span>age_name <span class="token operator">=</span> <span class="token char">&#39;95&#39;</span>



</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="selectas-查询添加别名" tabindex="-1"><a class="header-anchor" href="#selectas-查询添加别名" aria-hidden="true">#</a> selectAs() 查询添加别名</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">/* 
  selectAs(List&lt;As&lt;T&gt;&gt; columns) 
  selectAs(SFunction&lt;T, ?&gt; column, String alias)
  查询并添加别名
*/</span>
<span class="token comment">// 拿起来我们上面用的哪个实例。我现在需要给ageName给个别名 user_age_name</span>
<span class="token class-name">JoinLambdaWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Users</span><span class="token punctuation">&gt;</span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JoinLambdaWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Users</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
wrapper<span class="token punctuation">.</span><span class="token function">leftJoin</span><span class="token punctuation">(</span><span class="token class-name">UsersAge</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">UsersAge</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span><span class="token class-name">Users</span><span class="token operator">::</span><span class="token function">getAgeId</span><span class="token punctuation">)</span>
  	<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">UserAge</span><span class="token operator">::</span><span class="token function">getAgeName</span><span class="token punctuation">,</span><span class="token string">&quot;95&quot;</span><span class="token punctuation">)</span>
  	<span class="token punctuation">.</span><span class="token function">selectAs</span><span class="token punctuation">(</span><span class="token class-name">UserAge</span><span class="token operator">::</span><span class="token function">getAgeName</span><span class="token punctuation">,</span><span class="token string">&quot;user_age_name&quot;</span><span class="token punctuation">)</span>
  	<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 执行查询</span>
usersService<span class="token punctuation">.</span><span class="token function">joinList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">,</span><span class="token class-name">UsersVo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 执行SQL </span>
select 
  users<span class="token punctuation">.</span>user_id<span class="token punctuation">,</span>
	users<span class="token punctuation">.</span>user_name<span class="token punctuation">,</span>
	users_age<span class="token punctuation">.</span>age_name as user_age_name
from users users
  left join users_age users_age on users_age<span class="token punctuation">.</span>id <span class="token operator">=</span> users<span class="token punctuation">.</span>age_id
where <span class="token punctuation">(</span>
	users_age<span class="token punctuation">.</span>age_name <span class="token operator">=</span> <span class="token char">&#39;95&#39;</span>
<span class="token punctuation">)</span>
    
<span class="token comment">// 现在来个高级需求，我需要查询出users_age表中的两个字段并且需要加一个固定值</span>

<span class="token class-name">JoinLambdaWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Users</span><span class="token punctuation">&gt;</span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JoinLambdaWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Users</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
wrapper<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token class-name">UsersAge</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
  	<span class="token punctuation">.</span><span class="token function">leftJoin</span><span class="token punctuation">(</span><span class="token class-name">UsersAge</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span><span class="token class-name">Users</span><span class="token operator">::</span><span class="token function">getAgeId</span><span class="token punctuation">)</span>
  	<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">UserAge</span><span class="token operator">::</span><span class="token function">getAgeName</span><span class="token punctuation">,</span><span class="token string">&quot;95&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">selectAs</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
      cb<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">UserAge</span><span class="token operator">::</span><span class="token function">getAgeName</span><span class="token punctuation">,</span><span class="token string">&quot;user_age_name&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">UserAge</span><span class="token operator">::</span><span class="token function">getAgeDoc</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;mp永远滴神&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;mpnb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 执行查询</span>
usersService<span class="token punctuation">.</span><span class="token function">joinList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">,</span><span class="token class-name">UsersVo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token comment">// 执行SQL </span>
select 
  users<span class="token punctuation">.</span>user_id<span class="token punctuation">,</span>
	users<span class="token punctuation">.</span>user_name<span class="token punctuation">,</span>
	users_age<span class="token punctuation">.</span>age_name as user_age_name<span class="token punctuation">,</span>
	users_age<span class="token punctuation">.</span>age_doc<span class="token punctuation">,</span>
	<span class="token char">&#39;mp永远滴神&#39;</span> as mpnb
from users users
  left join users_age users_age on users_age<span class="token punctuation">.</span>id <span class="token operator">=</span> users<span class="token punctuation">.</span>age_id
where <span class="token punctuation">(</span>
	users_age<span class="token punctuation">.</span>age_name <span class="token operator">=</span> <span class="token char">&#39;95&#39;</span>
<span class="token punctuation">)</span>

 
<span class="token comment">/*
	这里需要注意啊，如果selectAs那个地方因为是函数接口，所以值是不可以改变的，如果是可变的那么可以采用
	selectAs(Arrays.asList(
			new As(UserAge::getAgeName,&quot;user_age_name&quot;),
			new As(UserAge::getAgeDoc)
	))
*/</span>
    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="selectall-查询全部" tabindex="-1"><a class="header-anchor" href="#selectall-查询全部" aria-hidden="true">#</a> selectAll() 查询全部</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// selectAll()方法，查询出当前表所有的子段</span>
<span class="token class-name">JoinLambdaWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Users</span><span class="token punctuation">&gt;</span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JoinLambdaWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Users</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
wrapper<span class="token punctuation">.</span><span class="token function">leftJoin</span><span class="token punctuation">(</span><span class="token class-name">UsersAge</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">UsersAge</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span><span class="token class-name">Users</span><span class="token operator">::</span><span class="token function">getAgeId</span><span class="token punctuation">)</span>
  	<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">UserAge</span><span class="token operator">::</span><span class="token function">getAgeName</span><span class="token punctuation">,</span><span class="token string">&quot;95&quot;</span><span class="token punctuation">)</span>
  	<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 执行查询</span>
usersService<span class="token punctuation">.</span><span class="token function">joinList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">,</span><span class="token class-name">UsersVo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token comment">// 执行SQL </span>
select 
  users<span class="token punctuation">.</span>user_id<span class="token punctuation">,</span>
	users<span class="token punctuation">.</span>user_name<span class="token punctuation">,</span>
	users_age<span class="token punctuation">.</span>age_name<span class="token punctuation">,</span>
	users_age<span class="token punctuation">.</span>age_doc<span class="token punctuation">,</span>
	users_age<span class="token punctuation">.</span>id
from users users
  left join users_age users_age on users_age<span class="token punctuation">.</span>id <span class="token operator">=</span> users<span class="token punctuation">.</span>age_id
where <span class="token punctuation">(</span>
	users_age<span class="token punctuation">.</span>age_name <span class="token operator">=</span> <span class="token char">&#39;95&#39;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="joinand-join添加条件" tabindex="-1"><a class="header-anchor" href="#joinand-join添加条件" aria-hidden="true">#</a> joinAnd() join添加条件</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   
<span class="token comment">/*
		相信有很多情况需要限制join的表的限制条件那么就需要 
    joinAnd(SFunction&lt;T, Object&gt; field, Object val, int index)
*/</span>

<span class="token class-name">JoinLambdaWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Users</span><span class="token punctuation">&gt;</span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JoinLambdaWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Users</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
wrapper<span class="token punctuation">.</span><span class="token function">leftJoin</span><span class="token punctuation">(</span><span class="token class-name">UsersAge</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">UsersAge</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span><span class="token class-name">Users</span><span class="token operator">::</span><span class="token function">getAgeId</span><span class="token punctuation">)</span>
  	<span class="token punctuation">.</span><span class="token function">joinAnd</span><span class="token punctuation">(</span><span class="token class-name">UsersAge</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 需要注意啊，这个最后一个下标是指的第几个join，因为有时候会出现多个连接，附表连接主表，附表的附表连接附表这样子</span>
  	<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">UserAge</span><span class="token operator">::</span><span class="token function">getAgeName</span><span class="token punctuation">,</span><span class="token string">&quot;95&quot;</span><span class="token punctuation">)</span>
  	<span class="token punctuation">.</span><span class="token function">selectAs</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
      cb<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">UserAge</span><span class="token operator">::</span><span class="token function">getAgeName</span><span class="token punctuation">,</span><span class="token string">&quot;user_age_name&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">UserAge</span><span class="token operator">::</span><span class="token function">getAgeDoc</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;mp永远滴神&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;mpnb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 执行查询</span>
usersService<span class="token punctuation">.</span><span class="token function">joinList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">,</span><span class="token class-name">UsersVo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 执行SQL </span>
select 
  users<span class="token punctuation">.</span>user_id<span class="token punctuation">,</span>
	users<span class="token punctuation">.</span>user_name<span class="token punctuation">,</span>
	users_age<span class="token punctuation">.</span>age_name as user_age_name<span class="token punctuation">,</span>
	users_age<span class="token punctuation">.</span>age_doc<span class="token punctuation">,</span>
	<span class="token char">&#39;mp永远滴神&#39;</span> as mpnb
from users users
  left join users_age users_age on users_age<span class="token punctuation">.</span>id <span class="token operator">=</span> users<span class="token punctuation">.</span>age_id and users_age<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">1</span>
where <span class="token punctuation">(</span>
	users_age<span class="token punctuation">.</span>age_name <span class="token operator">=</span> <span class="token char">&#39;95&#39;</span>
<span class="token punctuation">)</span>
 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="同个接口返回任意实体" tabindex="-1"><a class="header-anchor" href="#同个接口返回任意实体" aria-hidden="true">#</a> 同个接口返回任意实体</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 这个就不得不说了，大多数情况下，一个接口是返回一个实体类型的，但是很多情况下，我们有不同的业务需求，所返回的对象也是不一样的，全部加在一个对象中又太臃肿不好维护，所以就需要这个返回任意定制类型</span>
<span class="token comment">// 使用方法 在最后一个参数中增加上自己的实体类型就行了</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UsersVo</span><span class="token punctuation">&gt;</span></span> usersVoList <span class="token operator">=</span> usersService<span class="token punctuation">.</span><span class="token function">joinList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">,</span><span class="token class-name">UsersVo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义别名-tablealias" tabindex="-1"><a class="header-anchor" href="#自定义别名-tablealias" aria-hidden="true">#</a> 自定义别名 TableAlias</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">/*
	这个自定义别名是某些业务下，比如说在项目中构建了SQL啊，之类的，但是构建的SQL别名一般都是固定的达到通用，
	所以需要在实体中增加别名使用@TableAlias注解就行了，如果没有添加别名 就默认使用表名作为别名 
*/</span>
<span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span><span class="token string">&quot;app_users&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@TableAlias</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Users</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> 
  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="用法注意" tabindex="-1"><a class="header-anchor" href="#用法注意" aria-hidden="true">#</a> 用法注意</h2><p>1.在使用 join service 一系列方法的时候，所有参数都不能传null</p><p>2.这个条件构造器啊，你在join的时候就相当于创建一个新的构造器，你要在这个新的构造器中实现你所有的操作，包括查询，和条件，排序之类的，这样的好处在于，维护好一些，毕竟都放在一起的话，到时候容易迷。</p><p>3.您的start是作者更新的动力，如果用的人多的话，可以留言，我会继续更新并适配mp其他版本，如果各位等不了呢，也可以把源码下载下来，放进你的项目中改一下里面的东西。</p>`,111),c=[e];function o(l,i){return s(),a("div",null,c)}const k=n(p,[["render",o],["__file","MyBatis-Plus联表查询-Mybatis-Plus-Join.html.vue"]]);export{k as default};
