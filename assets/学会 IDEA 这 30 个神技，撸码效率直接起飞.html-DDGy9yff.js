import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as n,c as s,d as a,e as g,b as c,a as e}from"./app-BRQZ0-Iq.js";const r={},o=e('<h1 id="学会-idea-这-30-个神技-撸码效率直接起飞" tabindex="-1"><a class="header-anchor" href="#学会-idea-这-30-个神技-撸码效率直接起飞"><span>学会 IDEA 这 30 个神技，撸码效率直接起飞</span></a></h1><p>IDEA 作为 Java 开发工具的后起之秀，几乎以碾压之势把其他对手甩在了身后，主要原因还是归功于：好用；虽然有点重，但依旧瑕不掩瑜，内置了非常多的功能，大大提高了日常的开发效率，下面汇总了常用的 30 个使用小技巧，学会之后，让你的撸码效率直接起飞...</p><ol><li>查看代码历史版本</li><li>调整 idea 的虚拟内存：</li><li>idea 设置成 eclipse 的快捷键</li><li>设置提示词忽略大小写</li><li>关闭代码检查</li><li>设置文档注释模板</li><li>显示方法分隔符</li><li>设置多行 tab</li><li>快速匹配方法的大括号位置</li><li>代码结尾补全</li><li>模糊搜索方法</li><li>预览某个类的代码</li><li>查看方法在哪里被调用</li><li>代码模板（代码快捷键）</li><li>自动导包、自动移除没用的包</li><li>codota 插件：可以优先显示使用频率较高的类、方法</li><li>快速查看类、字段的注释</li><li>括号颜色区分</li><li>微服务项目中 将不同项目添加到同一个启动窗口</li><li>idea 全局设置 （打开新窗口的设置）</li><li>java mapper 层代码文件和 mapper.xml 文件相互跳转</li><li>设置 idea 背景图片</li><li>maven tree （查看 maven jar 包依赖关系）</li><li>快捷键切换回上一个点击开的 tab</li><li>idea 自带的 ssh 连接工具</li><li>代码调用链路图插件</li><li>获取当前线程 dump</li><li>idea 同个项目不同端口多开</li></ol><blockquote><p>注意：不同 idea 版本菜单、目录可能有细微差别，自己稍加分析都能找到</p></blockquote><h3 id="_1-查看代码历史版本" tabindex="-1"><a class="header-anchor" href="#_1-查看代码历史版本"><span>1.查看代码历史版本</span></a></h3><p>鼠标在需要查看的 java 类 右键 找到<code>Local History</code> &gt;&gt; <code>Show History</code> 点开即可看到历史版本，常用于自己忘记代码改了哪些内容 或需要恢复至某个版本 (注意 只能看近期修改 太久了也是看不到的)</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588592-0.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h3 id="_2-调整-idea-的虚拟内存" tabindex="-1"><a class="header-anchor" href="#_2-调整-idea-的虚拟内存"><span>2. 调整 idea 的虚拟内存</span></a></h3><p>尽管本质都是去改变 .vmoptions 配置文件，但推荐使用<code>Change Memory Settings</code>去调整，选择<code>Edit Custom VM Options</code> 或者在本地磁盘目录更改，通过某些方法破解的 idea 很可能造成 idea 打不开的情况</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588592-1.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h3 id="_3-idea-设置成-eclipse-的快捷键" tabindex="-1"><a class="header-anchor" href="#_3-idea-设置成-eclipse-的快捷键"><span>3. idea 设置成 eclipse 的快捷键</span></a></h3><p>这对 eclipse 转 idea 的开发人员来说 非常友好，这样不需要记两套快捷键</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588592-2.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h3 id="_4-设置提示词忽略大小写" tabindex="-1"><a class="header-anchor" href="#_4-设置提示词忽略大小写"><span>4. 设置提示词忽略大小写</span></a></h3><p>把这个勾去掉，（有的 idea 版本是选择选项 选择 none 即可），例如 String 输入 string 、String 都可以提示</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588592-3.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h3 id="_5-关闭代码检查" tabindex="-1"><a class="header-anchor" href="#_5-关闭代码检查"><span>5. 关闭代码检查</span></a></h3><p>与 eclipse 类似，idea 也可以自己关闭代码检查 减少资源使用，但不推荐全部关闭，（是大佬当我没说），把我们项目中不会使用到的关闭就好了</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588592-4.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h3 id="_6-设置文档注释模板" tabindex="-1"><a class="header-anchor" href="#_6-设置文档注释模板"><span>6. 设置文档注释模板</span></a></h3><p>文档注释快捷键及模板</p>',21),p={href:"https://blog.csdn.net/qq_36268103/article/details/108027486",target:"_blank",rel:"noopener noreferrer"},d=e(`<h3 id="_7-显示方法分隔符" tabindex="-1"><a class="header-anchor" href="#_7-显示方法分隔符"><span>7.显示方法分隔符</span></a></h3><p>方便查看方法与方法之间的间隔，在代码不规范的项目中 很好用！</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588592-5.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h3 id="_8-设置多行-tab" tabindex="-1"><a class="header-anchor" href="#_8-设置多行-tab"><span>8.设置多行 tab</span></a></h3><p>idea 默认是选择显示单行的，我们把这个去掉，就可以显示多行 tab 了，在打开 tab 过多时的场景非常方便！</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588593-6.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588593-7.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p><strong>8.1 tab 过多会自动关闭</strong></p><p><code>settings</code> - <code>editor</code> - <code>General</code> - <code>Editor tabs</code> - <code>tab limit</code> 数值设大就好了</p><h3 id="_9-快速匹配方法的大括号位置" tabindex="-1"><a class="header-anchor" href="#_9-快速匹配方法的大括号位置"><span>9. 快速匹配方法的大括号位置</span></a></h3><p><code>ctrl+[ ctrl+]</code> 可以快速跳转到方法大括号的起止位置，配合方法分隔符使用，不怕找不到方法在哪儿分割了</p><h3 id="_10-代码结尾补全" tabindex="-1"><a class="header-anchor" href="#_10-代码结尾补全"><span>10.代码结尾补全</span></a></h3><p>例如一行代码补全分号，或者是<code>if(xxx)</code> 补全大括号，按<code>ctrl+shift+enter</code> 无需切换鼠标光标，大幅度提升了编码效率</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588593-8.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h3 id="_11-模糊搜索方法" tabindex="-1"><a class="header-anchor" href="#_11-模糊搜索方法"><span>11.模糊搜索方法</span></a></h3><p>例如 People 类里面的 test 方法，按<code>ctrl+shift+alt+n</code>输入<code>Peo.te</code> 就可以查到该方法了，如果觉得这个快捷键难记 也可以按<code>ctrl+shift+r</code> （查找某个文件名的快捷键 下图中的 Files）,再手动选择 Symbols</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588593-9.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h3 id="_12-预览某个类的代码" tabindex="-1"><a class="header-anchor" href="#_12-预览某个类的代码"><span>12.预览某个类的代码</span></a></h3><p>例如我们在 test 类中，有句代码：<code>People p = new People();</code>我们想稍微查看一下 People 这个类，但是 tab 已经够多了，<code>ctrl+alt+b</code> 会打开新的标签，标签多了就混乱了，尤其一堆命名类似的 tab,这时候我们可以按<code>ctrl+shift+i</code> 实现预览功能，不占 tab</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588593-10.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h3 id="_13-查看方法在哪里被调用" tabindex="-1"><a class="header-anchor" href="#_13-查看方法在哪里被调用"><span>13.查看方法在哪里被调用</span></a></h3><p><code>ctrl+alt+h</code> 可以清楚看到方法在哪些地方被调用；在知道这个快捷键之前，都是<code>ctrl+h</code>（idea 默认 <code>ctrl+shift+f</code>）搜索，肉眼找的……</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588593-11.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h3 id="_14-代码模板-代码快捷键" tabindex="-1"><a class="header-anchor" href="#_14-代码模板-代码快捷键"><span>14.代码模板（代码快捷键）</span></a></h3><p>例如 : eclipse 中的 syso 是打印控制台输出 ，但是 idea 默认是 sout , 如果非要改成 syso 可以在<code>Postfix Completion</code>里面设置，类似的 fori 等都是在里面设置</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588593-12.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h3 id="_15-自动导包、自动移除没用的包" tabindex="-1"><a class="header-anchor" href="#_15-自动导包、自动移除没用的包"><span>15.自动导包、自动移除没用的包</span></a></h3><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588593-13.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p><strong>15.1 手动导包 :alt+enter 手动移除未使用包: crtl+alt+o</strong></p><h3 id="_16-codota-插件-可以优先显示使用频率较高的类、方法" tabindex="-1"><a class="header-anchor" href="#_16-codota-插件-可以优先显示使用频率较高的类、方法"><span>16. codota 插件：可以优先显示使用频率较高的类、方法</span></a></h3><p>这个根据个人是否要使用 有的时候工具只能作参考，自己记忆才能保证准确</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588593-14.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h3 id="_17-快速查看类、字段的注释" tabindex="-1"><a class="header-anchor" href="#_17-快速查看类、字段的注释"><span>17. 快速查看类、字段的注释</span></a></h3><p>这是一个很有用的小技巧 按 F2 可以快速查看某个类或某个字段的文档注释 ;基于这点 其它 IDE 应该也是可以快速查看文档注释内容 不仅仅是 idea 特性,这也是为什么阿里编码规范里面会明确声明实体类字段需要用文档注释 而不能使用双斜杠// 注释 ,还记得刚看到这个规范的时候 很不理解 特地去百度 看到有人说就是个习惯问题 很显然不能说服人，直到发现 F2 可以快速查看之后 恍然大悟！</p><h3 id="_18-括号颜色区分" tabindex="-1"><a class="header-anchor" href="#_18-括号颜色区分"><span>18. 括号颜色区分</span></a></h3><p><code>Rainbow Brackets</code> 插件 成对的括号用相同的颜色表示出来了</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588593-15.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h3 id="_19-微服务项目中-将不同项目添加到同一个启动窗口" tabindex="-1"><a class="header-anchor" href="#_19-微服务项目中-将不同项目添加到同一个启动窗口"><span>19. 微服务项目中 将不同项目添加到同一个启动窗口</span></a></h3><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588593-16.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>步骤：<code>View</code> ——&gt;<code>Tool Windows</code> ——&gt; <code>services</code> ——&gt;<code>add services</code></p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588594-17.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h3 id="_20-idea-全局设置-打开新窗口的设置" tabindex="-1"><a class="header-anchor" href="#_20-idea-全局设置-打开新窗口的设置"><span>20. idea 全局设置 （打开新窗口的设置）</span></a></h3><p>例如我们打开新窗口时，maven 配置会恢复 这时就需要对打开新窗口的设置进行修改 达到一个全局的目的。</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588594-18.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>在低版本 idea 中 也是在 File 下 例如 idea2018 是叫<code>other settings</code></p><h3 id="_21-java-mapper-层代码文件和-mapper-xml-文件相互跳转" tabindex="-1"><a class="header-anchor" href="#_21-java-mapper-层代码文件和-mapper-xml-文件相互跳转"><span>21. java mapper 层代码文件和 mapper.xml 文件相互跳转</span></a></h3><p><code>Free MyBatis plugin</code> 插件</p><p>点击绿色箭头可以直接跳转 非常方便</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588594-19.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h3 id="_22-设置-idea-背景图片" tabindex="-1"><a class="header-anchor" href="#_22-设置-idea-背景图片"><span>22. 设置 idea 背景图片</span></a></h3><p>BackgroundImage 插件</p><p>设置喜欢的图片作为背景图</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588594-20.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h3 id="_23-maven-tree-查看-maven-jar-包依赖关系" tabindex="-1"><a class="header-anchor" href="#_23-maven-tree-查看-maven-jar-包依赖关系"><span>23. maven tree （查看 maven jar 包依赖关系）</span></a></h3><p>如果是使用 <code>mvn dependency:tree</code> 命令 , 结果是下图这样 很不方便查看</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588594-21.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>我们可以在 idea 右上角点击这个<code>ShowDependencies</code>按钮 以图片形式展示出来 图片按住 ctrl 和鼠标滑轮 可以放大，这个在排除依赖冲突 查看 jar 包来源时 非常好用</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588594-22.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>有的时候 可能莫名其妙看不到这个图标 ，我们可以点一下设置</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588594-23.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>把这个勾上，它就能显示了，等显示后，再把这个勾去掉</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588594-24.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h3 id="_24-快捷键切换回上一个点击开的-tab" tabindex="-1"><a class="header-anchor" href="#_24-快捷键切换回上一个点击开的-tab"><span>24. 快捷键切换回上一个点击开的 tab</span></a></h3><p>当我们打开了多个 tab 的时候 ， 想要快速回到上一个点击的 tab 中 有的时候肉眼很难找</p><p>我们可以用快捷键 <code>alt + ←</code> 键 (eclipse 版快捷键 idea 默认快捷键需要自测) ，有的时候我们在后面 tab 编辑了内容 按一次可能不够 需要再多按几次 ,相应的 <code>alt + →</code>切换到下一个点击的 tab</p><blockquote><p>常见应用场景：debug 发生类跳转时 、利用快捷键在其它类中创建方法时</p></blockquote><p>即使两个 tab 不相邻 也可以切换回去</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588594-25.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h3 id="_25-idea-自带的-ssh-连接工具" tabindex="-1"><a class="header-anchor" href="#_25-idea-自带的-ssh-连接工具"><span>25. idea 自带的 ssh 连接工具</span></a></h3><blockquote><p>类似的 idea 还有自带的数据库连接工具 但是视图界面并不如 Navicat 所以很多人都不选择用</p></blockquote><ul><li>第一步：配置账号密码</li></ul><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588594-26.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><ul><li>第二步：开启 ssh 会话</li></ul><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588594-27.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h3 id="_26-代码调用链路图插件" tabindex="-1"><a class="header-anchor" href="#_26-代码调用链路图插件"><span>26. 代码调用链路图插件</span></a></h3><p><strong>SequenceDiagram 插件</strong></p><p>这其实是本文第 13 点的上位替代方案，idea 自带的快捷键查看代码调用，只是以菜单形式展示，不太直观，如果是自己写的代码或比较规范的代码，那用自带的也就无所谓，如果是比较复杂的源码或不规范的代码，那使用 SequenceDiagram 会直观特别多。</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588594-28.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>在要查看的 java 文件鼠标右键，点击 <code>Sequence Diagram</code></p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588594-29.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>效果示例：</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588594-30.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h3 id="_27-获取当前线程-dump" tabindex="-1"><a class="header-anchor" href="#_27-获取当前线程-dump"><span>27. 获取当前线程 dump</span></a></h3><p>在断点调试的时候，我们可以通过点击下图红色箭头指向的相机图标，获取当前线程的 dump 信息。</p><p>这个功能有什么用呢？我们可以通过线程名，分析当前是哪个线程执行的，在多线程环境下对代码运行分析起到辅助作用。</p><p>比如下图 1， <code>run()</code>方法是通过 main 主线程执行的，只是方法调用，并没有启动多线程（这是我们熟知结论的实践证明）</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588594-31.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>当我们把 run 方法改成<code>start()</code>方法时，可以看到是线程 thread0 执行的。</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588595-32.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h3 id="_28-idea-同个项目不同端口多开" tabindex="-1"><a class="header-anchor" href="#_28-idea-同个项目不同端口多开"><span>28. idea 同个项目不同端口多开</span></a></h3><p>这是个非常实用的功能，可以模拟集群 测试负载均衡。</p><p>此外 在开发阶段也是非常好用，开发过程中，让别人直接连自己本地测试 是不是非常方便？</p><p>那自己又想打断点调试 会影响别人 怎么办呢 ？这个时候多开的作用就体现出来了！</p><p>网上很多方法提到勾选 <code>Allow parallel run</code> (不同版本 idea 名称不一样) ，我也亲眼见过有老师是可以多开启动的， 但我本地启动发现每次都会同时同端口启动多个，不知道是版本问题还是操作问题，这里我用的是另一种有效的方法：</p><p>在 <code>VM options</code> 加上</p><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code># 8993是区别于 application.yml 配置中 port 的另一个端口，达到不同端口多开的效果
-Dserver.port=8993
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588595-33.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure>`,97);function b(h,m){const i=l("ExternalLinkIcon");return n(),s("div",null,[o,a("blockquote",null,[a("p",null,[a("a",p,[g("https://blog.csdn.net/qq_36268103/article/details/108027486"),c(i)])])]),d])}const _=t(r,[["render",b],["__file","学会 IDEA 这 30 个神技，撸码效率直接起飞.html.vue"]]),x=JSON.parse('{"path":"/dev/%E5%AD%A6%E4%BC%9A%20IDEA%20%E8%BF%99%2030%20%E4%B8%AA%E7%A5%9E%E6%8A%80%EF%BC%8C%E6%92%B8%E7%A0%81%E6%95%88%E7%8E%87%E7%9B%B4%E6%8E%A5%E8%B5%B7%E9%A3%9E.html","title":"学会 IDEA 这 30 个神技，撸码效率直接起飞","lang":"zh-CN","frontmatter":{"author":"xlc520","title":"学会 IDEA 这 30 个神技，撸码效率直接起飞","excerpt":null,"description":"学会 IDEA 这 30 个神技，撸码效率直接起飞 IDEA 作为 Java 开发工具的后起之秀，几乎以碾压之势把其他对手甩在了身后，主要原因还是归功于：好用；虽然有点重，但依旧瑕不掩瑜，内置了非常多的功能，大大提高了日常的开发效率，下面汇总了常用的 30 个使用小技巧，学会之后，让你的撸码效率直接起飞... 查看代码历史版本 调整 idea 的虚拟内...","date":"2023-01-21T00:00:00.000Z","category":"Java","tag":"Java","article":true,"timeline":true,"icon":"java","head":[["meta",{"property":"og:url","content":"https://blog.ciberviler.top/dev/%E5%AD%A6%E4%BC%9A%20IDEA%20%E8%BF%99%2030%20%E4%B8%AA%E7%A5%9E%E6%8A%80%EF%BC%8C%E6%92%B8%E7%A0%81%E6%95%88%E7%8E%87%E7%9B%B4%E6%8E%A5%E8%B5%B7%E9%A3%9E.html"}],["meta",{"property":"og:site_name","content":"StudyNote - 丰富的知识笔记库"}],["meta",{"property":"og:title","content":"学会 IDEA 这 30 个神技，撸码效率直接起飞"}],["meta",{"property":"og:description","content":"学会 IDEA 这 30 个神技，撸码效率直接起飞 IDEA 作为 Java 开发工具的后起之秀，几乎以碾压之势把其他对手甩在了身后，主要原因还是归功于：好用；虽然有点重，但依旧瑕不掩瑜，内置了非常多的功能，大大提高了日常的开发效率，下面汇总了常用的 30 个使用小技巧，学会之后，让你的撸码效率直接起飞... 查看代码历史版本 调整 idea 的虚拟内..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588592-0.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-27T13:32:36.000Z"}],["meta",{"property":"article:author","content":"xlc520"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2023-01-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-27T13:32:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"学会 IDEA 这 30 个神技，撸码效率直接起飞\\",\\"image\\":[\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588592-0.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588592-1.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588592-2.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588592-3.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588592-4.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588592-5.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588593-6.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588593-7.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588593-8.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588593-9.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588593-10.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588593-11.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588593-12.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588593-13.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588593-14.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588593-15.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588593-16.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588594-17.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588594-18.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588594-19.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588594-20.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588594-21.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588594-22.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588594-23.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588594-24.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588594-25.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588594-26.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588594-27.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588594-28.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588594-29.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588594-30.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588594-31.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588595-32.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1674302588595-33.png\\"],\\"datePublished\\":\\"2023-01-21T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-27T13:32:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xlc520\\"}]}"]]},"headers":[{"level":3,"title":"1.查看代码历史版本","slug":"_1-查看代码历史版本","link":"#_1-查看代码历史版本","children":[]},{"level":3,"title":"2. 调整 idea 的虚拟内存","slug":"_2-调整-idea-的虚拟内存","link":"#_2-调整-idea-的虚拟内存","children":[]},{"level":3,"title":"3. idea 设置成 eclipse 的快捷键","slug":"_3-idea-设置成-eclipse-的快捷键","link":"#_3-idea-设置成-eclipse-的快捷键","children":[]},{"level":3,"title":"4. 设置提示词忽略大小写","slug":"_4-设置提示词忽略大小写","link":"#_4-设置提示词忽略大小写","children":[]},{"level":3,"title":"5. 关闭代码检查","slug":"_5-关闭代码检查","link":"#_5-关闭代码检查","children":[]},{"level":3,"title":"6. 设置文档注释模板","slug":"_6-设置文档注释模板","link":"#_6-设置文档注释模板","children":[]},{"level":3,"title":"7.显示方法分隔符","slug":"_7-显示方法分隔符","link":"#_7-显示方法分隔符","children":[]},{"level":3,"title":"8.设置多行 tab","slug":"_8-设置多行-tab","link":"#_8-设置多行-tab","children":[]},{"level":3,"title":"9. 快速匹配方法的大括号位置","slug":"_9-快速匹配方法的大括号位置","link":"#_9-快速匹配方法的大括号位置","children":[]},{"level":3,"title":"10.代码结尾补全","slug":"_10-代码结尾补全","link":"#_10-代码结尾补全","children":[]},{"level":3,"title":"11.模糊搜索方法","slug":"_11-模糊搜索方法","link":"#_11-模糊搜索方法","children":[]},{"level":3,"title":"12.预览某个类的代码","slug":"_12-预览某个类的代码","link":"#_12-预览某个类的代码","children":[]},{"level":3,"title":"13.查看方法在哪里被调用","slug":"_13-查看方法在哪里被调用","link":"#_13-查看方法在哪里被调用","children":[]},{"level":3,"title":"14.代码模板（代码快捷键）","slug":"_14-代码模板-代码快捷键","link":"#_14-代码模板-代码快捷键","children":[]},{"level":3,"title":"15.自动导包、自动移除没用的包","slug":"_15-自动导包、自动移除没用的包","link":"#_15-自动导包、自动移除没用的包","children":[]},{"level":3,"title":"16. codota 插件：可以优先显示使用频率较高的类、方法","slug":"_16-codota-插件-可以优先显示使用频率较高的类、方法","link":"#_16-codota-插件-可以优先显示使用频率较高的类、方法","children":[]},{"level":3,"title":"17. 快速查看类、字段的注释","slug":"_17-快速查看类、字段的注释","link":"#_17-快速查看类、字段的注释","children":[]},{"level":3,"title":"18. 括号颜色区分","slug":"_18-括号颜色区分","link":"#_18-括号颜色区分","children":[]},{"level":3,"title":"19. 微服务项目中 将不同项目添加到同一个启动窗口","slug":"_19-微服务项目中-将不同项目添加到同一个启动窗口","link":"#_19-微服务项目中-将不同项目添加到同一个启动窗口","children":[]},{"level":3,"title":"20. idea 全局设置 （打开新窗口的设置）","slug":"_20-idea-全局设置-打开新窗口的设置","link":"#_20-idea-全局设置-打开新窗口的设置","children":[]},{"level":3,"title":"21. java mapper 层代码文件和 mapper.xml 文件相互跳转","slug":"_21-java-mapper-层代码文件和-mapper-xml-文件相互跳转","link":"#_21-java-mapper-层代码文件和-mapper-xml-文件相互跳转","children":[]},{"level":3,"title":"22. 设置 idea 背景图片","slug":"_22-设置-idea-背景图片","link":"#_22-设置-idea-背景图片","children":[]},{"level":3,"title":"23. maven tree （查看 maven jar 包依赖关系）","slug":"_23-maven-tree-查看-maven-jar-包依赖关系","link":"#_23-maven-tree-查看-maven-jar-包依赖关系","children":[]},{"level":3,"title":"24. 快捷键切换回上一个点击开的 tab","slug":"_24-快捷键切换回上一个点击开的-tab","link":"#_24-快捷键切换回上一个点击开的-tab","children":[]},{"level":3,"title":"25. idea 自带的 ssh 连接工具","slug":"_25-idea-自带的-ssh-连接工具","link":"#_25-idea-自带的-ssh-连接工具","children":[]},{"level":3,"title":"26. 代码调用链路图插件","slug":"_26-代码调用链路图插件","link":"#_26-代码调用链路图插件","children":[]},{"level":3,"title":"27. 获取当前线程 dump","slug":"_27-获取当前线程-dump","link":"#_27-获取当前线程-dump","children":[]},{"level":3,"title":"28. idea 同个项目不同端口多开","slug":"_28-idea-同个项目不同端口多开","link":"#_28-idea-同个项目不同端口多开","children":[]}],"git":{"createdTime":1674302857000,"updatedTime":1714224756000,"contributors":[{"name":"xlc520","email":"2215400217@qq.com","commits":5},{"name":"xlc","email":"2215400217@qq.com","commits":2}]},"readingTime":{"minutes":9.46,"words":2838},"filePathRelative":"dev/学会 IDEA 这 30 个神技，撸码效率直接起飞.md","localizedDate":"2023年1月21日","autoDesc":true}');export{_ as comp,x as data};
