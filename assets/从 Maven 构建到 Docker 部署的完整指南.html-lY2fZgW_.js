const e=JSON.parse('{"key":"v-575616f9","path":"/dev/%E4%BB%8E%20Maven%20%E6%9E%84%E5%BB%BA%E5%88%B0%20Docker%20%E9%83%A8%E7%BD%B2%E7%9A%84%E5%AE%8C%E6%95%B4%E6%8C%87%E5%8D%97.html","title":"从 Maven 构建到 Docker 部署的完整指南","lang":"zh-CN","frontmatter":{"author":"xlc520","title":"从 Maven 构建到 Docker 部署的完整指南","description":"从 Maven 构建到 Docker 部署的完整指南 1 使用Dockerfile部署 # 使用Java 8基础镜像 FROM java:8 LABEL authors=\\"mabh\\" # 设置时区为Asia/Shanghai，可以根据需要更改 ENV TIME_ZONE=Asia/Shanghai # 更新时区 RUN ln -snf /usr/share/zoneinfo/$TIME_ZONE /etc/localtime &amp;&amp; echo $TIME_ZONE &gt; /etc/timezone # 设置容器内的工作目录 WORKDIR /app # 将构建好的Spring Boot应用jar文件复制到镜像中 COPY ./${project.build.finalName}.jar /app/ COPY ./application.yml /app/ COPY ./application-${activatedProperties}.yml /app/ # 暴露端口 EXPOSE 8080 # 设置Java虚拟机初始内存和最大内存 #-server: 启用Java HotSpot虚拟机的服务器模式，该模式针对长时间运行的应用程序进行了优化以提高性能。 #-Xms512m: 设置Java堆的初始大小为512兆字节。 #-Xmx1024m: 设置Java堆的最大大小为1024兆字节。 #-XX:+UseG1GC: 启用G1垃圾收集器。G1（Garbage-First）是一种相对新的垃圾收集器，旨在提供更可预测的停顿时间和更好的性能。 #-XX:+HeapDumpOnOutOfMemoryError: 在发生内存溢出错误时生成堆转储文件。这对于分析内存问题非常有用。 #-XX:HeapDumpPath=/dumps/oom_dump.hprof: 指定内存转储文件。在这个例子中，堆转储文件将被写入 /dumps/oom_dump.hprof 目录文件中。 ENV JAVA_OPTS=\\"-server -Xms512m -Xmx1024m -XX:+UseG1GC -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/dumps/oom_dump.hprof\\" ENV APP_ENV=\\"--spring.profiles.active=${activatedProperties}\\" # 创建内存转储文件和日志文件存储目录 RUN mkdir /app/dumps RUN mkdir /app/logs # 设置容器启动时执行的命令 ENTRYPOINT [\\"sh\\", \\"-c\\", \\"java $JAVA_OPTS -Djava.security.egd=file:/dev/./urandom -Dlogging.file=/app/logs/application.log -jar /app/${project.build.finalName}.jar $APP_ENV\\"]","date":"2023-12-02T00:00:00.000Z","category":"Java","tag":"Java","article":true,"timeline":true,"icon":"java","head":[["meta",{"property":"og:url","content":"https://blog.ciberviler.top/dev/%E4%BB%8E%20Maven%20%E6%9E%84%E5%BB%BA%E5%88%B0%20Docker%20%E9%83%A8%E7%BD%B2%E7%9A%84%E5%AE%8C%E6%95%B4%E6%8C%87%E5%8D%97.html"}],["meta",{"property":"og:site_name","content":"StudyNote"}],["meta",{"property":"og:title","content":"从 Maven 构建到 Docker 部署的完整指南"}],["meta",{"property":"og:description","content":"从 Maven 构建到 Docker 部署的完整指南 1 使用Dockerfile部署 # 使用Java 8基础镜像 FROM java:8 LABEL authors=\\"mabh\\" # 设置时区为Asia/Shanghai，可以根据需要更改 ENV TIME_ZONE=Asia/Shanghai # 更新时区 RUN ln -snf /usr/share/zoneinfo/$TIME_ZONE /etc/localtime &amp;&amp; echo $TIME_ZONE &gt; /etc/timezone # 设置容器内的工作目录 WORKDIR /app # 将构建好的Spring Boot应用jar文件复制到镜像中 COPY ./${project.build.finalName}.jar /app/ COPY ./application.yml /app/ COPY ./application-${activatedProperties}.yml /app/ # 暴露端口 EXPOSE 8080 # 设置Java虚拟机初始内存和最大内存 #-server: 启用Java HotSpot虚拟机的服务器模式，该模式针对长时间运行的应用程序进行了优化以提高性能。 #-Xms512m: 设置Java堆的初始大小为512兆字节。 #-Xmx1024m: 设置Java堆的最大大小为1024兆字节。 #-XX:+UseG1GC: 启用G1垃圾收集器。G1（Garbage-First）是一种相对新的垃圾收集器，旨在提供更可预测的停顿时间和更好的性能。 #-XX:+HeapDumpOnOutOfMemoryError: 在发生内存溢出错误时生成堆转储文件。这对于分析内存问题非常有用。 #-XX:HeapDumpPath=/dumps/oom_dump.hprof: 指定内存转储文件。在这个例子中，堆转储文件将被写入 /dumps/oom_dump.hprof 目录文件中。 ENV JAVA_OPTS=\\"-server -Xms512m -Xmx1024m -XX:+UseG1GC -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/dumps/oom_dump.hprof\\" ENV APP_ENV=\\"--spring.profiles.active=${activatedProperties}\\" # 创建内存转储文件和日志文件存储目录 RUN mkdir /app/dumps RUN mkdir /app/logs # 设置容器启动时执行的命令 ENTRYPOINT [\\"sh\\", \\"-c\\", \\"java $JAVA_OPTS -Djava.security.egd=file:/dev/./urandom -Dlogging.file=/app/logs/application.log -jar /app/${project.build.finalName}.jar $APP_ENV\\"]"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-07T11:49:56.000Z"}],["meta",{"property":"article:author","content":"xlc520"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2023-12-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-07T11:49:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"从 Maven 构建到 Docker 部署的完整指南\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-12-02T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-07T11:49:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xlc520\\"}]}"]]},"headers":[{"level":2,"title":"1 使用Dockerfile部署","slug":"_1-使用dockerfile部署","link":"#_1-使用dockerfile部署","children":[]},{"level":2,"title":"2 管理 Docker 容器：简洁高效的脚本方法","slug":"_2-管理-docker-容器-简洁高效的脚本方法","link":"#_2-管理-docker-容器-简洁高效的脚本方法","children":[]},{"level":2,"title":"3 集成 Docker 管理脚本与 Maven：完善构建流程","slug":"_3-集成-docker-管理脚本与-maven-完善构建流程","link":"#_3-集成-docker-管理脚本与-maven-完善构建流程","children":[{"level":3,"title":"1.执行阶段","slug":"_1-执行阶段","link":"#_1-执行阶段","children":[]},{"level":3,"title":"2.资源配置","slug":"_2-资源配置","link":"#_2-资源配置","children":[]}]},{"level":2,"title":"4 从 Dockerfile 到 Docker-Compose：简化和自动化应用部署","slug":"_4-从-dockerfile-到-docker-compose-简化和自动化应用部署","link":"#_4-从-dockerfile-到-docker-compose-简化和自动化应用部署","children":[{"level":3,"title":"动态配置与服务管理","slug":"动态配置与服务管理","link":"#动态配置与服务管理","children":[]},{"level":3,"title":"数据管理与环境优化","slug":"数据管理与环境优化","link":"#数据管理与环境优化","children":[]},{"level":3,"title":"稳定性与日志管理","slug":"稳定性与日志管理","link":"#稳定性与日志管理","children":[]}]}],"git":{"createdTime":1701949796000,"updatedTime":1701949796000,"contributors":[{"name":"xlc","email":"2215400217@qq.com","commits":1}]},"readingTime":{"minutes":7.48,"words":2244},"filePathRelative":"dev/从 Maven 构建到 Docker 部署的完整指南.md","localizedDate":"2023年12月2日","excerpt":"<h1> 从 Maven 构建到 Docker 部署的完整指南</h1>\\n<h2> 1 使用Dockerfile部署</h2>\\n<div class=\\"language-docker line-numbers-mode\\" data-ext=\\"docker\\"><pre class=\\"language-docker\\"><code><span class=\\"token comment\\"># 使用Java 8基础镜像</span>\\n<span class=\\"token instruction\\"><span class=\\"token keyword\\">FROM</span> java:8</span>\\n<span class=\\"token instruction\\"><span class=\\"token keyword\\">LABEL</span> authors=<span class=\\"token string\\">\\"mabh\\"</span></span>\\n\\n<span class=\\"token comment\\"># 设置时区为Asia/Shanghai，可以根据需要更改</span>\\n<span class=\\"token instruction\\"><span class=\\"token keyword\\">ENV</span> TIME_ZONE=Asia/Shanghai</span>\\n\\n<span class=\\"token comment\\"># 更新时区</span>\\n<span class=\\"token instruction\\"><span class=\\"token keyword\\">RUN</span> ln -snf /usr/share/zoneinfo/<span class=\\"token variable\\">$TIME_ZONE</span> /etc/localtime &amp;&amp; echo <span class=\\"token variable\\">$TIME_ZONE</span> &gt; /etc/timezone</span>\\n\\n<span class=\\"token comment\\"># 设置容器内的工作目录</span>\\n<span class=\\"token instruction\\"><span class=\\"token keyword\\">WORKDIR</span> /app</span>\\n\\n<span class=\\"token comment\\"># 将构建好的Spring Boot应用jar文件复制到镜像中</span>\\n<span class=\\"token instruction\\"><span class=\\"token keyword\\">COPY</span> ./<span class=\\"token variable\\">${project.build.finalName}</span>.jar /app/</span>\\n\\n<span class=\\"token instruction\\"><span class=\\"token keyword\\">COPY</span> ./application.yml /app/</span>\\n<span class=\\"token instruction\\"><span class=\\"token keyword\\">COPY</span> ./application-<span class=\\"token variable\\">${activatedProperties}</span>.yml /app/</span>\\n\\n<span class=\\"token comment\\"># 暴露端口</span>\\n<span class=\\"token instruction\\"><span class=\\"token keyword\\">EXPOSE</span> 8080</span>\\n\\n\\n<span class=\\"token comment\\"># 设置Java虚拟机初始内存和最大内存</span>\\n<span class=\\"token comment\\">#-server: 启用Java HotSpot虚拟机的服务器模式，该模式针对长时间运行的应用程序进行了优化以提高性能。</span>\\n<span class=\\"token comment\\">#-Xms512m: 设置Java堆的初始大小为512兆字节。</span>\\n<span class=\\"token comment\\">#-Xmx1024m: 设置Java堆的最大大小为1024兆字节。</span>\\n<span class=\\"token comment\\">#-XX:+UseG1GC: 启用G1垃圾收集器。G1（Garbage-First）是一种相对新的垃圾收集器，旨在提供更可预测的停顿时间和更好的性能。</span>\\n<span class=\\"token comment\\">#-XX:+HeapDumpOnOutOfMemoryError: 在发生内存溢出错误时生成堆转储文件。这对于分析内存问题非常有用。</span>\\n<span class=\\"token comment\\">#-XX:HeapDumpPath=/dumps/oom_dump.hprof: 指定内存转储文件。在这个例子中，堆转储文件将被写入 /dumps/oom_dump.hprof 目录文件中。</span>\\n<span class=\\"token instruction\\"><span class=\\"token keyword\\">ENV</span> JAVA_OPTS=<span class=\\"token string\\">\\"-server -Xms512m -Xmx1024m -XX:+UseG1GC -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/dumps/oom_dump.hprof\\"</span></span>\\n\\n<span class=\\"token instruction\\"><span class=\\"token keyword\\">ENV</span> APP_ENV=<span class=\\"token string\\">\\"--spring.profiles.active=${activatedProperties}\\"</span></span>\\n<span class=\\"token comment\\"># 创建内存转储文件和日志文件存储目录</span>\\n<span class=\\"token instruction\\"><span class=\\"token keyword\\">RUN</span> mkdir /app/dumps</span>\\n<span class=\\"token instruction\\"><span class=\\"token keyword\\">RUN</span> mkdir /app/logs</span>\\n\\n<span class=\\"token comment\\"># 设置容器启动时执行的命令</span>\\n<span class=\\"token instruction\\"><span class=\\"token keyword\\">ENTRYPOINT</span> [<span class=\\"token string\\">\\"sh\\"</span>, <span class=\\"token string\\">\\"-c\\"</span>, <span class=\\"token string\\">\\"java $JAVA_OPTS -Djava.security.egd=file:/dev/./urandom -Dlogging.file=/app/logs/application.log -jar /app/${project.build.finalName}.jar $APP_ENV\\"</span>]</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
