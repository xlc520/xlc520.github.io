import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,a as t}from"./app-Clq2mtAP.js";const p={},e=t(`<h1 id="java-中-comparable-和-comparator" tabindex="-1"><a class="header-anchor" href="#java-中-comparable-和-comparator"><span>Java 中 Comparable 和 Comparator</span></a></h1><p>Comparable 和 Comparator 都是接口，可以用于对集合元素进行排序。</p><p>然而，Comparable 和 Comparator 接口之间有许多不同之处，如下所示：</p><table><thead><tr><th>Comparable</th><th>Comparator</th></tr></thead><tbody><tr><td>1) Comparable 提供单一的排序顺序。换句话说，我们可以根据单个元素（例如 id、name 和 price）对集合进行排序。</td><td>Comparator 提供多个排序顺序。换句话说，我们可以根据多个元素（例如 id、name 和 price 等）对集合进行排序。</td></tr><tr><td>2) Comparable 影响原始类，即实际类被修改。</td><td>Comparator 不影响原始类，即实际类不被修改。</td></tr><tr><td>3) Comparable 提供 compareTo()方法来排序元素。</td><td>Comparator 提供 compare()方法来排序元素。</td></tr><tr><td>4) Comparable 位于 java.lang 包中。</td><td>Comparator 位于 java.util 包中。</td></tr><tr><td>5) 我们可以使用 Collections.sort(List)方法对 Comparable 类型的列表元素进行排序。</td><td>我们可以使用 Collections.sort(List, Comparator)方法对 Comparator 类型的列表元素进行排序。</td></tr></tbody></table><h2 id="java-comparable-示例" tabindex="-1"><a class="header-anchor" href="#java-comparable-示例"><span>Java Comparable 示例</span></a></h2><p>让我们看一个使用 Comparable 接口根据年龄对列表元素进行排序的示例。</p><p>文件：TestSort3.java</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//Java Program to demonstrate the use of Java Comparable. </span>
<span class="token comment">//Creating a class which implements Comparable Interface </span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span> 
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span> 
<span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span> 
    <span class="token keyword">int</span> rollno<span class="token punctuation">;</span> 
    <span class="token class-name">String</span> name<span class="token punctuation">;</span> 
    <span class="token keyword">int</span> age<span class="token punctuation">;</span> 
    <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> rollno<span class="token punctuation">,</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span> 
        <span class="token keyword">this</span><span class="token punctuation">.</span>rollno<span class="token operator">=</span>rollno<span class="token punctuation">;</span> 
        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span> 
        <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Student</span> st<span class="token punctuation">)</span><span class="token punctuation">{</span> 
        <span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token operator">==</span>st<span class="token punctuation">.</span>age<span class="token punctuation">)</span> 
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> 
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token operator">&gt;</span>st<span class="token punctuation">.</span>age<span class="token punctuation">)</span> 
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> 
        <span class="token keyword">else</span> 
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span> 
<span class="token comment">//Creating a test class to sort the elements </span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSort3</span><span class="token punctuation">{</span> 
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> al<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        al<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token string">&quot;Vijay&quot;</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        al<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">106</span><span class="token punctuation">,</span><span class="token string">&quot;Ajay&quot;</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        al<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token string">&quot;Jai&quot;</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>al<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Student</span> st<span class="token operator">:</span>al<span class="token punctuation">)</span><span class="token punctuation">{</span> 
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span>rollno<span class="token operator">+</span><span class="token string">&quot; &quot;</span><span class="token operator">+</span>st<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">&quot; &quot;</span><span class="token operator">+</span>st<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>105 Jai 21101 Vijay 23106 Ajay 27
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="java-comparator-示例" tabindex="-1"><a class="header-anchor" href="#java-comparator-示例"><span>Java Comparator 示例</span></a></h2><p>让我们看一个使用 Java Comparator 接口的示例，其中我们使用不同的比较器对列表的元素进行排序。</p><p>Student.java</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span> 
    <span class="token keyword">int</span> rollno<span class="token punctuation">;</span> 
    <span class="token class-name">String</span> name<span class="token punctuation">;</span> 
    <span class="token keyword">int</span> age<span class="token punctuation">;</span> 
    <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> rollno<span class="token punctuation">,</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span> 
        <span class="token keyword">this</span><span class="token punctuation">.</span>rollno<span class="token operator">=</span>rollno<span class="token punctuation">;</span> 
        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span> 
        <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>AgeComparator.java</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span> 
<span class="token keyword">class</span> <span class="token class-name">AgeComparator</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span> 
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Student</span> s1<span class="token punctuation">,</span><span class="token class-name">Student</span> s2<span class="token punctuation">)</span><span class="token punctuation">{</span> 
        <span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>age<span class="token operator">==</span>s2<span class="token punctuation">.</span>age<span class="token punctuation">)</span> 
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> 
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>age<span class="token operator">&gt;</span>s2<span class="token punctuation">.</span>age<span class="token punctuation">)</span> 
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> 
        <span class="token keyword">else</span> 
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>NameComparator.java</p><p>该类基于姓名提供比较逻辑。在这种情况下，我们使用 String 类的 compareTo()方法，该方法内部提供了比较逻辑。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span> 
<span class="token keyword">class</span> <span class="token class-name">NameComparator</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span> 
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Student</span> s1<span class="token punctuation">,</span><span class="token class-name">Student</span> s2<span class="token punctuation">)</span><span class="token punctuation">{</span> 
        <span class="token keyword">return</span> s1<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TestComparator.java</p><p>在这个类中，我们通过按照姓名和年龄进行排序来打印对象的值。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//Java Program to demonstrate the use of Java Comparator </span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span> 
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span> 
<span class="token keyword">class</span> <span class="token class-name">TestComparator</span><span class="token punctuation">{</span> 
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
        <span class="token comment">//Creating a list of students </span>
        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> al<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        al<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token string">&quot;Vijay&quot;</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        al<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">106</span><span class="token punctuation">,</span><span class="token string">&quot;Ajay&quot;</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        al<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token string">&quot;Jai&quot;</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Sorting by Name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token comment">//Using NameComparator to sort the elements </span>
        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>al<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">NameComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token comment">//Traversing the elements of list </span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Student</span> st<span class="token operator">:</span> al<span class="token punctuation">)</span><span class="token punctuation">{</span> 
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span>rollno<span class="token operator">+</span><span class="token string">&quot; &quot;</span><span class="token operator">+</span>st<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">&quot; &quot;</span><span class="token operator">+</span>st<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span> 

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;sorting by Age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token comment">//Using AgeComparator to sort the elements </span>
        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>al<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">AgeComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token comment">//Traversing the list again </span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Student</span> st<span class="token operator">:</span> al<span class="token punctuation">)</span><span class="token punctuation">{</span> 
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span>rollno<span class="token operator">+</span><span class="token string">&quot; &quot;</span><span class="token operator">+</span>st<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">&quot; &quot;</span><span class="token operator">+</span>st<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>Sorting by Name106 Ajay 27105 Jai 21101 Vijay 23
Sorting by Age105 Jai 21101 Vijay 23106 Ajay 27
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,24),o=[e];function c(l,i){return a(),s("div",null,o)}const k=n(p,[["render",c],["__file","Java中Comparable和Comparator.html.vue"]]),d=JSON.parse('{"path":"/dev/Java%E4%B8%ADComparable%E5%92%8CComparator.html","title":"Java中Comparable和Comparator","lang":"zh-CN","frontmatter":{"author":"xlc520","title":"Java中Comparable和Comparator","excerpt":null,"description":"Java 中 Comparable 和 Comparator Comparable 和 Comparator 都是接口，可以用于对集合元素进行排序。 然而，Comparable 和 Comparator 接口之间有许多不同之处，如下所示： Java Comparable 示例 让我们看一个使用 Comparable 接口根据年龄对列表元素进行排序的示例...","date":"2023-10-16T00:00:00.000Z","category":"Java","tag":"Java","article":true,"timeline":true,"icon":"java","head":[["meta",{"property":"og:url","content":"https://blog.ciberviler.top/dev/Java%E4%B8%ADComparable%E5%92%8CComparator.html"}],["meta",{"property":"og:site_name","content":"StudyNote - 丰富的知识笔记库"}],["meta",{"property":"og:title","content":"Java中Comparable和Comparator"}],["meta",{"property":"og:description","content":"Java 中 Comparable 和 Comparator Comparable 和 Comparator 都是接口，可以用于对集合元素进行排序。 然而，Comparable 和 Comparator 接口之间有许多不同之处，如下所示： Java Comparable 示例 让我们看一个使用 Comparable 接口根据年龄对列表元素进行排序的示例..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-27T13:32:36.000Z"}],["meta",{"property":"article:author","content":"xlc520"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2023-10-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-27T13:32:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中Comparable和Comparator\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-16T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-27T13:32:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xlc520\\"}]}"]]},"headers":[{"level":2,"title":"Java Comparable 示例","slug":"java-comparable-示例","link":"#java-comparable-示例","children":[]},{"level":2,"title":"Java Comparator 示例","slug":"java-comparator-示例","link":"#java-comparator-示例","children":[]}],"git":{"createdTime":1697381621000,"updatedTime":1714224756000,"contributors":[{"name":"xlc","email":"2215400217@qq.com","commits":1},{"name":"xlc520","email":"2215400217@qq.com","commits":1}]},"readingTime":{"minutes":2.41,"words":724},"filePathRelative":"dev/Java中Comparable和Comparator.md","localizedDate":"2023年10月16日","autoDesc":true}');export{k as comp,d as data};
