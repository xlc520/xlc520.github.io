import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,a as t}from"./app-CHLzVell.js";const e={},p=t(`<h1 id="java-性能调优可视化工具" tabindex="-1"><a class="header-anchor" href="#java-性能调优可视化工具"><span>Java 性能调优可视化工具</span></a></h1><p>VisualVM 是 Netbeans 的 profile 子项目，已在<code>JDK6.0 update 7</code> 中自带，能够监控线程，内存情况，查看方法的 CPU 时间和内存中的对 象，已被 GC 的对象，反向查看分配的堆栈(如 100 个 String 对象分别由哪几个对象分配出来的)。在<code>JDK_HOME/bin</code>( 默认是<code>C:\\Program Files\\Java\\jdk1.6.0_13\\bin</code>)目录下面，有一个<code>jvisualvm.exe</code>文件，双击打开，从 UI 上来看，这个软件是基于 NetBeans 开发的了。</p><p>VisualVM 提供了一个可视界面，用于查看 Java 虚拟机上运行的基于 Java 技术的应用程序的详细信息。VisualVM 对 <code>Java Development Kit (JDK)</code> 工具所检索的 JVM 软件相关数据进行组织，并通过一种使您可以快速查看有关多个 Java 应用程序的数据的方式提供该信息。</p><p>您可以查看本地应用程序或远程主机上运行的应用程序的相关数据。此外，还可以捕获有关 JVM 软件实例的数据，并将该数据保存到本地系统，以供后期查看或与其他用户共享。</p><p>双击启动 <code>jvisualvm.exe</code>，启动起来后和 jconsole 一样同样可以选择本地和远程，如果需要监控远程同样需要配置相关参数。</p><h3 id="主界面如下" tabindex="-1"><a class="header-anchor" href="#主界面如下"><span>主界面如下</span></a></h3><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1712987044886-0.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>VisualVM 可以根据需要安装不同的插件，每个插件的关注点都不同，有的主要监控 GC，有的主要监控内存，有的监控线程等。</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1712987044884-1.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h3 id="如何安装" tabindex="-1"><a class="header-anchor" href="#如何安装"><span>如何安装</span></a></h3><ul><li>从主菜单中选择“工具”&gt;“插件”。</li><li>在“可用插件”标签中，选中该插件的“安装”复选框。单击“安装”。</li><li>逐步完成插件安装程序。</li></ul><p>我这里以 Eclipse(pid 22296)为例，双击后直接展开，主界面展示了系统和 jvm 两大块内容，点击右下方 jvm 参数和系统属性可以参考详细的参数信息.</p><p><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1712987044884-2.webp" alt="图片" loading="lazy"> 因为 VisualVM 的插件太多，我这里主要介绍三个我主要使用几个：监控、线程、Visual GC</p><p>监控的主页其实也就是，cpu、内存、类、线程的图表</p><p><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1712987044884-3.webp" alt="图片" loading="lazy">线程和 jconsole 功能没有太大的区别</p><p><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1712987044885-4.webp" alt="图片" loading="lazy">Visual GC 是常常使用的一个功能，可以明显的看到年轻代、老年代的内存变化，以及 gc 频率、gc 的时间等。</p><p><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1712987044884-2.webp" alt="图片" loading="lazy"> 以上的功能其实 jconsole 几乎也有，VisualVM 更全面更直观一些，另外 VisualVM 非常多的其它功能，可以分析 dump 的内存快照，</p><p>dump 出来的线程快照并且进行分析等，还有其它很多的插件大家可以去探索</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1712987044885-5.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h2 id="案例分析" tabindex="-1"><a class="header-anchor" href="#案例分析"><span>案例分析</span></a></h2><p>准备模拟内存泄漏样例</p><p>1、定义静态变量 HashMap</p><p>2、分段循环创建对象，并加入 HashMap</p><p>代码如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CyclicDependencies</span> <span class="token punctuation">{</span>
    <span class="token comment">//声明缓存对象</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Map</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//给打开visualvm时间</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//循环添加对象到缓存</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">1000000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">TestMemory</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token operator">+</span>i<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;first&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//为dump出堆提供时间</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">1000000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">TestMemory</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token operator">+</span>i<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;second&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">3000000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">TestMemory</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token operator">+</span>i<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;third&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">4000000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">TestMemory</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token operator">+</span>i<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;forth&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;qqqq&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、配置 jvm 参数如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token parameter variable">-Xms512m</span>
<span class="token parameter variable">-Xmx512m</span>
<span class="token parameter variable">-XX:-UseGCOverheadLimit</span>
<span class="token parameter variable">-XX:MaxPermSize</span><span class="token operator">=</span>50m
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、运行程序并打卡 visualvm 监控</p><h3 id="使用-jvisualvm-分析内存泄漏" tabindex="-1"><a class="header-anchor" href="#使用-jvisualvm-分析内存泄漏"><span>使用 JVisualVM 分析内存泄漏</span></a></h3><p>1、查看 Visual GC 标签，内容如下，这是输出 first 的截图</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1712987044885-6.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>这是输出 forth 的截图：</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1712987044885-7.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>通过 2 张图对比发现：</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1712987044885-8.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>老生代一直在 gc，当程序继续运行可以发现老生代 gc 还在继续：</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1712987044885-9.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>增加到了 7 次，但是老生代的内存并没有减少。说明存在无法被回收的对象，可能是内存泄漏了。</p><p>如何分析是那个对象泄漏了呢？打开抽样器标签：点击后如下图：</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1712987044885-10.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>按照程序输出进行堆 dump，当输出 second 时，dump 一次，当输出 forth 时 dump 一次。</p><p>进入最后 dump 出来的堆标签，点击类：</p><p><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1712987044885-11.webp" alt="图片" loading="lazy"> 点击右上角：“与另一个堆存储对比”。如图选择第一次导出的 dump 内容比较：</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1712987044886-12.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>比较结果如下：</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1712987044886-13.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>可以看出在两次间隔时间内 TestMemory 对象实例一直在增加并且多了，说明该对象引用的方法可能存在内存泄漏。</p><h3 id="如何查看对象引用关系呢" tabindex="-1"><a class="header-anchor" href="#如何查看对象引用关系呢"><span>如何查看对象引用关系呢？</span></a></h3><p>右键选择类 TestMemory，选择“在实例视图中显示”，如下所示：</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1712987044886-14.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>左侧是创建的实例总数，右侧上部为该实例的结构，下面为引用说明，从图中可以看出在类 CyclicDependencies 里面被引用了，并且被 HashMap 引用。</p><p>如此可以确定泄漏的位置，进而根据实际情况进行分析解决。</p><h3 id="jvisualvm-远程监控-tomcat" tabindex="-1"><a class="header-anchor" href="#jvisualvm-远程监控-tomcat"><span>JVisualVM 远程监控 Tomcat</span></a></h3><p>1、修改远程 tomcat 的<code>catalina.sh</code>配置文件，在其中增加：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token assign-left variable">JAVA_OPTS</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">$JAVA_OPTS</span>
 
-Djava.rmi.server.hostname=192.168.122.128

-Dcom.sun.management.jmxremote.port=18999

-Dcom.sun.management.jmxremote.ssl=false

-Dcom.sun.management.jmxremote.authenticate=false&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这次配置先不走权限校验。只是打开 jmx 端口。</p><p>2、打开 jvisualvm，右键远程，选择添加远程主机：</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1712987044886-15.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>3、输入主机的名称，直接写 ip，如下：</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1712987044886-16.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>右键新建的主机，选择添加 JMX 连接，输入在 tomcat 中配置的端口即可。</p><p>4、双击打开。完毕！</p>`,62),c=[p];function o(i,l){return a(),s("div",null,c)}const k=n(e,[["render",o],["__file","Java 性能调优可视化工具.html.vue"]]),m=JSON.parse('{"path":"/dev/Java%20%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B7%A5%E5%85%B7.html","title":"Java 性能调优可视化工具","lang":"zh-CN","frontmatter":{"author":"xlc520","title":"Java 性能调优可视化工具","excerpt":null,"description":"Java 性能调优可视化工具 VisualVM 是 Netbeans 的 profile 子项目，已在JDK6.0 update 7 中自带，能够监控线程，内存情况，查看方法的 CPU 时间和内存中的对 象，已被 GC 的对象，反向查看分配的堆栈(如 100 个 String 对象分别由哪几个对象分配出来的)。在JDK_HOME/bin( 默认是C:\\\\...","date":"2024-04-11T00:00:00.000Z","category":"Java","tag":"Java","article":true,"timeline":true,"icon":"java","head":[["meta",{"property":"og:url","content":"https://blog.ciberviler.top/dev/Java%20%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B7%A5%E5%85%B7.html"}],["meta",{"property":"og:site_name","content":"StudyNote - 丰富的知识笔记库"}],["meta",{"property":"og:title","content":"Java 性能调优可视化工具"}],["meta",{"property":"og:description","content":"Java 性能调优可视化工具 VisualVM 是 Netbeans 的 profile 子项目，已在JDK6.0 update 7 中自带，能够监控线程，内存情况，查看方法的 CPU 时间和内存中的对 象，已被 GC 的对象，反向查看分配的堆栈(如 100 个 String 对象分别由哪几个对象分配出来的)。在JDK_HOME/bin( 默认是C:\\\\..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1712987044886-0.webp"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-27T13:32:36.000Z"}],["meta",{"property":"article:author","content":"xlc520"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2024-04-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-27T13:32:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 性能调优可视化工具\\",\\"image\\":[\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1712987044886-0.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1712987044884-1.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1712987044884-2.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1712987044884-3.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1712987044885-4.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1712987044884-2.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1712987044885-5.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1712987044885-6.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1712987044885-7.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1712987044885-8.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1712987044885-9.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1712987044885-10.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1712987044885-11.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1712987044886-12.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1712987044886-13.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1712987044886-14.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1712987044886-15.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1712987044886-16.webp\\"],\\"datePublished\\":\\"2024-04-11T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-27T13:32:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xlc520\\"}]}"]]},"headers":[{"level":3,"title":"主界面如下","slug":"主界面如下","link":"#主界面如下","children":[]},{"level":3,"title":"如何安装","slug":"如何安装","link":"#如何安装","children":[]},{"level":2,"title":"案例分析","slug":"案例分析","link":"#案例分析","children":[{"level":3,"title":"使用 JVisualVM 分析内存泄漏","slug":"使用-jvisualvm-分析内存泄漏","link":"#使用-jvisualvm-分析内存泄漏","children":[]},{"level":3,"title":"如何查看对象引用关系呢？","slug":"如何查看对象引用关系呢","link":"#如何查看对象引用关系呢","children":[]},{"level":3,"title":"JVisualVM 远程监控 Tomcat","slug":"jvisualvm-远程监控-tomcat","link":"#jvisualvm-远程监控-tomcat","children":[]}]}],"git":{"createdTime":1714214949000,"updatedTime":1714224756000,"contributors":[{"name":"xlc","email":"2215400217@qq.com","commits":2}]},"readingTime":{"minutes":5.01,"words":1504},"filePathRelative":"dev/Java 性能调优可视化工具.md","localizedDate":"2024年4月11日","autoDesc":true}');export{k as comp,m as data};
