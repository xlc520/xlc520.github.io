import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as p,c as d,b as s,n as c,g as r,r as a,a as t}from"./app-DDjfOKh-.js";const v={};function u(m,n){const i=a("VPBanner"),e=a("Share");return p(),d("div",null,[s(i,c(r({title:"SpringBoot AOP审计日志",content:"SpringBoot AOP审计日志",logo:null,color:"var(--banner-text)",background:"rgba(217, 244, 208, 0.5)",actions:[{text:"SpringBoot AOP审计日志",link:"/dev/SpringBoot AOP审计日志"}]})),null,16),n[0]||(n[0]=t(`<h1 id="springboot-aop审计日志" tabindex="-1"><a class="header-anchor" href="#springboot-aop审计日志"><span>SpringBoot AOP审计日志</span></a></h1><h2 id="_01、背景介绍" tabindex="-1"><a class="header-anchor" href="#_01、背景介绍"><span><strong>01、背景介绍</strong></span></a></h2><p>任何一个软件系统，都不可避免的会碰到【<strong>信息安全</strong>】这个词，尤其是对于刚入行的新手，比如我，我刚入行的时候，领导让我做一个数据报表导出功能，我就按照他的意思去做，至于谁有权限操作导出，导出的数据包含敏感信息应该怎么处理，后端接口是不是做了权限控制防止恶意抓取，这些问题我基本上不关心，我只想一心一意尽快实现需求，然后顺利完成任务交付。</p><p>实际上，随着工作阅历的增加，你会越来越能感觉到，实现业务方提的需求，只是完成了软件系统研发中的【<strong>能用</strong>】要求；服务是否【<strong>可靠</strong>】可能需要从架构层和运维方面去着手解决；至于是否【<strong>安全</strong>】、更多的需要从【<strong>信息安全</strong>】这个角度来思考，尤其是当我们的软件系统面对外界的恶意干扰和攻击时，是否依然能保障用户正常使用，对于大公司，这个可能是头等大事，因为可能一个很小很小的漏洞，一不小心可能会给公司带来几千万的损失！</p><p>最常见的就是电商系统和支付系统，尤其是需求旺季的时候，经常有黑客专门攻击这些电商系统，导致大量服务宕机，影响用户正常下单。</p><p>像这样的攻击案例每天都有，有的公司甚至直接向黑客气妥，给钱消灾！</p><p>但是这种做法肯定不是长久之计，最重要的还是主动提升系统的【<strong>安全</strong>】防御系数。</p><p>由于<strong>信息安全</strong>所涉及的要求内容众多，今天，我在这里仅仅向大家介绍其中关于【<strong>审计日志</strong>】的要求和具体应用，后续也会向大家介绍其他的要求。</p><p>【<strong>审计日志</strong>】，简单的说就是系统需要记录谁，在什么时间，对什么数据，做了什么样的更改！这个日志数据是极其珍贵的，后面如果因业务操作上出了问题，可以很方便进行操作回查。</p><p>同时，任何一个 IT 系统，如果要过审，这项任务基本上也是必审项！</p><p>好了，需求我们清楚了，具体应用看下面！</p><h2 id="_02、方案实践" tabindex="-1"><a class="header-anchor" href="#_02、方案实践"><span><strong>02、方案实践</strong></span></a></h2><p>实现【<strong>审计日志</strong>】这个需求，我们有一个很好的技术解决方案，就是使用 Spring 的切面编程，创建一个代理类，利用<code>afterReturning</code>和<code>afterThrowing</code>方法来实现日志的记录。</p><p>具体实现步骤如下</p><ul><li>先创建审计日志表</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE \`tb_audit_log\` (</span></span>
<span class="line"><span>  \`id\` bigint(20) NOT NULL  COMMENT &#39;审计日志，主键ID&#39;,</span></span>
<span class="line"><span>  \`table_name\` varchar(500) DEFAULT &#39;&#39; COMMENT &#39;操作的表名，多个用逗号隔开&#39;,</span></span>
<span class="line"><span>  \`operate_desc\` varchar(200) DEFAULT &#39;&#39; COMMENT &#39;操作描述&#39;,</span></span>
<span class="line"><span>  \`request_param\` varchar(200) DEFAULT &#39;&#39; COMMENT &#39;请求参数&#39;,</span></span>
<span class="line"><span>  \`result\` int(10) COMMENT &#39;执行结果，0:成功，1:失败&#39;,</span></span>
<span class="line"><span>  \`ex_msg\` varchar(200) DEFAULT &#39;&#39; COMMENT &#39;异常信息&#39;,</span></span>
<span class="line"><span>  \`user_agent\` text COLLATE utf8mb4_unicode_ci COMMENT &#39;用户代理信息&#39;,</span></span>
<span class="line"><span>  \`ip_address\` varchar(32) NOT NULL DEFAULT &#39;&#39; COMMENT &#39;操作时设备IP&#39;,</span></span>
<span class="line"><span>  \`ip_address_name\` varchar(32) DEFAULT &#39;&#39; COMMENT &#39;操作时设备IP所在地址&#39;,</span></span>
<span class="line"><span>  \`operate_time\` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#39;操作时间&#39;,</span></span>
<span class="line"><span>  \`operate_user_id\` varchar(32) DEFAULT &#39;&#39; COMMENT &#39;操作人ID&#39;,</span></span>
<span class="line"><span>  \`operate_user_name\` varchar(32) DEFAULT &#39;&#39; COMMENT &#39;操作人&#39;,</span></span>
<span class="line"><span>  PRIMARY KEY (\`id\`)</span></span>
<span class="line"><span>) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT=&#39;审计日志表&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>然后编写一个注解类</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@Retention(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span>@Target({ElementType.TYPE,ElementType.METHOD})</span></span>
<span class="line"><span>@Documented</span></span>
<span class="line"><span>public @interface SystemAuditLog {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 操作了的表名</span></span>
<span class="line"><span>     * @return</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    String tableName() default &quot;&quot;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 日志描述</span></span>
<span class="line"><span>     * @return</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    String description() default &quot;&quot;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>接着编写一个代理类</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@Component</span></span>
<span class="line"><span>@Aspect</span></span>
<span class="line"><span>public class SystemAuditLogAspect {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Autowired</span></span>
<span class="line"><span>    private SystemAuditLogService systemAuditLogService;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 定义切入点，切入所有标注此注解的类和方法</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @Pointcut(&quot;@within(com.example.demo.core.annotation.SystemAuditLog)|| @annotation(com.example.demo.core.annotation.SystemAuditLog)&quot;)</span></span>
<span class="line"><span>    public void methodAspect() {</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 方法调用前拦截</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @Before(&quot;methodAspect()&quot;)</span></span>
<span class="line"><span>    public void before(){</span></span>
<span class="line"><span>        System.out.println(&quot;SystemAuditLog代理 -&gt; 调用方法执行之前......&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 方法调用后拦截</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @After(&quot;methodAspect()&quot;)</span></span>
<span class="line"><span>    public void after(){</span></span>
<span class="line"><span>        System.out.println(&quot;SystemAuditLog代理 -&gt; 调用方法执行之后......&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 调用方法结束拦截</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @AfterReturning(value = &quot;methodAspect()&quot;)</span></span>
<span class="line"><span>    public void afterReturning(JoinPoint joinPoint) throws Exception {</span></span>
<span class="line"><span>        System.out.println(&quot;SystemAuditLog代理 -&gt; 调用方法结束拦截......&quot;);</span></span>
<span class="line"><span>        //封装数据</span></span>
<span class="line"><span>        AuditLog entity = warpAuditLog(joinPoint);</span></span>
<span class="line"><span>        entity.setResult(0);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        //插入到数据库</span></span>
<span class="line"><span>        systemAuditLogService.add(entity);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 抛出异常拦截</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @AfterThrowing(value=&quot;methodAspect()&quot;, throwing=&quot;ex&quot;)</span></span>
<span class="line"><span>    public void afterThrowing(JoinPoint joinPoint, Exception ex) throws Exception {</span></span>
<span class="line"><span>        System.out.println(&quot;SystemAuditLog代理 -&gt; 抛出异常拦截......&quot;);</span></span>
<span class="line"><span>        //封装数据</span></span>
<span class="line"><span>        AuditLog entity = warpAuditLog(joinPoint);</span></span>
<span class="line"><span>        entity.setResult(1);</span></span>
<span class="line"><span>        //封装错误信息</span></span>
<span class="line"><span>        entity.setExMsg(ex.getMessage());</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        //插入到数据库</span></span>
<span class="line"><span>        systemAuditLogService.add(entity);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 封装插入实体</span></span>
<span class="line"><span>     * @param joinPoint</span></span>
<span class="line"><span>     * @return</span></span>
<span class="line"><span>     * @throws Exception</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private AuditLog warpAuditLog(JoinPoint joinPoint) throws Exception {</span></span>
<span class="line"><span>        //获取请求上下文</span></span>
<span class="line"><span>        HttpServletRequest request = getHttpServletRequest();</span></span>
<span class="line"><span>        //获取注解上的参数值</span></span>
<span class="line"><span>        SystemAuditLog systemAuditLog = getServiceMethodDescription(joinPoint);</span></span>
<span class="line"><span>        //获取请求参数</span></span>
<span class="line"><span>        Object requestObj = getServiceMethodParams(joinPoint);</span></span>
<span class="line"><span>        //封装数据</span></span>
<span class="line"><span>        AuditLog auditLog = new AuditLog();</span></span>
<span class="line"><span>        auditLog.setId(SnowflakeIdWorker.getInstance().nextId());</span></span>
<span class="line"><span>        //从请求上下文对象获取相应的数据</span></span>
<span class="line"><span>        if(Objects.nonNull(request)){</span></span>
<span class="line"><span>            auditLog.setUserAgent(request.getHeader(&quot;User-Agent&quot;));</span></span>
<span class="line"><span>            //获取登录时的ip地址</span></span>
<span class="line"><span>            auditLog.setIpAddress(IpAddressUtil.getIpAddress(request));</span></span>
<span class="line"><span>            //调用外部接口，获取IP所在地</span></span>
<span class="line"><span>            auditLog.setIpAddressName(IpAddressUtil.getLoginAddress(auditLog.getIpAddress()));</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        //封装操作的表和描述</span></span>
<span class="line"><span>        if(Objects.nonNull(systemAuditLog)){</span></span>
<span class="line"><span>            auditLog.setTableName(systemAuditLog.tableName());</span></span>
<span class="line"><span>            auditLog.setOperateDesc(systemAuditLog.description());</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        //封装请求参数</span></span>
<span class="line"><span>        auditLog.setRequestParam(JSON.toJSONString(requestObj));</span></span>
<span class="line"><span>        //封装请求人</span></span>
<span class="line"><span>        if(Objects.nonNull(requestObj) &amp;&amp; requestObj instanceof BaseRequest){</span></span>
<span class="line"><span>            auditLog.setOperateUserId(((BaseRequest) requestObj).getLoginUserId());</span></span>
<span class="line"><span>            auditLog.setOperateUserName(((BaseRequest) requestObj).getLoginUserName());</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        auditLog.setOperateTime(new Date());</span></span>
<span class="line"><span>        return auditLog;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 获取当前的request</span></span>
<span class="line"><span>     * 这里如果报空指针异常是因为单独使用spring获取request</span></span>
<span class="line"><span>     * 需要在配置文件里添加监听</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * 如果是spring项目，通过下面方式注入</span></span>
<span class="line"><span>     * &lt;listener&gt;</span></span>
<span class="line"><span>     * &lt;listener-class&gt;</span></span>
<span class="line"><span>     * org.springframework.web.context.request.RequestContextListener</span></span>
<span class="line"><span>     * &lt;/listener-class&gt;</span></span>
<span class="line"><span>     * &lt;/listener&gt;</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * 如果是springboot项目，在配置类里面，通过下面方式注入</span></span>
<span class="line"><span>     * @Bean</span></span>
<span class="line"><span>     * public RequestContextListener requestContextListener(){</span></span>
<span class="line"><span>     *     return new RequestContextListener();</span></span>
<span class="line"><span>     * }</span></span>
<span class="line"><span>     * @return</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private HttpServletRequest getHttpServletRequest(){</span></span>
<span class="line"><span>        RequestAttributes ra = RequestContextHolder.getRequestAttributes();</span></span>
<span class="line"><span>        ServletRequestAttributes sra = (ServletRequestAttributes)ra;</span></span>
<span class="line"><span>        HttpServletRequest request = sra.getRequest();</span></span>
<span class="line"><span>        return request;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 获取请求对象</span></span>
<span class="line"><span>     * @param joinPoint</span></span>
<span class="line"><span>     * @return</span></span>
<span class="line"><span>     * @throws Exception</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private Object getServiceMethodParams(JoinPoint joinPoint) {</span></span>
<span class="line"><span>        Object[] arguments = joinPoint.getArgs();</span></span>
<span class="line"><span>        if(Objects.nonNull(arguments) &amp;&amp; arguments.length &gt; 0){</span></span>
<span class="line"><span>            return arguments[0];</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        return null;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 获取自定义注解里的参数</span></span>
<span class="line"><span>     * @param joinPoint</span></span>
<span class="line"><span>     * @return 返回注解里面的日志描述</span></span>
<span class="line"><span>     * @throws Exception</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private SystemAuditLog getServiceMethodDescription(JoinPoint joinPoint) throws Exception {</span></span>
<span class="line"><span>        //类名</span></span>
<span class="line"><span>        String targetName = joinPoint.getTarget().getClass().getName();</span></span>
<span class="line"><span>        //方法名</span></span>
<span class="line"><span>        String methodName = joinPoint.getSignature().getName();</span></span>
<span class="line"><span>        //参数</span></span>
<span class="line"><span>        Object[] arguments = joinPoint.getArgs();</span></span>
<span class="line"><span>        //通过反射获取示例对象</span></span>
<span class="line"><span>        Class targetClass = Class.forName(targetName);</span></span>
<span class="line"><span>        //通过实例对象方法数组</span></span>
<span class="line"><span>        Method[] methods = targetClass.getMethods();</span></span>
<span class="line"><span>        for(Method method : methods) {</span></span>
<span class="line"><span>            //判断方法名是不是一样</span></span>
<span class="line"><span>            if(method.getName().equals(methodName)) {</span></span>
<span class="line"><span>                //对比参数数组的长度</span></span>
<span class="line"><span>                Class[] clazzs = method.getParameterTypes();</span></span>
<span class="line"><span>                if(clazzs.length == arguments.length) {</span></span>
<span class="line"><span>                    //获取注解里的日志信息</span></span>
<span class="line"><span>                    return method.getAnnotation(SystemAuditLog.class);</span></span>
<span class="line"><span>                }</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        return null;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>最后，只需要在对应的接口或者方法上添加审计日志注解即可</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@RestController</span></span>
<span class="line"><span>@RequestMapping(&quot;api&quot;)</span></span>
<span class="line"><span>public class LoginController {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 用户登录，添加审计日志注解</span></span>
<span class="line"><span>     * @param request</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @SystemAuditLog(tableName = &quot;tb_user&quot;, description = &quot;用户登录&quot;)</span></span>
<span class="line"><span>    @PostMapping(&quot;login&quot;)</span></span>
<span class="line"><span>    public void login(UserLoginDTO request){</span></span>
<span class="line"><span>        //登录逻辑处理</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>相关的实体类</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@Data</span></span>
<span class="line"><span>public class AuditLog {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 审计日志，主键ID</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private Long id;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 操作的表名，多个用逗号隔开</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private String tableName;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 操作描述</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private String operateDesc;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 请求参数</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private String requestParam;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 执行结果，0:成功，1:失败</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private Integer result;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 异常信息</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private String exMsg;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 请求代理信息</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private String userAgent;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 操作时设备IP</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private String ipAddress;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 操作时设备IP所在地址</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private String ipAddressName;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 操作时间</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private Date operateTime;</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 操作人ID</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private String operateUserId;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 操作人</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private String operateUserName;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>public class BaseRequest implements Serializable {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 请求token</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private String token;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 登录人ID</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private String loginUserId;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 登录人姓名</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private String loginUserName;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public String getToken() {</span></span>
<span class="line"><span>        return token;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public void setToken(String token) {</span></span>
<span class="line"><span>        this.token = token;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public String getLoginUserId() {</span></span>
<span class="line"><span>        return loginUserId;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public void setLoginUserId(String loginUserId) {</span></span>
<span class="line"><span>        this.loginUserId = loginUserId;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public String getLoginUserName() {</span></span>
<span class="line"><span>        return loginUserName;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public void setLoginUserName(String loginUserName) {</span></span>
<span class="line"><span>        this.loginUserName = loginUserName;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>@Data</span></span>
<span class="line"><span>public class UserLoginDTO extends BaseRequest {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 用户名</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private String userName;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 密码</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private String password;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_03、小结" tabindex="-1"><a class="header-anchor" href="#_03、小结"><span><strong>03、小结</strong></span></a></h2><p>整个程序的实现过程，主要使用了 Spring AOP 特性，对特定方法进行前、后拦截，从而实现业务方的需求。</p>`,26)),s(e,{colorful:"",service:"email,qq,qzone,qrcode,weibo,telegram,twitter"})])}const g=l(v,[["render",u],["__file","SpringBoot AOP审计日志.html.vue"]]),h=JSON.parse('{"path":"/dev/SpringBoot%20AOP%E5%AE%A1%E8%AE%A1%E6%97%A5%E5%BF%97.html","title":"SpringBoot AOP审计日志","lang":"zh-CN","frontmatter":{"title":"SpringBoot AOP审计日志","excerpt":null,"description":"SpringBoot AOP审计日志","date":"2024-08-27T00:00:00.000Z","category":"Java","tag":"Java","author":"xlc520","article":true,"timeline":true,"icon":"java","head":[["meta",{"property":"og:url","content":"https://blog.ciberviler.top/dev/SpringBoot%20AOP%E5%AE%A1%E8%AE%A1%E6%97%A5%E5%BF%97.html"}],["meta",{"property":"og:site_name","content":"StudyNote - 丰富的知识笔记库"}],["meta",{"property":"og:title","content":"SpringBoot AOP审计日志"}],["meta",{"property":"og:description","content":"SpringBoot AOP审计日志"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-07T06:25:59.000Z"}],["meta",{"property":"article:author","content":"xlc520"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2024-08-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-07T06:25:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringBoot AOP审计日志\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-27T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-07T06:25:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xlc520\\"}]}"]]},"headers":[{"level":2,"title":"01、背景介绍","slug":"_01、背景介绍","link":"#_01、背景介绍","children":[]},{"level":2,"title":"02、方案实践","slug":"_02、方案实践","link":"#_02、方案实践","children":[]},{"level":2,"title":"03、小结","slug":"_03、小结","link":"#_03、小结","children":[]}],"git":{"createdTime":1725690359000,"updatedTime":1725690359000,"contributors":[{"name":"xlc","email":"2215400217@qq.com","commits":1}]},"readingTime":{"minutes":6.64,"words":1993},"filePathRelative":"dev/SpringBoot AOP审计日志.md","localizedDate":"2024年8月27日","excerpt":""}');export{g as comp,h as data};
