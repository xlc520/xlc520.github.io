import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as t}from"./app-21243f18.js";const p={},e=t(`<h1 id="spring线程池多线程并发处理大批量数据-解决io效率问题" tabindex="-1"><a class="header-anchor" href="#spring线程池多线程并发处理大批量数据-解决io效率问题" aria-hidden="true">#</a> Spring线程池多线程并发处理大批量数据，解决IO效率问题</h1><p>首先，叙述一下当前面临的问题所在。当前系统通过接口调用其他系统的数据，返回的数据达到10万级，然后将这批数据插入到oracle数据库。怎样尽可能提高这一过程的效率？</p><h2 id="大致从两个时间节点来优化" tabindex="-1"><a class="header-anchor" href="#大致从两个时间节点来优化" aria-hidden="true">#</a> 大致从两个时间节点来优化：</h2><p>一个节点是优化接口之间调用的响应速度，可以项目之间使用集群，实现负载均衡。接口拿到数据后可以暂存到Redis或kafka再者是MQ队列中，以提高接口直接的相率。</p><p>当然了如果项目团队允许，分布式的Hbase也是个不错的选择。当然了这些都不是重点，吹了半天下面才是重点。</p><p>今天的主题是大批量数据并发入库的问题，现在主流的项目工程大部分spring全家桶占大部分，所以咱们选择使用spring的线程池解决这一问题。大家可以思考一下10万条数据入库传统的web是一个线程运作，把这部分数据拆成10份或者20份分给多个线程去处理不就提高效率了？</p><p>思路有了，接下来，不哔哔了，直接干代码。</p><h2 id="两个方案" tabindex="-1"><a class="header-anchor" href="#两个方案" aria-hidden="true">#</a> 两个方案：</h2><h3 id="方案一-新建几个线程-交给线程池管理" tabindex="-1"><a class="header-anchor" href="#方案一-新建几个线程-交给线程池管理" aria-hidden="true">#</a> 方案一：新建几个线程，交给线程池管理</h3><p>1、准备测试数据</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BookStatistic</span><span class="token punctuation">&gt;</span></span> <span class="token function">getPsrList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BookStatistic</span><span class="token punctuation">&gt;</span></span> psrList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BookStatistic</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">20000</span> <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token class-name">BookStatistic</span> book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BookStatistic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   book<span class="token punctuation">.</span><span class="token function">setPno</span><span class="token punctuation">(</span><span class="token string">&quot;zxl&quot;</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
   psrList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">return</span> bookList<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、线程池配置类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableAsync</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncConfig</span> <span class="token punctuation">{</span>
 
  <span class="token comment">//接收报文核心线程数</span>
  <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${book.core.poolsize}&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> bookCorePoolSize<span class="token punctuation">;</span>
  <span class="token comment">//接收报文最大线程数</span>
  <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${book.max.poolsize}&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> bookMaxPoolSize<span class="token punctuation">;</span>
  <span class="token comment">//接收报文队列容量</span>
  <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${book.queue.capacity}&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> bookQueueCapacity<span class="token punctuation">;</span>
  <span class="token comment">//接收报文线程活跃时间（秒）</span>
  <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${book.keepAlive.seconds}&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> bookKeepAliveSeconds<span class="token punctuation">;</span>
  <span class="token comment">//接收报文默认线程名称</span>
  <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${book.thread.name.prefix}&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> bookThreadNamePrefix<span class="token punctuation">;</span>
  
   <span class="token doc-comment comment">/**
    * bookTaskExecutor:(接口的线程池). <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
    * <span class="token keyword">@return</span> TaskExecutor taskExecutor接口
    * <span class="token keyword">@since</span> JDK 1.8
    */</span>
     <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;BookTask&quot;</span><span class="token punctuation">)</span>
     <span class="token keyword">public</span> <span class="token class-name">ThreadPoolTaskExecutor</span> <span class="token function">bookTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//newFixedThreadPool</span>
         <span class="token class-name">ThreadPoolTaskExecutor</span> executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token comment">// 设置核心线程数</span>
         executor<span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span>bookCorePoolSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token comment">// 设置最大线程数</span>
         executor<span class="token punctuation">.</span><span class="token function">setMaxPoolSize</span><span class="token punctuation">(</span>bookMaxPoolSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token comment">// 设置队列容量</span>
         executor<span class="token punctuation">.</span><span class="token function">setQueueCapacity</span><span class="token punctuation">(</span>bookQueueCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token comment">// 设置线程活跃时间（秒）</span>
         executor<span class="token punctuation">.</span><span class="token function">setKeepAliveSeconds</span><span class="token punctuation">(</span>bookKeepAliveSeconds<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token comment">// 设置默认线程名称</span>
         executor<span class="token punctuation">.</span><span class="token function">setThreadNamePrefix</span><span class="token punctuation">(</span>bookThreadNamePrefix<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token comment">// 设置拒绝策略</span>
         <span class="token comment">// rejection-policy：当pool已经达到max size的时候，如何处理新任务  </span>
         <span class="token comment">// CALLER_RUNS：不在新线程中执行任务，而是由调用者所在的线程来执行 </span>
         executor<span class="token punctuation">.</span><span class="token function">setRejectedExecutionHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>CallerRunsPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token comment">// 等待所有任务结束后再关闭线程池</span>
         executor<span class="token punctuation">.</span><span class="token function">setWaitForTasksToCompleteOnShutdown</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         executor<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">return</span> executor<span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、实现过程函数</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">ReceivePsrJobRun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  
  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BookStatistic</span><span class="token punctuation">&gt;</span></span> bookList <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  
 
  bookList <span class="token operator">=</span> <span class="token function">getBookList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//接收集合各段的 执行的返回结果</span>
  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> futureList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//集合总条数</span>
  <span class="token keyword">int</span> size <span class="token operator">=</span> bookList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//将集合切分的段数(2*CPU的核心数)</span>
  <span class="token keyword">int</span> sunSum <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> listStart<span class="token punctuation">,</span>listEnd<span class="token punctuation">;</span>
  <span class="token comment">//当总条数不足sunSum条时 用总条数 当做线程切分值</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>sunSum <span class="token operator">&gt;</span> size<span class="token punctuation">)</span><span class="token punctuation">{</span>
   sunSum <span class="token operator">=</span> size<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token comment">//定义子线程</span>
  <span class="token comment">/*BookThread bookThread;*/</span>
  
  <span class="token comment">//将list 切分多份 多线程执行</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sunSum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">//计算切割  开始和结束</span>
   listStart <span class="token operator">=</span> size <span class="token operator">/</span> sunSum <span class="token operator">*</span> i <span class="token punctuation">;</span>
   listEnd <span class="token operator">=</span> size <span class="token operator">/</span> sunSum <span class="token operator">*</span> <span class="token punctuation">(</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">//最后一段线程会 出现与其他线程不等的情况</span>
   <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> sunSum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    listEnd <span class="token operator">=</span> size<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token comment">//线程切断**/</span>
   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BookStatistic</span><span class="token punctuation">&gt;</span></span> sunList <span class="token operator">=</span> bookList<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span>listStart<span class="token punctuation">,</span>listEnd<span class="token punctuation">)</span><span class="token punctuation">;</span> 
   <span class="token comment">//子线程初始化</span>
   bookThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BookThread</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>sunList<span class="token punctuation">)</span><span class="token punctuation">;</span>
   
   <span class="token comment">//多线程执行</span>
   futureList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>taskExecutor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>bookThread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;----------1111111111&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//对各个线程段结果进行解析</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">:</span> futureList<span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> str <span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> future <span class="token punctuation">)</span><span class="token punctuation">{</span>
     str <span class="token operator">=</span> future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;##############current thread id =&quot;</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;,result=&quot;</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
     <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
   <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> <span class="token operator">|</span> <span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
    <span class="token comment">// TODO Auto-generated catch block</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
   <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;----------2222&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、线程类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookThread</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>
 <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> <span class="token constant">LOG</span> <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">BookThread</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">//当前是属于第几段线程</span>
 <span class="token keyword">private</span> <span class="token keyword">int</span> pageIndex<span class="token punctuation">;</span>
 <span class="token comment">//此段数据的集合</span>
 <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BookStatistic</span><span class="token punctuation">&gt;</span></span> bookList<span class="token punctuation">;</span>
 
 <span class="token keyword">public</span> <span class="token class-name">BookThread</span><span class="token punctuation">(</span><span class="token keyword">int</span> pageIndex<span class="token punctuation">,</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BookStatistic</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>pageIndex <span class="token operator">=</span> pageIndex<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>psrList <span class="token operator">=</span> list<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 <span class="token annotation punctuation">@Override</span>
 <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
  
   <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;此批数据的段数为:%s 此段数据的数据条数为:%s&quot;</span><span class="token punctuation">,</span>pageIndex<span class="token punctuation">,</span>psrList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token class-name">Boolean</span> result <span class="token operator">=</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">TRUE</span><span class="token punctuation">;</span>
  
   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> bookList<span class="token operator">&amp;&amp;</span> bookList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">BookStatistic</span> book<span class="token operator">:</span> bookList<span class="token punctuation">)</span><span class="token punctuation">{</span>
   
     <span class="token keyword">try</span> <span class="token punctuation">{</span>
       <span class="token comment">//数据入库函数</span>
     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      
      result <span class="token operator">=</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">FALSE</span><span class="token punctuation">;</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
 
 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方案二-只定义线程的数量-线程的新建管理都交给线程池" tabindex="-1"><a class="header-anchor" href="#方案二-只定义线程的数量-线程的新建管理都交给线程池" aria-hidden="true">#</a> 方案二：只定义线程的数量，线程的新建管理都交给线程池</h3><p>准备测试数据和线程池的配置和方案一一样，不再赘述。</p><p>方案二不再新建线程类了，这个过程交给spring线程池去处理，取而代之的是spring下的一个异步注解@Async</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SyncBookHandler</span> <span class="token punctuation">{</span>
 
 
 <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> <span class="token constant">LOG</span> <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">SyncBookHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token doc-comment comment">/**
  * syncMargePsr:(多线程同步处理数据方法). <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
  * <span class="token keyword">@author</span> LW
  * <span class="token keyword">@param</span> <span class="token parameter">bookList</span> 一段数据集合
  * <span class="token keyword">@param</span> <span class="token parameter">pageIndex</span> 段数
  * <span class="token keyword">@return</span> Future<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String</span><span class="token punctuation">&gt;</span></span> future对象
  * <span class="token keyword">@since</span> JDK 1.8
  */</span>
 <span class="token annotation punctuation">@Async</span>
 <span class="token keyword">public</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">syncMargePsr</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BookStatistic</span><span class="token punctuation">&gt;</span></span> bookList<span class="token punctuation">,</span><span class="token keyword">int</span> pageIndex<span class="token punctuation">)</span><span class="token punctuation">{</span>
  
 
    <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;此批数据的段数为:%s 此段数据的数据条数为:%s&quot;</span><span class="token punctuation">,</span>pageIndex<span class="token punctuation">,</span>psrList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">//声明future对象</span>
    <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AsyncResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//循环遍历该段旅客集合</span>
   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> bookList <span class="token operator">&amp;&amp;</span> bookList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">BookStatistic</span> book<span class="token operator">:</span> bookList<span class="token punctuation">)</span><span class="token punctuation">{</span>
     <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token comment">//数据入库操作</span>
      
     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      
      <span class="token comment">//记录出现异常的时间，线程name</span>
      result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AsyncResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;fail,time=&quot;</span><span class="token operator">+</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;,thread id=&quot;</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;,pageIndex=&quot;</span><span class="token operator">+</span>pageIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现过程函数</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token annotation punctuation">@Autowired</span>
 <span class="token keyword">private</span> <span class="token class-name">SyncBookHandler</span> syncBookHandler<span class="token punctuation">;</span>
 
 <span class="token comment">//核心线程数</span>
 <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${book.core.poolsize}&quot;</span><span class="token punctuation">)</span>
 <span class="token keyword">private</span> <span class="token keyword">int</span> threadSum<span class="token punctuation">;</span>
 
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveBookJobRun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BookStatistic</span><span class="token punctuation">&gt;</span></span> bookList <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  
 
  bookList  <span class="token operator">=</span> <span class="token function">getPsrList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//入库开始时间</span>
  <span class="token class-name">Long</span> inserOrUpdateBegin <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;数据更新开始时间:&quot;</span><span class="token operator">+</span>inserOrUpdateBegin<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//接收集合各段的 执行的返回结果</span>
  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> futureList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//集合总条数</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>psrList <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">int</span> listSize <span class="token operator">=</span> bookList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   
   <span class="token keyword">int</span> listStart<span class="token punctuation">,</span>listEnd<span class="token punctuation">;</span>
   <span class="token comment">//当总条数不足threadSum条时 用总条数 当做线程切分值</span>
   <span class="token keyword">if</span><span class="token punctuation">(</span>threadSum <span class="token operator">&gt;</span> listSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
    threadSum <span class="token operator">=</span> listSize<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
  
   <span class="token comment">//将list 切分多份 多线程执行</span>
   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> threadSum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//计算切割  开始和结束</span>
    listStart <span class="token operator">=</span> listSize <span class="token operator">/</span> threadSum <span class="token operator">*</span> i <span class="token punctuation">;</span>
    listEnd <span class="token operator">=</span> listSize <span class="token operator">/</span> threadSum <span class="token operator">*</span> <span class="token punctuation">(</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//最后一段线程会 出现与其他线程不等的情况</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> threadSum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     listEnd <span class="token operator">=</span> listSize<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//数据切断</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BookStatistic</span><span class="token punctuation">&gt;</span></span> sunList <span class="token operator">=</span> psrList<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span>listStart<span class="token punctuation">,</span>listEnd<span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
    <span class="token comment">//每段数据集合并行入库</span>
    futureList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>syncPassengerHandler<span class="token punctuation">.</span><span class="token function">syncMargePsr</span><span class="token punctuation">(</span>sunList<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
   <span class="token punctuation">}</span>
   
   <span class="token comment">//对各个线程段结果进行解析</span>
   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">:</span> futureList<span class="token punctuation">)</span><span class="token punctuation">{</span>
    
     <span class="token class-name">String</span> str <span class="token punctuation">;</span>
     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> future <span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
       str <span class="token operator">=</span> future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;current thread id =&quot;</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;,result=&quot;</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> <span class="token operator">|</span> <span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       
       <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;线程运行异常！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      
     <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
      <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;线程运行异常！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
    
   <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  
  
  
  <span class="token class-name">Long</span> inserOrUpdateEnd <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;数据更新结束时间:&quot;</span><span class="token operator">+</span>inserOrUpdateEnd<span class="token operator">+</span><span class="token string">&quot;。此次更新数据花费时间为：&quot;</span><span class="token operator">+</span><span class="token punctuation">(</span>inserOrUpdateEnd<span class="token operator">-</span>inserOrUpdateBegin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上思路和代码为简单的实现过程，鄙人能力有限，欢迎各位大神提出建议！！</p>`,24),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","spring线程池多线程并发处理大批量数据.html.vue"]]);export{r as default};
