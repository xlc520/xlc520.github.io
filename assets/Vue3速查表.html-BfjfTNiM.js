import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as t}from"./app-CMd4NNER.js";const e={},p=t(`<h1 id="vue3-速查表" tabindex="-1"><a class="header-anchor" href="#vue3-速查表"><span>Vue3 速查表</span></a></h1><h2 id="入门" tabindex="-1"><a class="header-anchor" href="#入门"><span>入门</span></a></h2><h3 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h3><p>Vue 是一套用于构建用户界面的渐进式框架</p><p>注意：Vue 3.x 版本对应 Vue Router 4.x 路由版本</p><h3 id="创建应用" tabindex="-1"><a class="header-anchor" href="#创建应用"><span>创建应用</span></a></h3><p>已安装 <code>16.0</code> 或更高版本的 Node.js</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> init vue@latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>指令将会安装并执行 create-vue，它是 Vue 官方的项目脚手架工具</p><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>✔ Project name: … &lt;your-project-name&gt;
✔ Add TypeScript? … No/Yes
✔ Add JSX Support? … No/Yes
✔ Add Vue Router for Single Page Application development? … No/Yes
✔ Add Pinia for state management? … No/Yes
✔ Add Vitest for Unit testing? … No/Yes
✔ Add Cypress for both Unit and End-to-End testing? … No/Yes
✔ Add ESLint for code quality? … No/Yes
✔ Add Prettier for code formatting? … No/Yes

Scaffolding project in ./&lt;your-project-name&gt;...
Done.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装依赖并启动开发服务器</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> <span class="token operator">&lt;</span>your-project-name<span class="token operator">&gt;</span>
<span class="token function">npm</span> <span class="token function">install</span>
<span class="token function">npm</span> run dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当你准备将应用发布到生产环境时，请运行：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> run build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此命令会在 <code>./dist</code> 文件夹中为你的应用创建一个生产环境的构建版本</p><h3 id="应用实例" tabindex="-1"><a class="header-anchor" href="#应用实例"><span>应用实例</span></a></h3><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>import { createApp, ref } from &#39;vue&#39;

const app = createApp({
setup() {
const message = ref(&quot;Hello Vue3&quot;)
return {
message
}
}
})
app.mount(&#39;#app&#39;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>挂载应用</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>count++<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    {{ count }}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="通过-cdn-使用-vue" tabindex="-1"><a class="header-anchor" href="#通过-cdn-使用-vue"><span>通过 CDN 使用 Vue</span></a></h3><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://unpkg.com/vue@3/dist/vue.global.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> createApp<span class="token punctuation">,</span> ref <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
  <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&quot;Hello Vue3&quot;</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        message
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-es-模块构建版本" tabindex="-1"><a class="header-anchor" href="#使用-es-模块构建版本"><span>使用 ES 模块构建版本</span></a></h3><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ message, ref }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">{</span> createApp<span class="token punctuation">,</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;https://unpkg.com/vue@3/dist/vue.esm-browser.js&#39;</span>

  <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&quot;Hello Vue3&quot;</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        message
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模板语法" tabindex="-1"><a class="header-anchor" href="#模板语法"><span>模板语法</span></a></h2><h3 id="文本插值" tabindex="-1"><a class="header-anchor" href="#文本插值"><span>文本插值</span></a></h3><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Message: {{ msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用的是 <code>Mustache</code> 语法 (即双大括号)，每次 <code>msg</code> 属性更改时它也会同步更新</p><h3 id="原始-html" tabindex="-1"><a class="header-anchor" href="#原始-html"><span>原始 HTML</span></a></h3><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Using text interpolation: {{ rawHtml }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Using v-html directive: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>rawHtml<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>双大括号<code>{{}}</code>会将数据解释为纯文本，使用 <code>v-html</code> 指令，将插入 HTML</p><h3 id="attribute-绑定" tabindex="-1"><a class="header-anchor" href="#attribute-绑定"><span>Attribute 绑定</span></a></h3><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dynamicId<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>简写</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dynamicId<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="布尔型-attribute" tabindex="-1"><a class="header-anchor" href="#布尔型-attribute"><span>布尔型 Attribute</span></a></h3><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">:disabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>isButtonDisabled<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  Button
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="动态绑定多个值" tabindex="-1"><a class="header-anchor" href="#动态绑定多个值"><span>动态绑定多个值</span></a></h3><p>通过不带参数的 <code>v-bind</code>，你可以将它们绑定到单个元素上</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> comp <span class="token keyword">from</span> <span class="token string">&quot;./Comp.vue&quot;</span>
  <span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span>

  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comp</span> <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{a, b}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comp</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你是使用的 <code>setup</code> 语法糖。需要使用 <code>defineprops</code> 声名（可以直接使用<code>a</code>/<code>b</code>）</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>const props = defineProps({
a: String,
b: String
})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-javascript-表达式" tabindex="-1"><a class="header-anchor" href="#使用-javascript-表达式"><span>使用 JavaScript 表达式</span></a></h3><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>{{ number + 1 }}
{{ ok ? &#39;YES&#39; : &#39;NO&#39; }}
{{ message.split(&#39;&#39;).reverse().join(&#39;&#39;) }}

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\`list-\${id}\`<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="仅支持表达式-例子都是无效" tabindex="-1"><a class="header-anchor" href="#仅支持表达式-例子都是无效"><span>仅支持表达式(例子都是无效)</span></a></h3><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- 这是一个语句，而非表达式 --&gt;</span>
{{ var a = 1 }}
<span class="token comment">&lt;!-- 条件控制也不支持，请使用三元表达式 --&gt;</span>
{{ if (ok) { return message } }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="调用函数" tabindex="-1"><a class="header-anchor" href="#调用函数"><span>调用函数</span></a></h3><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">:title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toTitleDate(date)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  {{ formatDate(date) }}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="指令-directives" tabindex="-1"><a class="header-anchor" href="#指令-directives"><span>指令 Directives</span></a></h3><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>seen<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Now you see me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="参数-arguments" tabindex="-1"><a class="header-anchor" href="#参数-arguments"><span>参数 Arguments</span></a></h3><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>url<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 简写 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>url<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="绑定事件" tabindex="-1"><a class="header-anchor" href="#绑定事件"><span>绑定事件</span></a></h3><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>doSomething<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 简写 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>doSomething<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="动态参数" tabindex="-1"><a class="header-anchor" href="#动态参数"><span>动态参数</span></a></h3><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>[attributeName]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>url<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 简写 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:[attributeName]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>url<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的 <code>attributeName</code> 会作为一个 JS 表达式被动态执行</p><h3 id="动态的事件名称" tabindex="-1"><a class="header-anchor" href="#动态的事件名称"><span>动态的事件名称</span></a></h3><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-on:</span>[eventName]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>doSomething<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 简写 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">@[eventName]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>doSomething<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="修饰符-modifiers" tabindex="-1"><a class="header-anchor" href="#修饰符-modifiers"><span>修饰符 Modifiers</span></a></h3><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">@submit.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onSubmit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  ...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
.prevent\` 修饰符会告知 \`v-on\` 指令对触发的事件调用 \`event.preventDefault()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="指令语法" tabindex="-1"><a class="header-anchor" href="#指令语法"><span>指令语法</span></a></h3><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>v-on:submit.prevent=&quot;onSubmit&quot;
──┬─ ─┬──── ─┬─────  ─┬──────
┆   ┆      ┆        ╰─ Value 解释为JS表达式
┆   ┆      ╰─ Modifiers 由前导点表示
┆   ╰─ Argument 跟随冒号或速记符号
╰─ Name 以 v- 开头使用速记时可以省略
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="响应式基础" tabindex="-1"><a class="header-anchor" href="#响应式基础"><span>响应式基础</span></a></h2><h3 id="声明状态" tabindex="-1"><a class="header-anchor" href="#声明状态"><span>声明状态</span></a></h3><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{ state.count }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>import { defineComponent, reactive } from &#39;vue&#39;;

// \`defineComponent\`用于IDE推导类型
export default defineComponent({
// setup 用于组合式 API 的特殊钩子函数
setup() {
const state = reactive({ count: 0 });

// 暴露 state 到模板
return {
state
};
},
});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="声明方法" tabindex="-1"><a class="header-anchor" href="#声明方法"><span>声明方法</span></a></h3><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>increment<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  {{ state.count }}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>import { defineComponent, reactive } from &#39;vue&#39;;

export default defineComponent({
setup() {
const state = reactive({ count: 0 });

function increment() {
state.count++;
}

// 不要忘记同时暴露 increment 函数
return {
state,
increment
};
},
})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="script-setup-setup-语法糖" tabindex="-1"><a class="header-anchor" href="#script-setup-setup-语法糖"><span><code>&lt;script setup&gt;</code> setup 语法糖</span></a></h3><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">{</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    state<span class="token punctuation">.</span>count<span class="token operator">++</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>increment<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    {{ state.count }}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>setup</code></strong> 语法糖用于简化代码，尤其是当需要暴露的状态和方法越来越多时</p><h3 id="用-ref-定义响应式变量" tabindex="-1"><a class="header-anchor" href="#用-ref-定义响应式变量"><span>用 <code>ref()</code> 定义响应式变量</span></a></h3><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>reactive\`只能用于对象、数组和 \`Map\`、\`Set\` 这样的集合类型，对 string、number 和 boolean 这样的原始类型则需要使用\`ref
import { ref } from &#39;vue&#39;;

const count = ref(0);

console.log(count); // { value: 0 }
console.log(count.value); // 0
count.value++;
console.log(count.value); // 1
const objectRef = ref({ count: 0 });

// 这是响应式的替换
objectRef.value = { count: 1 };
const obj = {
foo: ref(1),
bar: ref(2)
};
// 该函数接收一个 ref
// 需要通过 .value 取值
// 但它会保持响应性
callSomeFunction(obj.foo);

// 仍然是响应式的
const { foo, bar } = obj;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 html 模板中不需要带 <code>.value</code> 就可以使用</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    {{ count }}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="有状态方法" tabindex="-1"><a class="header-anchor" href="#有状态方法"><span>有状态方法</span></a></h3><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>import { reactive, defineComponent, onUnmounted } from &#39;vue&#39;;
import { debounce } from &#39;lodash-es&#39;;

export default defineComponent({
setup() {
// 每个实例都有了自己的预置防抖的处理函数
const debouncedClick = debounce(click, 500);

function click() {
// ... 对点击的响应 ...
}

// 最好是在组件卸载时
// 清除掉防抖计时器
onUnmounted(() =&gt; {
debouncedClick.cancel();
});
},
});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="响应式样式" tabindex="-1"><a class="header-anchor" href="#响应式样式"><span>响应式样式</span></a></h3><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

  <span class="token keyword">const</span> open <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>open = !open<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Toggle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>Hello Vue!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scope</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token selector">div</span> <span class="token punctuation">{</span>
    <span class="token property">transition</span><span class="token punctuation">:</span> height 0.1s linear<span class="token punctuation">;</span>
    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">v-bind</span><span class="token punctuation">(</span>open ? <span class="token string">&#39;30px&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;0px&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="响应式进阶-——-watch-和-computed" tabindex="-1"><a class="header-anchor" href="#响应式进阶-——-watch-和-computed"><span>响应式进阶 —— watch 和 computed</span></a></h2><h3 id="监听状态" tabindex="-1"><a class="header-anchor" href="#监听状态"><span>监听状态</span></a></h3><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> watch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> isEvent <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>

  <span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    state<span class="token punctuation">.</span>count<span class="token operator">++</span>
  <span class="token punctuation">}</span>

  <span class="token function">watch</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    isEvent<span class="token punctuation">.</span>value <span class="token operator">=</span> count<span class="token punctuation">.</span>value <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>increment<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    {{ count }}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
    is event: {{ isEvent ? &#39;yes&#39; : &#39;no&#39; }}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="立即监听状态" tabindex="-1"><a class="header-anchor" href="#立即监听状态"><span>立即监听状态</span></a></h3><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>watch(count, function() {
isEvent.value = count.value % 2 === 0
}, {
// 上例中的 watch 不会立即执行，导致 isEvent 状态的初始值不准确。配置立即执行，会在一开始的时候立即执行一次
immediate: true
})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="计算状态" tabindex="-1"><a class="header-anchor" href="#计算状态"><span>计算状态</span></a></h3><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> computed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// computed 的回调函数里，会根据已有并用到的状态计算出新的状态</span>
  <span class="token keyword">const</span> capital <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> text<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>to capital: {{ capital }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="组件通信" tabindex="-1"><a class="header-anchor" href="#组件通信"><span>组件通信</span></a></h2><h3 id="defineprops" tabindex="-1"><a class="header-anchor" href="#defineprops"><span>defineProps</span></a></h3><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">{</span> defineProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>

  <span class="token comment">// 这里可以将 \`username\` 解构出来，</span>
  <span class="token comment">// 但是一旦解构出来再使用，就不具备响应式能力</span>
  <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">username</span><span class="token operator">:</span> String
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>username: {{ username }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>子组件定义需要的参数</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> username <span class="token operator">=</span> <span class="token string">&#39;vue&#39;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>children</span> <span class="token attr-name">:username</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>父组件参入参数</p><h3 id="defineemits" tabindex="-1"><a class="header-anchor" href="#defineemits"><span>defineEmits</span></a></h3><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">{</span> defineEmits<span class="token punctuation">,</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> emit <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;search&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> keyword <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token function-variable function">onSearch</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;search&#39;</span><span class="token punctuation">,</span> keyword<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>keyword<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onSearch<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>search<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>子组件定义支持 <code>emit</code> 的函数</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token function-variable function">onSearch</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">keyword</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>children</span> <span class="token attr-name">@search</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onSearch<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>父组件绑定子组件定义的事件</p><h3 id="defineexpose" tabindex="-1"><a class="header-anchor" href="#defineexpose"><span>defineExpose</span></a></h3><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">{</span> defineExpose<span class="token punctuation">,</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> keyword <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token function-variable function">onSearch</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>keyword<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">defineExpose</span><span class="token punctuation">(</span><span class="token punctuation">{</span> onSearch <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>keyword<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>子组件对父组件暴露方法</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

  <span class="token keyword">const</span> childrenRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token function-variable function">onSearch</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    childrenRef<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">onSearch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>children</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>childrenRef<span class="token punctuation">&#39;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onSearch<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>search<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>父组件调用子组件的方法</p><h3 id="provide-inject" tabindex="-1"><a class="header-anchor" href="#provide-inject"><span>Provide / Inject</span></a></h3><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>import type { InjectionKey, Ref } from &#39;vue&#39;

export const ProvideKey = Symbol() as InjectionKey
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Ref</span>
<span class="token attr-name">&lt;string</span><span class="token punctuation">&gt;</span></span>&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在应用中使用 <code>ProvideKey</code></p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">{</span> provide<span class="token punctuation">,</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
  <span class="token keyword">import</span> <span class="token punctuation">{</span> ProvideKey <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./types&#39;</span>

  <span class="token keyword">const</span> text <span class="token operator">=</span> ref<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span>
  <span class="token function">provide</span><span class="token punctuation">(</span>ProvideKey<span class="token punctuation">,</span> text<span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>父组件为后代组件提供数据</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">{</span> inject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
  <span class="token keyword">import</span> <span class="token punctuation">{</span> ProvideKey <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./types&#39;</span>

  <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span>ProvideKey<span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">&gt;</span></span>{{value}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后代组件注入父组件提供的数据</p><h2 id="vue-中使用-typescript" tabindex="-1"><a class="header-anchor" href="#vue-中使用-typescript"><span>Vue 中使用 TypeScript</span></a></h2><h3 id="为组件的-props-标注类型" tabindex="-1"><a class="header-anchor" href="#为组件的-props-标注类型"><span>为组件的 props 标注类型</span></a></h3><p>当使用 <code>&lt;script setup&gt;</code> 时，<code>defineProps()</code> 宏函数支持从它的参数中推导类型</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">bar</span><span class="token operator">:</span> Number
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  props<span class="token punctuation">.</span>foo <span class="token comment">// string</span>
  props<span class="token punctuation">.</span>bar <span class="token comment">// number | undefined</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对同一个文件中的一个接口或对象类型字面量的引用：</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>interface Props {/* ... */}

defineProps
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Props</span><span class="token punctuation">&gt;</span></span>()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="props-解构默认值" tabindex="-1"><a class="header-anchor" href="#props-解构默认值"><span>Props 解构默认值</span></a></h4><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>export interface Props {
msg?: string
labels?: string[]
}

const props = withDefaults(defineProps
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Props</span><span class="token punctuation">&gt;</span></span>(), {
  msg: &#39;hello&#39;,
  labels: () =&gt; [&#39;one&#39;, &#39;two&#39;]
  })
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用目前为实验性的响应性语法糖</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> string
    count<span class="token operator">?</span><span class="token operator">:</span> number
  <span class="token punctuation">}</span>

  <span class="token comment">// 对 defineProps() 的响应性解构</span>
  <span class="token comment">// 默认值会被编译为等价的运行时选项</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">100</span>
  <span class="token punctuation">}</span> <span class="token operator">=</span> defineProps<span class="token operator">&lt;</span>Props<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="为组件的-emits-标注类型" tabindex="-1"><a class="header-anchor" href="#为组件的-emits-标注类型"><span>为组件的 emits 标注类型</span></a></h3><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 运行时</span>
  <span class="token keyword">const</span> emit <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;update&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token comment">// 基于类型</span>
  <span class="token keyword">const</span> emit <span class="token operator">=</span> defineEmits<span class="token operator">&lt;</span><span class="token punctuation">{</span>
    <span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">id</span><span class="token operator">:</span> number<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
    <span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token string">&#39;update&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> string<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
  <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="为-ref-标注类型" tabindex="-1"><a class="header-anchor" href="#为-ref-标注类型"><span>为 ref() 标注类型</span></a></h3><p>ref 会根据初始化时的值推导其类型：</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>import { ref } from &#39;vue&#39;
import type { Ref } from &#39;vue&#39;

const year: Ref
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span> <span class="token attr-name">|</span> <span class="token attr-name">number</span><span class="token punctuation">&gt;</span></span> = ref(&#39;2020&#39;)

  year.value = 2020 // 成功！
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="为-reactive-标注类型" tabindex="-1"><a class="header-anchor" href="#为-reactive-标注类型"><span>为 reactive() 标注类型</span></a></h3><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>import { reactive } from &#39;vue&#39;

interface Book {
title: string
year?: number
}

const book: Book = reactive({
title: &#39;Vue 3 指引&#39;
})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="为-computed-标注类型" tabindex="-1"><a class="header-anchor" href="#为-computed-标注类型"><span>为 computed() 标注类型</span></a></h3><p>你还可以通过泛型参数显式指定类型：</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>const double = computed
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>number</span><span class="token punctuation">&gt;</span></span>(() =&gt; {
  // 若返回值不是 number 类型则会报错
  })
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="为事件处理函数标注类型" tabindex="-1"><a class="header-anchor" href="#为事件处理函数标注类型"><span>为事件处理函数标注类型</span></a></h3><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">function</span> <span class="token function">handleChange</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \`event\` 隐式地标注为 \`any\` 类型</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>
    <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleChange<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>显式地为事件处理函数的参数标注类型</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>function handleChange(event: Event) {
const target = event.target as HTMLInputElement
console.log(target.value)
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="为-provide-inject-标注类型" tabindex="-1"><a class="header-anchor" href="#为-provide-inject-标注类型"><span>为 provide / inject 标注类型</span></a></h3><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>import { provide, inject } from &#39;vue&#39;
import type { InjectionKey } from &#39;vue&#39;

const key = Symbol() as InjectionKey
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">&gt;</span></span>
  // 若提供的是非字符串值会导致错误
  provide(key, &#39;foo&#39;)
  // foo 的类型：string | undefined
  const foo = inject(key)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="为模板引用标注类型" tabindex="-1"><a class="header-anchor" href="#为模板引用标注类型"><span>为模板引用标注类型</span></a></h3><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> onMounted <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

  <span class="token keyword">const</span> el <span class="token operator">=</span> ref<span class="token operator">&lt;</span>HTMLInputElement <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>

  <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    el<span class="token punctuation">.</span>value<span class="token operator">?.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>el<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="为组件模板引用标注类型" tabindex="-1"><a class="header-anchor" href="#为组件模板引用标注类型"><span>为组件模板引用标注类型</span></a></h3><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- MyModal.vue --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

  <span class="token keyword">const</span> isContentShown <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token function-variable function">open</span> <span class="token operator">=</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>isContentShown<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>

  <span class="token function">defineExpose</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    open
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 TypeScript 内置的 <code>InstanceType</code> 工具类型来获取其实例类</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- App.vue --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> MyModal <span class="token keyword">from</span> <span class="token string">&#39;./MyModal.vue&#39;</span>

  type Modal <span class="token operator">=</span> InstanceType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> MyModal<span class="token operator">&gt;</span>

  <span class="token keyword">const</span> modal <span class="token operator">=</span> ref<span class="token operator">&lt;</span>Modal <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> <span class="token function-variable function">openModal</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    modal<span class="token punctuation">.</span>value<span class="token operator">?.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="选项式-api-为组件的-props-标注类型" tabindex="-1"><a class="header-anchor" href="#选项式-api-为组件的-props-标注类型"><span>选项式 API 为组件的 props 标注类型</span></a></h3><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>import { defineComponent } from &#39;vue&#39;

export default defineComponent({
// 启用了类型推导
props: {
name: String,
id: [Number, String],
msg: { type: String, required: true },
metadata: null
},
mounted() {
// 类型：string | undefined
this.name
// 类型：number|string|undefined
this.id
// 类型：string
this.msg
// 类型：any
this.metadata
}
})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 PropType 这个工具类型来标记更复杂的 props 类型</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>import { defineComponent } from &#39;vue&#39;
import type { PropType } from &#39;vue&#39;

interface Book {
title: string
author: string
year: number
}

export default defineComponent({
props: {
book: {
// 提供相对 \`Object\` 更确定的类型
type: Object as PropType
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Book</span><span class="token punctuation">&gt;</span></span>,
  required: true
  },
  // 也可以标记函数
  callback: Function as PropType&lt;(id: number) =&gt; void&gt;
  },
  mounted() {
  this.book.title // string
  this.book.year // number

  // TS Error: argument of type &#39;string&#39; is not
  // assignable to parameter of type &#39;number&#39;
  this.callback?.(&#39;123&#39;)
  }
  })
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="选项式-api-为组件的-emits-标注类型" tabindex="-1"><a class="header-anchor" href="#选项式-api-为组件的-emits-标注类型"><span>选项式 API 为组件的 emits 标注类型</span></a></h3><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>import { defineComponent } from &#39;vue&#39;

type Payload = { bookName: string }

export default defineComponent({
emits: {
addBook(payload: Payload) {
// 执行运行时校验
return payload.bookName.length &gt; 0
}
},
methods: {
onSubmit() {
this.$emit(&#39;addBook&#39;, {
bookName: 123 // 类型错误
})
// 类型错误
this.$emit(&#39;non-declared-event&#39;)
}
}
})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="选项式-api-为计算属性标记类型" tabindex="-1"><a class="header-anchor" href="#选项式-api-为计算属性标记类型"><span>选项式 API 为计算属性标记类型</span></a></h3><p>计算属性会自动根据其返回值来推导其类型：</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>import { defineComponent } from &#39;vue&#39;

export default defineComponent({
data() {
return {
message: &#39;Hello!&#39;
}
},
computed: {
greeting() {
return this.message + &#39;!&#39;
}
},
mounted() {
this.greeting // 类型：string
}
})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在某些场景中，你可能想要显式地标记出计算属性的类型以确保其实现是正确的：</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>import { defineComponent } from &#39;vue&#39;

export default defineComponent({
data() {
return {
message: &#39;Hello!&#39;
}
},
computed: {
// 显式标注返回类型
greeting(): string {
return this.message + &#39;!&#39;
},

// 标注一个可写的计算属性
greetingUppercased: {
get(): string {
return this.greeting.toUpperCase()
},
set(newValue: string) {
this.message = newValue.toUpperCase()
}
}
}
})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="选项式-api-为事件处理函数标注类型" tabindex="-1"><a class="header-anchor" href="#选项式-api-为事件处理函数标注类型"><span>选项式 API 为事件处理函数标注类型</span></a></h3><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>import { defineComponent } from &#39;vue&#39;

export default defineComponent({
methods: {
handleChange(event: Event) {
console.log((event.target as HTMLInputElement).value)
}
}
})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="选项式-api-扩展全局属性" tabindex="-1"><a class="header-anchor" href="#选项式-api-扩展全局属性"><span>选项式 API 扩展全局属性</span></a></h3><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>import axios from &#39;axios&#39;

declare module &#39;vue&#39; {
interface ComponentCustomProperties {
$http: typeof axios
$translate: (key: string) =&gt; string
}
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="类型扩展的位置" tabindex="-1"><a class="header-anchor" href="#类型扩展的位置"><span>类型扩展的位置</span></a></h4><p>我们可以将这些类型扩展放在一个 <code>.ts</code> 文件，或是一个影响整个项目的 <code>*.d.ts</code> 文件中</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>// 不工作，将覆盖原始类型。
declare module &#39;vue&#39; {
interface ComponentCustomProperties {
$translate: (key: string) =&gt; string
}
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>// 正常工作。
export {}

declare module &#39;vue&#39; {
interface ComponentCustomProperties {
$translate: (key: string) =&gt; string
}
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="选项式-api-扩展自定义选项" tabindex="-1"><a class="header-anchor" href="#选项式-api-扩展自定义选项"><span>选项式 API 扩展自定义选项</span></a></h3><p>某些插件，比如 vue-router，提供了一些自定义的组件选项，比如 beforeRouteEnter：</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>import { defineComponent } from &#39;vue&#39;

export default defineComponent({
beforeRouteEnter(to, from, next) {
// ...
}
})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果没有确切的类型标注，这个钩子函数的参数会隐式地标注为 <code>any</code> 类型。我们可以为 <code>ComponentCustomOptions</code> 接口扩展自定义的选项来支持：</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>import { Route } from &#39;vue-router&#39;

declare module &#39;vue&#39; {
interface ComponentCustomOptions {
beforeRouteEnter?(
to: Route,
from: Route,
next: () =&gt; void
): void
}
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="api-参考" tabindex="-1"><a class="header-anchor" href="#api-参考"><span>API 参考</span></a></h2><h3 id="全局-api-应用实例" tabindex="-1"><a class="header-anchor" href="#全局-api-应用实例"><span>全局 API - 应用实例</span></a></h3><table><thead><tr><th>:-</th><th>:-</th></tr></thead><tbody><tr><td><code>createApp()</code></td><td>创建一个应用实例 [1]#[2]</td></tr><tr><td><code>createSSRApp()</code></td><td>以 [3]SSR 激活[4]模式创建一个应用实例 [5]#[6]</td></tr><tr><td><code>app.mount()</code></td><td>将应用实例挂载在一个容器元素中 [7]#[8]</td></tr><tr><td><code>app.unmount()</code></td><td>卸载一个已挂载的应用实例 [9]#[10]</td></tr><tr><td><code>app.provide()</code></td><td>提供一个可以在应用中的所有后代组件中注入使用的值 [11]#[12]</td></tr><tr><td><code>app.component()</code></td><td>注册或获取全局组件 [13]#[14]</td></tr><tr><td><code>app.directive()</code></td><td>注册或获取全局指令 [15]#[16]</td></tr><tr><td><code>app.use()</code></td><td>安装一个插件 [17]#[18]</td></tr><tr><td><code>app.mixin()</code></td><td>全局注册一个混入 [19]#[20]</td></tr><tr><td><code>app.version</code></td><td>当前应用所使用的 Vue 版本号 [21]#[22]</td></tr><tr><td><code>app.config</code></td><td>获得应用实例的配置设定 [23]#[24]</td></tr><tr><td><code>app.config.errorHandler</code></td><td>为应用内抛出的未捕获错误指定一个全局处理函数 [25]#[26]</td></tr><tr><td><code>app.config.warnHandler</code></td><td>为 Vue 的运行时警告指定一个自定义处理函数 [27]#[28]</td></tr><tr><td><code>app.config.performance</code></td><td>在浏览器开发工具中追踪性能表现 [29]#[30]</td></tr><tr><td><code>app.config.compilerOptions</code></td><td>配置运行时编译器的选项 [31]#[32]</td></tr><tr><td><code>app.config.globalProperties</code></td><td>注册全局属性对象 [33]#[34]</td></tr><tr><td><code>app.config.optionMergeStrategies</code></td><td>定义自定义组件选项的合并策略的对象 [35]#[36]</td></tr></tbody></table><h3 id="全局-api-通用" tabindex="-1"><a class="header-anchor" href="#全局-api-通用"><span>全局 API - 通用</span></a></h3><table><thead><tr><th>:-</th><th>:-</th></tr></thead><tbody><tr><td><code>version</code></td><td>Vue 版本号 [37]#[38]</td></tr><tr><td><code>nextTick()</code></td><td>等待下一次 DOM 更新后执行回调 [39]#[40]</td></tr><tr><td><code>defineComponent()</code></td><td>在定义 Vue 组件时提供类型推导的辅助函数 [41]#[42]</td></tr><tr><td><code>defineAsyncComponent()</code></td><td>定义一个异步组件 [43]#[44]</td></tr><tr><td><code>defineCustomElement()</code></td><td>和 <code>defineComponent</code> 接受的参数相同，不同的是会返回一个原生自定义元素类的构造器 [45]#[46]</td></tr></tbody></table><h3 id="组合式-api-setup" tabindex="-1"><a class="header-anchor" href="#组合式-api-setup"><span>组合式 API - setup()</span></a></h3><table><thead><tr><th>:-</th><th>:-</th></tr></thead><tbody><tr><td><code>基本使用</code></td><td>[47]#[48]</td></tr><tr><td><code>访问 Props</code></td><td>[49]#[50]</td></tr><tr><td><code>Setup 上下文</code></td><td>[51]#[52]</td></tr><tr><td><code>与渲染函数一起使用</code></td><td>[53]#[54]</td></tr></tbody></table><h3 id="组合式-api-依赖注入" tabindex="-1"><a class="header-anchor" href="#组合式-api-依赖注入"><span>组合式 API - 依赖注入</span></a></h3><table><thead><tr><th>:-</th><th>:-</th></tr></thead><tbody><tr><td><code>provide()</code></td><td>提供一个可以被后代组件中注入使用的值 [55]#[56]</td></tr><tr><td><code>inject()</code></td><td>注入一个由祖先组件提供的值 [57]#[58]</td></tr></tbody></table><h3 id="组合式-api-生命周期钩子" tabindex="-1"><a class="header-anchor" href="#组合式-api-生命周期钩子"><span>组合式 API - 生命周期钩子</span></a></h3><table><thead><tr><th>:-</th><th>:-</th></tr></thead><tbody><tr><td><code>onMounted()</code></td><td>组件挂载完成后执行 [59]#[60]</td></tr><tr><td><code>onUpdated()</code></td><td>状态变更而更新其 DOM 树之后调用 [61]#[62]</td></tr><tr><td><code>onUnmounted()</code></td><td>组件实例被卸载之后调用 [63]#[64]</td></tr><tr><td><code>onBeforeMount()</code></td><td>组件被挂载之前被调用 [65]#[66]</td></tr><tr><td><code>onBeforeUpdate()</code></td><td>状态变更而更新其 DOM 树之前调用 [67]#[68]</td></tr><tr><td><code>onBeforeUnmount()</code></td><td>组件实例被卸载之前调用 [69]#[70]</td></tr><tr><td><code>onErrorCaptured()</code></td><td>捕获了后代组件传递的错误时调用 [71]#[72]</td></tr><tr><td><code>onRenderTracked()</code></td><td>组件渲染过程中追踪到响应式依赖时调用 [73]#[74]</td></tr><tr><td><code>onRenderTriggered()</code></td><td>响应式依赖的变更触发了组件渲染时调用 [75]#[76]</td></tr><tr><td><code>onActivated()</code></td><td>若组件实例是 <code>&lt;KeepAlive&gt;</code> 缓存树的一部分，当组件被插入到 DOM 中时调用 [77]#[78]</td></tr><tr><td><code>onDeactivated()</code></td><td>若组件实例是 <code>&lt;KeepAlive&gt;</code> 缓存树的一部分，当组件从 DOM 中被移除时调用 [79]#[80]</td></tr><tr><td><code>onServerPrefetch()</code></td><td>组件实例在服务器上被渲染之前调用 [81]#[82]</td></tr></tbody></table><h3 id="组合式-api-响应式-工具" tabindex="-1"><a class="header-anchor" href="#组合式-api-响应式-工具"><span>组合式 API - 响应式: 工具</span></a></h3><table><thead><tr><th>:-</th><th>:-</th></tr></thead><tbody><tr><td><code>isRef()</code></td><td>判断是否为 ref [83]#[84]</td></tr><tr><td><code>unref()</code></td><td>是 ref，返回内部值，否则返回参数本身 [85]#[86]</td></tr><tr><td><code>toRef()</code></td><td>创建一个属性对应的 ref [87]#[88]</td></tr><tr><td><code>toRefs()</code></td><td>将对象上的每一个可枚举属性转换为 ref [89]#[90]</td></tr><tr><td><code>isProxy()</code></td><td>检查一个对象是否是由 <code>reactive()</code>、<code>readonly()</code>、<code>shallowReactive()</code> 或 <code>shallowReadonly()</code> 创建的代理 [91]#[92]</td></tr><tr><td><code>isReactive()</code></td><td>检查一个对象是否是由 <code>reactive()</code> 或 <code>shallowReactive()</code> 创建的代理。 [93]#[94]</td></tr><tr><td><code>isReadonly()</code></td><td>检查传入的值是否为只读对象 [95]#[96]</td></tr></tbody></table><h3 id="组合式-api-响应式-核心" tabindex="-1"><a class="header-anchor" href="#组合式-api-响应式-核心"><span>组合式 API - 响应式: 核心</span></a></h3><table><thead><tr><th>:-</th><th>:-</th></tr></thead><tbody><tr><td><code>ref()</code></td><td>返回一个 ref 对象 [97]#[98]</td></tr><tr><td><code>computed ()</code></td><td>定义一个计算属性 [99]#[100]</td></tr><tr><td><code>reactive()</code></td><td>返回一个对象的响应式代理 [101]#[102]</td></tr><tr><td><code>readonly()</code></td><td>返回一个原值的只读代理 [103]#[104]</td></tr><tr><td><code>watchEffect()</code></td><td>立即运行一个函数，同时监听 [105]#[106]</td></tr><tr><td><code>watchPostEffect()</code></td><td><code>watchEffect()</code> 使用 <code>flush: &#39;post&#39;</code> 选项时的别名。 [107]#[108]</td></tr><tr><td><code>watchSyncEffect()</code></td><td><code>watchEffect()</code> 使用 <code>flush: &#39;sync&#39;</code> 选项时的别名。 [109]#[110]</td></tr><tr><td><code>watch()</code></td><td>侦听一个或多个响应式数据源 [111]#[112]</td></tr></tbody></table><h3 id="选项式-api-状态选项" tabindex="-1"><a class="header-anchor" href="#选项式-api-状态选项"><span>选项式 API - 状态选项</span></a></h3><table><thead><tr><th>:-</th><th>:-</th></tr></thead><tbody><tr><td><code>data</code></td><td>声明组件初始响应式状态 [113]#[114]</td></tr><tr><td><code>props</code></td><td>声明一个组件的 props [115]#[116]</td></tr><tr><td><code>computed</code></td><td>声明要在组件实例上暴露的计算属性 [117]#[118]</td></tr><tr><td><code>methods</code></td><td>声明要混入到组件实例中的方法 [119]#[120]</td></tr><tr><td><code>watch</code></td><td>声明在数据更改时调用的侦听回调 [121]#[122]</td></tr><tr><td><code>emits</code></td><td>声明由组件触发的自定义事件 [123]#[124]</td></tr><tr><td><code>expose</code></td><td>声明当组件实例被父组件通过模板引用访问时暴露的公共属性 [125]#[126]</td></tr></tbody></table><h3 id="选项式-api-生命周期选项" tabindex="-1"><a class="header-anchor" href="#选项式-api-生命周期选项"><span>选项式 API - 生命周期选项</span></a></h3><table><thead><tr><th>:-</th><th>:-</th></tr></thead><tbody><tr><td><code>beforeCreate</code></td><td>组件实例初始化完成之后立即调用 [127]#[128]</td></tr><tr><td><code>created</code></td><td>组件实例处理完所有与状态相关的选项后调用 [129]#[130]</td></tr><tr><td><code>beforeMount</code></td><td>组件被挂载之前调用 [131]#[132]</td></tr><tr><td><code>mounted</code></td><td>组件被挂载之后调用 [133]#[134]</td></tr><tr><td><code>beforeUpdate</code></td><td>状态变更而更新其 DOM 树之前调用 [135]#[136]</td></tr><tr><td><code>updated</code></td><td>状态变更而更新其 DOM 树之后调用 [137]#[138]</td></tr><tr><td><code>beforeUnmount</code></td><td>组件实例被卸载之前调用 [139]#[140]</td></tr><tr><td><code>unmounted</code></td><td>组件实例被卸载之后调用 [141]#[142]</td></tr><tr><td><code>errorCaptured</code></td><td>捕获了后代组件传递的错误时调用 [143]#[144]</td></tr><tr><td><code>renderTracked</code> **<em>Dev only</em></td><td>组件渲染过程中追踪到响应式依赖时调用 [145]#[146]</td></tr><tr><td><code>renderTriggered</code> **<em>Dev only</em></td><td>响应式依赖的变更触发了组件渲染时调用 [147]#[148]</td></tr><tr><td><code>activated</code></td><td>若组件实例是 <code>&lt;KeepAlive&gt;</code> 缓存树的一部分，当组件被插入到 DOM 中时调用 [149]#[150]</td></tr><tr><td><code>deactivated</code></td><td>若组件实例是 <code>&lt;KeepAlive&gt;</code> 缓存树的一部分，当组件从 DOM 中被移除时调用 [151]#[152]</td></tr><tr><td><code>serverPrefetch</code> **<em>SSR only</em></td><td>组件实例在服务器上被渲染之前调用 [153]#[154]</td></tr></tbody></table><h3 id="选项式-api-其他杂项" tabindex="-1"><a class="header-anchor" href="#选项式-api-其他杂项"><span>选项式 API - 其他杂项</span></a></h3><table><thead><tr><th>:-</th><th>:-</th></tr></thead><tbody><tr><td><code>name</code></td><td>显式声明组件展示时的名称 [155]#[156]</td></tr><tr><td><code>inheritAttrs</code></td><td>是否启用默认的组件 <code>attribute</code> 透传行为 [157]#[158]</td></tr><tr><td><code>components</code></td><td>注册对当前组件实例可用的组件 [159]#[160]</td></tr><tr><td><code>directives</code></td><td>注册对当前组件实例可用的指令 [161]#[162]</td></tr></tbody></table><h3 id="选项式-api-渲染选项" tabindex="-1"><a class="header-anchor" href="#选项式-api-渲染选项"><span>选项式 API - 渲染选项</span></a></h3><table><thead><tr><th>:-</th><th>:-</th></tr></thead><tbody><tr><td><code>template</code></td><td>声明组件的字符串模板 [163]#[164]</td></tr><tr><td><code>render</code></td><td>编程式地创建组件虚拟 DOM 树的函数 [165]#[166]</td></tr><tr><td><code>compilerOptions</code></td><td>配置组件模板的运行时编译器选项 [167]#[168]</td></tr></tbody></table><h3 id="选项式-api-组件实例" tabindex="-1"><a class="header-anchor" href="#选项式-api-组件实例"><span>选项式 API - 组件实例</span></a></h3><table><thead><tr><th>:-</th><th>:-</th></tr></thead><tbody><tr><td><code>$data</code></td><td>观察的数据对象 [169]#[170]</td></tr><tr><td><code>$props</code></td><td>组件已解析的 props 对象 [171]#[172]</td></tr><tr><td><code>$el</code></td><td>实例管理的 DOM 根节点 [173]#[174]</td></tr><tr><td><code>$options</code></td><td>实例的初始化选项 [175]#[176]</td></tr><tr><td><code>$parent</code></td><td>父实例 [177]#[178]</td></tr><tr><td><code>$root</code></td><td>当前组件树的根实例 [179]#[180]</td></tr><tr><td><code>$slots</code></td><td>访问被插槽分发的内容 [181]#[182]</td></tr><tr><td><code>$refs</code></td><td>DOM 元素和组件实例 [183]#[184]</td></tr><tr><td><code>$attrs</code></td><td>包含了组件所有[185]透传 attributes[186] [187]#[188]</td></tr><tr><td><code>$watch()</code></td><td>观察 Vue 实例上的一个表达式或者一个函数计算结果的变化 [189]#[190]</td></tr><tr><td><code>$emit()</code></td><td>触发一个自定义事件 [191]#[192]</td></tr><tr><td><code>$forceUpdate()</code></td><td>强制该组件重新渲染 [193]#[194]</td></tr><tr><td><code>$nextTick()</code></td><td>回调延迟执行 [195]#[196]</td></tr></tbody></table><h3 id="选项式-api-组合选项" tabindex="-1"><a class="header-anchor" href="#选项式-api-组合选项"><span>选项式 API - 组合选项</span></a></h3><table><thead><tr><th>:-</th><th>:-</th></tr></thead><tbody><tr><td><code>provide</code></td><td>提供可以被后代组件注入的值 [197]#[198]</td></tr><tr><td><code>inject</code></td><td>注入一个由祖先组件提供的值 [199]#[200]</td></tr><tr><td><code>mixins</code></td><td>接收一个混入对象的数组 [201]#[202]</td></tr><tr><td><code>extends</code></td><td>要继承的“基类”组件 [203]#[204]</td></tr></tbody></table><h3 id="内置内容-指令" tabindex="-1"><a class="header-anchor" href="#内置内容-指令"><span>内置内容 - 指令</span></a></h3><table><thead><tr><th>:-</th><th>:-</th></tr></thead><tbody><tr><td><code>v-text</code></td><td>更新元素的 <code>textContent</code> [205]#[206]</td></tr><tr><td><code>v-html</code></td><td>更新元素的 <code>innerHTML</code> [207]#[208]</td></tr><tr><td><code>v-show</code></td><td>切换元素的 <code>display</code> css 属性 [209]#[210]</td></tr><tr><td><code>v-if</code></td><td>有条件地渲染元素 [211]#[212]</td></tr><tr><td><code>v-else</code></td><td>[213]#[214]</td></tr><tr><td><code>v-else-if</code></td><td>[215]#[216]</td></tr><tr><td><code>v-for</code></td><td>多次渲染元素或模板块 [217]#[218]</td></tr><tr><td><code>v-on</code></td><td>绑定事件监听器 [219]#[220]</td></tr><tr><td><code>v-bind</code></td><td>动态地绑定一个或多个属性 [221]#[222]</td></tr><tr><td><code>v-model</code></td><td>创建双向绑定 [223]#[224]</td></tr><tr><td><code>v-slot</code></td><td>提供插槽或接收 props 的插槽 [225]#[226]</td></tr><tr><td><code>v-pre</code></td><td>跳过元素和它的子元素编译过程 [227]#[228]</td></tr><tr><td><code>v-once</code></td><td>只渲染元素和组件一次 [229]#[230]</td></tr><tr><td><code>v-memo</code> **<em>(3.2+)</em></td><td>缓存一个模板的子树 [231]#[232]</td></tr><tr><td><code>v-cloak</code></td><td>保持在元素上直到实例结束编译 [233]#[234]</td></tr><tr><td><code>serverPrefetch</code> **<em>SSR only</em></td><td>组件实例在服务器上被渲染之前调用 [235]#[236]</td></tr></tbody></table><h3 id="内置内容-组件" tabindex="-1"><a class="header-anchor" href="#内置内容-组件"><span>内置内容 - 组件</span></a></h3><table><thead><tr><th>:-</th><th>:-</th></tr></thead><tbody><tr><td><code>&lt;Transition&gt;</code></td><td>单个元素/组件的过渡效果 [237]#[238]</td></tr><tr><td><code>&lt;TransitionGroup&gt;</code></td><td>多个元素/组件的过渡效果 [239]#[240]</td></tr><tr><td><code>&lt;KeepAlive&gt;</code></td><td>缓存包裹在其中的动态切换组件 [241]#[242]</td></tr><tr><td><code>&lt;Teleport&gt;</code></td><td>将其插槽内容渲染到 DOM 中的另一个位置 [243]#[244]</td></tr><tr><td><code>&lt;Suspense&gt;</code> **<em>(Experimental)</em></td><td>协调对组件树中嵌套的异步依赖的处理 [245]#[246]</td></tr></tbody></table><h3 id="内置内容-特殊-attributes" tabindex="-1"><a class="header-anchor" href="#内置内容-特殊-attributes"><span>内置内容 - 特殊 Attributes</span></a></h3><table><thead><tr><th>:-</th><th>:-</th></tr></thead><tbody><tr><td><code>key</code></td><td>用在 Vue 的虚拟 DOM 算法 [247]#[248]</td></tr><tr><td><code>ref</code></td><td>元素或子组件注册引用信息 [249]#[250]</td></tr><tr><td><code>is</code></td><td>绑定动态组件 [251]#[252]</td></tr></tbody></table><h3 id="内置内容-特殊元素" tabindex="-1"><a class="header-anchor" href="#内置内容-特殊元素"><span>内置内容 - 特殊元素</span></a></h3><table><thead><tr><th>:-</th><th>:-</th></tr></thead><tbody><tr><td><code>&lt;component&gt;</code></td><td>渲染一个“元组件”用于动态组件或元素 [253]#[254]</td></tr><tr><td><code>&lt;slot&gt;</code></td><td>组件模板中的插槽内容出口 [255]#[256]</td></tr></tbody></table><h3 id="单文件组件-语法定义" tabindex="-1"><a class="header-anchor" href="#单文件组件-语法定义"><span>单文件组件 - 语法定义</span></a></h3><table><thead><tr><th>:-</th><th>:-</th></tr></thead><tbody><tr><td><code>总览</code></td><td>[257]#[258]</td></tr><tr><td><code>相应语言块</code></td><td>[259]#[260]</td></tr><tr><td><code>自动名称推导</code></td><td>[261]#[262]</td></tr><tr><td><code>预处理器</code></td><td>[263]#[264]</td></tr><tr><td><code>Src 导入</code></td><td>[265]#[266]</td></tr><tr><td><code>注释</code></td><td>[267]#[268]</td></tr></tbody></table><h3 id="单文件组件-script-setup" tabindex="-1"><a class="header-anchor" href="#单文件组件-script-setup"><span>单文件组件 - <code>&lt;script setup&gt;</code></span></a></h3><table><thead><tr><th>:-</th><th>:-</th></tr></thead><tbody><tr><td><code>基本语法</code></td><td>[269]#[270]</td></tr><tr><td><code>响应式</code></td><td>[271]#[272]</td></tr><tr><td><code>使用组件</code></td><td>[273]#[274]</td></tr><tr><td><code>使用自定义指令</code></td><td>[275]#[276]</td></tr><tr><td><code>defineProps() 和 defineEmits()</code></td><td>[277]#[278]</td></tr><tr><td><code>defineExpose</code></td><td>[279]#[280]</td></tr><tr><td><code>useSlots() 和 useAttrs()</code></td><td>[281]#[282]</td></tr><tr><td><code>与普通的 &lt;script&gt; 一起使用</code></td><td>[283]#[284]</td></tr><tr><td><code>顶层 await</code></td><td>[285]#[286]</td></tr><tr><td><code>针对 TypeScript 的功能</code></td><td>[287]#[288]</td></tr><tr><td><code>限制</code></td><td>[289]#[290]</td></tr></tbody></table><h3 id="单文件组件-css-功能" tabindex="-1"><a class="header-anchor" href="#单文件组件-css-功能"><span>单文件组件 - CSS 功能</span></a></h3><table><thead><tr><th>:-</th><th>:-</th></tr></thead><tbody><tr><td><code>组件作用域 CSS</code></td><td>[291]#[292]</td></tr><tr><td><code>CSS Modules</code></td><td>[293]#[294]</td></tr><tr><td><code>CSS 中的 v-bind()</code></td><td>[295]#[296]</td></tr></tbody></table><h3 id="进阶-api-渲染函数" tabindex="-1"><a class="header-anchor" href="#进阶-api-渲染函数"><span>进阶 API - 渲染函数</span></a></h3><table><thead><tr><th>:-</th><th>:-</th></tr></thead><tbody><tr><td><code>h()</code></td><td>创建虚拟 DOM 节点 [297]#[298]</td></tr><tr><td><code>mergeProps()</code></td><td>合并多个 props 对象 [299]#[300]</td></tr><tr><td><code>cloneVNode()</code></td><td>克隆一个 vnode [301]#[302]</td></tr><tr><td><code>isVNode()</code></td><td>判断一个值是否为 vnode 类型 [303]#[304]</td></tr><tr><td><code>resolveComponent()</code></td><td>按名称手动解析已注册的组件 [305]#[306]</td></tr><tr><td><code>resolveDirective()</code></td><td>按名称手动解析已注册的指令 [307]#[308]</td></tr><tr><td><code>withDirectives()</code></td><td>用于给 vnode 增加自定义指令 [309]#[310]</td></tr><tr><td><code>withModifiers()</code></td><td>用于向事件处理函数添加内置 <code>v-on 修饰符</code> [311]#[312]</td></tr></tbody></table><h3 id="进阶-api-服务端渲染" tabindex="-1"><a class="header-anchor" href="#进阶-api-服务端渲染"><span>进阶 API - 服务端渲染</span></a></h3><table><thead><tr><th>:-</th><th>:-</th></tr></thead><tbody><tr><td><code>renderToString()</code></td><td>[313]#[314]</td></tr><tr><td><code>renderToNodeStream()</code></td><td>[315]#[316]</td></tr><tr><td><code>pipeToNodeWritable()</code></td><td>[317]#[318]</td></tr><tr><td><code>renderToWebStream()</code></td><td>[319]#[320]</td></tr><tr><td><code>pipeToWebWritable()</code></td><td>[321]#[322]</td></tr><tr><td><code>renderToSimpleStream()</code></td><td>[323]#[324]</td></tr><tr><td><code>useSSRContext()</code></td><td>[325]#[326]</td></tr></tbody></table><h3 id="进阶-api-typescript-工具类型" tabindex="-1"><a class="header-anchor" href="#进阶-api-typescript-工具类型"><span>进阶 API - TypeScript 工具类型</span></a></h3><table><thead><tr><th>:-</th><th>:-</th></tr></thead><tbody><tr><td><code>PropType&lt;T&gt;</code></td><td>在用运行时 props 声明时给一个 prop 标注更复杂的类型定义 [327]#[328]</td></tr><tr><td><code>ComponentCustomProperties</code></td><td>增强组件实例类型以支持自定义全局属性 [329]#[330]</td></tr><tr><td><code>ComponentCustomOptions</code></td><td>扩展组件选项类型以支持自定义选项 [331]#[332]</td></tr><tr><td><code>ComponentCustomProps</code></td><td>扩展全局可用的 TSX props [333]#[334]</td></tr><tr><td><code>CSSProperties</code></td><td>扩展在样式属性绑定上允许的值的类型 [335]#[336]</td></tr></tbody></table><h3 id="进阶-api-自定义渲染" tabindex="-1"><a class="header-anchor" href="#进阶-api-自定义渲染"><span>进阶 API - 自定义渲染</span></a></h3><table><thead><tr><th>:-</th><th>:-</th></tr></thead><tbody><tr><td><code>createRenderer()</code></td><td>创建一个自定义渲染器 [337]#[338]</td></tr></tbody></table>`,218),i=[p];function l(c,o){return s(),a("div",null,i)}const r=n(e,[["render",l],["__file","Vue3速查表.html.vue"]]),v=JSON.parse('{"path":"/dev/Vue3%E9%80%9F%E6%9F%A5%E8%A1%A8.html","title":"Vue3速查表","lang":"zh-CN","frontmatter":{"author":"xlc520","title":"Vue3速查表","excerpt":null,"description":"Vue3 速查表 入门 介绍 Vue 是一套用于构建用户界面的渐进式框架 注意：Vue 3.x 版本对应 Vue Router 4.x 路由版本 创建应用 已安装 16.0 或更高版本的 Node.js 指令将会安装并执行 create-vue，它是 Vue 官方的项目脚手架工具 安装依赖并启动开发服务器 当你准备将应用发布到生产环境时，请运行： 此命...","date":"2024-02-25T00:00:00.000Z","category":"Java","tag":"Java","article":true,"timeline":true,"icon":"java","head":[["meta",{"property":"og:url","content":"https://blog.ciberviler.top/dev/Vue3%E9%80%9F%E6%9F%A5%E8%A1%A8.html"}],["meta",{"property":"og:site_name","content":"StudyNote"}],["meta",{"property":"og:title","content":"Vue3速查表"}],["meta",{"property":"og:description","content":"Vue3 速查表 入门 介绍 Vue 是一套用于构建用户界面的渐进式框架 注意：Vue 3.x 版本对应 Vue Router 4.x 路由版本 创建应用 已安装 16.0 或更高版本的 Node.js 指令将会安装并执行 create-vue，它是 Vue 官方的项目脚手架工具 安装依赖并启动开发服务器 当你准备将应用发布到生产环境时，请运行： 此命..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-27T13:32:36.000Z"}],["meta",{"property":"article:author","content":"xlc520"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2024-02-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-27T13:32:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue3速查表\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-02-25T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-27T13:32:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xlc520\\"}]}"]]},"headers":[{"level":2,"title":"入门","slug":"入门","link":"#入门","children":[{"level":3,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":3,"title":"创建应用","slug":"创建应用","link":"#创建应用","children":[]},{"level":3,"title":"应用实例","slug":"应用实例","link":"#应用实例","children":[]},{"level":3,"title":"通过 CDN 使用 Vue","slug":"通过-cdn-使用-vue","link":"#通过-cdn-使用-vue","children":[]},{"level":3,"title":"使用 ES 模块构建版本","slug":"使用-es-模块构建版本","link":"#使用-es-模块构建版本","children":[]}]},{"level":2,"title":"模板语法","slug":"模板语法","link":"#模板语法","children":[{"level":3,"title":"文本插值","slug":"文本插值","link":"#文本插值","children":[]},{"level":3,"title":"原始 HTML","slug":"原始-html","link":"#原始-html","children":[]},{"level":3,"title":"Attribute 绑定","slug":"attribute-绑定","link":"#attribute-绑定","children":[]},{"level":3,"title":"布尔型 Attribute","slug":"布尔型-attribute","link":"#布尔型-attribute","children":[]},{"level":3,"title":"动态绑定多个值","slug":"动态绑定多个值","link":"#动态绑定多个值","children":[]},{"level":3,"title":"使用 JavaScript 表达式","slug":"使用-javascript-表达式","link":"#使用-javascript-表达式","children":[]},{"level":3,"title":"仅支持表达式(例子都是无效)","slug":"仅支持表达式-例子都是无效","link":"#仅支持表达式-例子都是无效","children":[]},{"level":3,"title":"调用函数","slug":"调用函数","link":"#调用函数","children":[]},{"level":3,"title":"指令 Directives","slug":"指令-directives","link":"#指令-directives","children":[]},{"level":3,"title":"参数 Arguments","slug":"参数-arguments","link":"#参数-arguments","children":[]},{"level":3,"title":"绑定事件","slug":"绑定事件","link":"#绑定事件","children":[]},{"level":3,"title":"动态参数","slug":"动态参数","link":"#动态参数","children":[]},{"level":3,"title":"动态的事件名称","slug":"动态的事件名称","link":"#动态的事件名称","children":[]},{"level":3,"title":"修饰符 Modifiers","slug":"修饰符-modifiers","link":"#修饰符-modifiers","children":[]},{"level":3,"title":"指令语法","slug":"指令语法","link":"#指令语法","children":[]}]},{"level":2,"title":"响应式基础","slug":"响应式基础","link":"#响应式基础","children":[{"level":3,"title":"声明状态","slug":"声明状态","link":"#声明状态","children":[]},{"level":3,"title":"声明方法","slug":"声明方法","link":"#声明方法","children":[]},{"level":3,"title":"<script setup> setup 语法糖","slug":"script-setup-setup-语法糖","link":"#script-setup-setup-语法糖","children":[]},{"level":3,"title":"用 ref() 定义响应式变量","slug":"用-ref-定义响应式变量","link":"#用-ref-定义响应式变量","children":[]},{"level":3,"title":"有状态方法","slug":"有状态方法","link":"#有状态方法","children":[]},{"level":3,"title":"响应式样式","slug":"响应式样式","link":"#响应式样式","children":[]}]},{"level":2,"title":"响应式进阶 —— watch 和 computed","slug":"响应式进阶-——-watch-和-computed","link":"#响应式进阶-——-watch-和-computed","children":[{"level":3,"title":"监听状态","slug":"监听状态","link":"#监听状态","children":[]},{"level":3,"title":"立即监听状态","slug":"立即监听状态","link":"#立即监听状态","children":[]},{"level":3,"title":"计算状态","slug":"计算状态","link":"#计算状态","children":[]}]},{"level":2,"title":"组件通信","slug":"组件通信","link":"#组件通信","children":[{"level":3,"title":"defineProps","slug":"defineprops","link":"#defineprops","children":[]},{"level":3,"title":"defineEmits","slug":"defineemits","link":"#defineemits","children":[]},{"level":3,"title":"defineExpose","slug":"defineexpose","link":"#defineexpose","children":[]},{"level":3,"title":"Provide / Inject","slug":"provide-inject","link":"#provide-inject","children":[]}]},{"level":2,"title":"Vue 中使用 TypeScript","slug":"vue-中使用-typescript","link":"#vue-中使用-typescript","children":[{"level":3,"title":"为组件的 props 标注类型","slug":"为组件的-props-标注类型","link":"#为组件的-props-标注类型","children":[]},{"level":3,"title":"为组件的 emits 标注类型","slug":"为组件的-emits-标注类型","link":"#为组件的-emits-标注类型","children":[]},{"level":3,"title":"为 ref() 标注类型","slug":"为-ref-标注类型","link":"#为-ref-标注类型","children":[]},{"level":3,"title":"为 reactive() 标注类型","slug":"为-reactive-标注类型","link":"#为-reactive-标注类型","children":[]},{"level":3,"title":"为 computed() 标注类型","slug":"为-computed-标注类型","link":"#为-computed-标注类型","children":[]},{"level":3,"title":"为事件处理函数标注类型","slug":"为事件处理函数标注类型","link":"#为事件处理函数标注类型","children":[]},{"level":3,"title":"为 provide / inject 标注类型","slug":"为-provide-inject-标注类型","link":"#为-provide-inject-标注类型","children":[]},{"level":3,"title":"为模板引用标注类型","slug":"为模板引用标注类型","link":"#为模板引用标注类型","children":[]},{"level":3,"title":"为组件模板引用标注类型","slug":"为组件模板引用标注类型","link":"#为组件模板引用标注类型","children":[]},{"level":3,"title":"选项式 API 为组件的 props 标注类型","slug":"选项式-api-为组件的-props-标注类型","link":"#选项式-api-为组件的-props-标注类型","children":[]},{"level":3,"title":"选项式 API 为组件的 emits 标注类型","slug":"选项式-api-为组件的-emits-标注类型","link":"#选项式-api-为组件的-emits-标注类型","children":[]},{"level":3,"title":"选项式 API 为计算属性标记类型","slug":"选项式-api-为计算属性标记类型","link":"#选项式-api-为计算属性标记类型","children":[]},{"level":3,"title":"选项式 API 为事件处理函数标注类型","slug":"选项式-api-为事件处理函数标注类型","link":"#选项式-api-为事件处理函数标注类型","children":[]},{"level":3,"title":"选项式 API 扩展全局属性","slug":"选项式-api-扩展全局属性","link":"#选项式-api-扩展全局属性","children":[]},{"level":3,"title":"选项式 API 扩展自定义选项","slug":"选项式-api-扩展自定义选项","link":"#选项式-api-扩展自定义选项","children":[]}]},{"level":2,"title":"API 参考","slug":"api-参考","link":"#api-参考","children":[{"level":3,"title":"全局 API - 应用实例","slug":"全局-api-应用实例","link":"#全局-api-应用实例","children":[]},{"level":3,"title":"全局 API - 通用","slug":"全局-api-通用","link":"#全局-api-通用","children":[]},{"level":3,"title":"组合式 API - setup()","slug":"组合式-api-setup","link":"#组合式-api-setup","children":[]},{"level":3,"title":"组合式 API - 依赖注入","slug":"组合式-api-依赖注入","link":"#组合式-api-依赖注入","children":[]},{"level":3,"title":"组合式 API - 生命周期钩子","slug":"组合式-api-生命周期钩子","link":"#组合式-api-生命周期钩子","children":[]},{"level":3,"title":"组合式 API - 响应式: 工具","slug":"组合式-api-响应式-工具","link":"#组合式-api-响应式-工具","children":[]},{"level":3,"title":"组合式 API - 响应式: 核心","slug":"组合式-api-响应式-核心","link":"#组合式-api-响应式-核心","children":[]},{"level":3,"title":"选项式 API - 状态选项","slug":"选项式-api-状态选项","link":"#选项式-api-状态选项","children":[]},{"level":3,"title":"选项式 API - 生命周期选项","slug":"选项式-api-生命周期选项","link":"#选项式-api-生命周期选项","children":[]},{"level":3,"title":"选项式 API - 其他杂项","slug":"选项式-api-其他杂项","link":"#选项式-api-其他杂项","children":[]},{"level":3,"title":"选项式 API - 渲染选项","slug":"选项式-api-渲染选项","link":"#选项式-api-渲染选项","children":[]},{"level":3,"title":"选项式 API - 组件实例","slug":"选项式-api-组件实例","link":"#选项式-api-组件实例","children":[]},{"level":3,"title":"选项式 API - 组合选项","slug":"选项式-api-组合选项","link":"#选项式-api-组合选项","children":[]},{"level":3,"title":"内置内容 - 指令","slug":"内置内容-指令","link":"#内置内容-指令","children":[]},{"level":3,"title":"内置内容 - 组件","slug":"内置内容-组件","link":"#内置内容-组件","children":[]},{"level":3,"title":"内置内容 - 特殊 Attributes","slug":"内置内容-特殊-attributes","link":"#内置内容-特殊-attributes","children":[]},{"level":3,"title":"内置内容 - 特殊元素","slug":"内置内容-特殊元素","link":"#内置内容-特殊元素","children":[]},{"level":3,"title":"单文件组件 - 语法定义","slug":"单文件组件-语法定义","link":"#单文件组件-语法定义","children":[]},{"level":3,"title":"单文件组件 - <script setup>","slug":"单文件组件-script-setup","link":"#单文件组件-script-setup","children":[]},{"level":3,"title":"单文件组件 - CSS 功能","slug":"单文件组件-css-功能","link":"#单文件组件-css-功能","children":[]},{"level":3,"title":"进阶 API - 渲染函数","slug":"进阶-api-渲染函数","link":"#进阶-api-渲染函数","children":[]},{"level":3,"title":"进阶 API - 服务端渲染","slug":"进阶-api-服务端渲染","link":"#进阶-api-服务端渲染","children":[]},{"level":3,"title":"进阶 API - TypeScript 工具类型","slug":"进阶-api-typescript-工具类型","link":"#进阶-api-typescript-工具类型","children":[]},{"level":3,"title":"进阶 API - 自定义渲染","slug":"进阶-api-自定义渲染","link":"#进阶-api-自定义渲染","children":[]}]}],"git":{"createdTime":1714214949000,"updatedTime":1714224756000,"contributors":[{"name":"xlc","email":"2215400217@qq.com","commits":2}]},"readingTime":{"minutes":18.3,"words":5489},"filePathRelative":"dev/Vue3速查表.md","localizedDate":"2024年2月25日","autoDesc":true}');export{r as comp,v as data};
