import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as t}from"./app-BkZy1zYI.js";const p={},e=t(`<h1 id="改造-beanutils-优雅实现-list-数据拷贝" tabindex="-1"><a class="header-anchor" href="#改造-beanutils-优雅实现-list-数据拷贝"><span>改造 BeanUtils 优雅实现 List 数据拷贝</span></a></h1><p>BeanUtils.copyProperties();确实为我们做了很多事情，虽然不能完美完成深拷贝，但是对于 po、vo、dto 的拷贝已经足够用了。但是其还是有一些不够完美的地方。</p><p>不足几点如下：</p><p><strong>①</strong>不能拷贝 list，而拷贝 list 的情况又大量存在，因此会有许多重复代码。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">S</span> source <span class="token operator">:</span> sources<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">T</span> target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">copyProperties</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>②</strong>有一些简单的查询，仅仅需要转换一下 vo 也需要 new Vo()。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Vo</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token class-name">Vo</span> vo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token class-name">Po</span> po <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token function">copyProperties</span><span class="token punctuation">(</span>po<span class="token punctuation">,</span> vo<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">return</span> vo<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>③</strong>这种拷贝方式是没有返回值的，jdk8 支持 stream() 操作之后，支持不是很友好，不方便 lambda 表达式的使用，因此我们决定通过集成 BeanUtils 类，自己造一个方便用的轮子。</p><p><strong>使用</strong></p><p>我们将新创建一个轮子 BeanConvertUtils，使用如下，当我们要转换 po、vo 时，只需要：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 使用前</span>
<span class="token keyword">public</span> <span class="token class-name">Vo</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token class-name">Vo</span> vo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token class-name">Po</span> po <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token function">copyProperties</span><span class="token punctuation">(</span>po<span class="token punctuation">,</span> vo<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">return</span> vo<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用后</span>
<span class="token keyword">public</span> <span class="token class-name">Vo</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token class-name">BeanConvertUtils</span><span class="token punctuation">.</span><span class="token function">converTo</span><span class="token punctuation">(</span>dao<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Vo</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用后，通过lambda表达式特殊处理个别字段</span>
<span class="token keyword">public</span> <span class="token class-name">Vo</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token class-name">BeanConvertUtils</span><span class="token punctuation">.</span><span class="token function">converTo</span><span class="token punctuation">(</span>dao<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Vo</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">,</span> 
  <span class="token punctuation">(</span>s<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> t<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>getName<span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们要拷贝 list 的时候也很简单：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 使用前</span>
<span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Vo</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Vo</span><span class="token punctuation">&gt;</span></span> vos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Po</span><span class="token punctuation">&gt;</span></span> pos <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Po</span> po <span class="token operator">:</span> <span class="token class-name">Pos</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token class-name">Vo</span> vo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token class-name">BeanUtis</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>po<span class="token punctuation">,</span> vo<span class="token punctuation">)</span><span class="token punctuation">;</span>
     vos<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>vo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 <span class="token keyword">return</span> vos<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用后</span>
<span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Vo</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token class-name">BeanConvertUtils</span><span class="token punctuation">.</span><span class="token function">converToList</span><span class="token punctuation">(</span>dao<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Vo</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 同样支持自定义lambda</span>
<span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Vo</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token class-name">BeanConvertUtils</span><span class="token punctuation">.</span><span class="token function">converToList</span><span class="token punctuation">(</span>dao<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Vo</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span>s<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> t<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>getName<span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码如下" tabindex="-1"><a class="header-anchor" href="#代码如下"><span>代码如下</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 转换对象工具
 *
 * <span class="token keyword">@author</span> bugpool
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanConvertUtils</span> <span class="token keyword">extends</span> <span class="token class-name">BeanUtils</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">convertTo</span><span class="token punctuation">(</span><span class="token class-name">S</span> source<span class="token punctuation">,</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> targetSupplier<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">convertTo</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> targetSupplier<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 转换对象
     *
     * <span class="token keyword">@param</span> <span class="token parameter">source</span>         源对象
     * <span class="token keyword">@param</span> <span class="token parameter">targetSupplier</span> 目标对象供应方
     * <span class="token keyword">@param</span> <span class="token parameter">callBack</span>       回调方法
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>S<span class="token punctuation">&gt;</span></span>            源对象类型
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span>            目标对象类型
     * <span class="token keyword">@return</span> 目标对象
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">convertTo</span><span class="token punctuation">(</span><span class="token class-name">S</span> source<span class="token punctuation">,</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> targetSupplier<span class="token punctuation">,</span> <span class="token class-name">ConvertCallBack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> callBack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> source <span class="token operator">||</span> <span class="token keyword">null</span> <span class="token operator">==</span> targetSupplier<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">T</span> target <span class="token operator">=</span> targetSupplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">copyProperties</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>callBack <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            callBack<span class="token punctuation">.</span><span class="token function">callBack</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> target<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">convertListTo</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">&gt;</span></span> sources<span class="token punctuation">,</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> targetSupplier<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">convertListTo</span><span class="token punctuation">(</span>sources<span class="token punctuation">,</span> targetSupplier<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 转换对象
     *
     * <span class="token keyword">@param</span> <span class="token parameter">sources</span>        源对象list
     * <span class="token keyword">@param</span> <span class="token parameter">targetSupplier</span> 目标对象供应方
     * <span class="token keyword">@param</span> <span class="token parameter">callBack</span>       回调方法
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>S<span class="token punctuation">&gt;</span></span>            源对象类型
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span>            目标对象类型
     * <span class="token keyword">@return</span> 目标对象list
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">convertListTo</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">&gt;</span></span> sources<span class="token punctuation">,</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> targetSupplier<span class="token punctuation">,</span> <span class="token class-name">ConvertCallBack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> callBack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> sources <span class="token operator">||</span> <span class="token keyword">null</span> <span class="token operator">==</span> targetSupplier<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>sources<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">S</span> source <span class="token operator">:</span> sources<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">T</span> target <span class="token operator">=</span> targetSupplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">copyProperties</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>callBack <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                callBack<span class="token punctuation">.</span><span class="token function">callBack</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> list<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 回调接口
     *
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>S<span class="token punctuation">&gt;</span></span> 源对象类型
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> 目标对象类型
     */</span>
    <span class="token annotation punctuation">@FunctionalInterface</span>
    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ConvertCallBack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">void</span> <span class="token function">callBack</span><span class="token punctuation">(</span><span class="token class-name">S</span> t<span class="token punctuation">,</span> <span class="token class-name">T</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>性能</strong></p><p>由于只是 BeanUtils 的一个封装，跟原来的代码性能几乎差不多，如果要说差一点也没错，毕竟多了一层函数堆栈的调用，但是基本可以忽略不计。主要的性能还是由 BeanUtils 决定。</p><p><strong>提醒</strong></p><p>不知道大家对这个 BeanConvertUtils 工具类感觉怎么样，自己在项目中倒是大量使用，也很方便。</p><p>但是有两点要提醒：</p><p>此方法依旧不能解决深层次的深拷贝问题，详细的可以 google 一下 BeanUtils 的深拷贝问题。‘</p><p>如果 source 或者 targetSupplier 只要有一个为 null，本工具类不像 BeanUtils 一样抛出异常，而是返回 null，因为笔者认为调用方如果把 null 进行准换，那就是想转换为 null，为不为空应该由调用方自己负责。</p>`,22),c=[e];function o(l,i){return s(),a("div",null,c)}const r=n(p,[["render",o],["__file","改造BeanUtils优雅实现List数据拷贝.html.vue"]]),d=JSON.parse('{"path":"/dev/%E6%94%B9%E9%80%A0BeanUtils%E4%BC%98%E9%9B%85%E5%AE%9E%E7%8E%B0List%E6%95%B0%E6%8D%AE%E6%8B%B7%E8%B4%9D.html","title":"改造BeanUtils优雅实现List数据拷贝","lang":"zh-CN","frontmatter":{"author":"xlc520","title":"改造BeanUtils优雅实现List数据拷贝","excerpt":null,"description":"改造 BeanUtils 优雅实现 List 数据拷贝 BeanUtils.copyProperties();确实为我们做了很多事情，虽然不能完美完成深拷贝，但是对于 po、vo、dto 的拷贝已经足够用了。但是其还是有一些不够完美的地方。 不足几点如下： ①不能拷贝 list，而拷贝 list 的情况又大量存在，因此会有许多重复代码。 ②有一些简单的...","date":"2022-06-27T00:00:00.000Z","category":"Java","tag":"Java","article":true,"timeline":true,"icon":"java","head":[["meta",{"property":"og:url","content":"https://blog.ciberviler.top/dev/%E6%94%B9%E9%80%A0BeanUtils%E4%BC%98%E9%9B%85%E5%AE%9E%E7%8E%B0List%E6%95%B0%E6%8D%AE%E6%8B%B7%E8%B4%9D.html"}],["meta",{"property":"og:site_name","content":"StudyNote - 丰富的知识笔记库"}],["meta",{"property":"og:title","content":"改造BeanUtils优雅实现List数据拷贝"}],["meta",{"property":"og:description","content":"改造 BeanUtils 优雅实现 List 数据拷贝 BeanUtils.copyProperties();确实为我们做了很多事情，虽然不能完美完成深拷贝，但是对于 po、vo、dto 的拷贝已经足够用了。但是其还是有一些不够完美的地方。 不足几点如下： ①不能拷贝 list，而拷贝 list 的情况又大量存在，因此会有许多重复代码。 ②有一些简单的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-27T13:32:36.000Z"}],["meta",{"property":"article:author","content":"xlc520"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2022-06-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-27T13:32:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"改造BeanUtils优雅实现List数据拷贝\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-06-27T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-27T13:32:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xlc520\\"}]}"]]},"headers":[{"level":3,"title":"代码如下","slug":"代码如下","link":"#代码如下","children":[]}],"git":{"createdTime":1655131497000,"updatedTime":1714224756000,"contributors":[{"name":"xlc520","email":"2215400217@qq.com","commits":2},{"name":"xlc","email":"2215400217@qq.com","commits":1}]},"readingTime":{"minutes":3.03,"words":910},"filePathRelative":"dev/改造BeanUtils优雅实现List数据拷贝.md","localizedDate":"2022年6月27日","autoDesc":true}');export{r as comp,d as data};
