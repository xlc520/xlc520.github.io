import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as t}from"./app-BRQZ0-Iq.js";const p={},e=t(`<h1 id="如何合理估算-java-线程池大小" tabindex="-1"><a class="header-anchor" href="#如何合理估算-java-线程池大小"><span>如何合理估算 Java 线程池大小</span></a></h1><p>Java 中的线程创建会产生显着的成本。创建线程会消耗时间，增加请求处理的延迟，并且涉及 JVM 和操作系统的大量工作。为了减轻这些开销，线程池发挥了作用。</p><p>在本文中，我们将<strong>深入研究确定理想线程池大小的艺术</strong> 。经过微调的线程池可以从系统中提取最佳性能，并帮助我们轻松应对峰值工作负载。然而，重要的是要记住，即使使用线程池，线程的管理本身也可能成为瓶颈。</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1699785128184-0.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h2 id="_1-使用线程池的原因" tabindex="-1"><a class="header-anchor" href="#_1-使用线程池的原因"><span>1 使用线程池的原因</span></a></h2><ul><li><strong>性能：</strong> 线程的创建和销毁可能会很昂贵，尤其是在 Java 中。线程池通过创建可重复用于多个任务的线程来帮助减少这种开销。</li><li><strong>可扩展性：</strong> 线程池可以扩展以满足应用程序的需求。例如，在重负载下，可以扩展线程池来处理额外的任务。</li><li><strong>资源管理：</strong> 线程池可以帮助管理线程使用的资源。例如，线程池可以限制在任何给定时间可以活动的线程数量，这有助于防止应用程序耗尽内存。</li></ul><h2 id="_2-调整线程池的大小-了解系统和资源限制" tabindex="-1"><a class="header-anchor" href="#_2-调整线程池的大小-了解系统和资源限制"><span>2 调整线程池的大小：了解系统和资源限制</span></a></h2><p>在调整线程池大小时，了解系统的限制（包括硬件和外部依赖性）至关重要。让我们通过一个例子来详细说明这个概念：</p><h3 id="场景" tabindex="-1"><a class="header-anchor" href="#场景"><span>场景</span></a></h3><p>假设我们正在开发一个处理传入 HTTP 请求的 Web 应用程序。每个请求可能涉及处理数据库中的数据以及调用外部第三方服务。我们的目标是确定有效处理这些请求的最佳线程池大小。</p><h3 id="需要考虑的因素" tabindex="-1"><a class="header-anchor" href="#需要考虑的因素"><span>需要考虑的因素</span></a></h3><p>**数据库连接池：**假设我们使用 HikariCP 等连接池来管理数据库连接。我们已将其配置为允许最多 100 个连接。如果我们创建的线程多于可用连接，这些额外的线程最终将等待可用连接，从而导致资源争用和潜在的性能问题。</p><p>以下是配置 HikariCP 数据库连接池的示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>zaxxer<span class="token punctuation">.</span>hikari<span class="token punctuation">.</span></span><span class="token class-name">HikariConfig</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>zaxxer<span class="token punctuation">.</span>hikari<span class="token punctuation">.</span></span><span class="token class-name">HikariDataSource</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatabaseConnectionExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">HikariConfig</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HikariConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        config<span class="token punctuation">.</span><span class="token function">setJdbcUrl</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc:mysql://localhost:3306/mydb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        config<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        config<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        config<span class="token punctuation">.</span><span class="token function">setMaximumPoolSize</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Set the maximum number of connections</span>

        <span class="token class-name">HikariDataSource</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HikariDataSource</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Use the dataSource to get database connections and perform queries.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>外部服务吞吐量：</strong> 我们的应用程序与之交互的外部服务有限制。它只能同时处理几个请求，比如一次 10 个请求。同时发送更多请求可能会使服务不堪重负，并导致性能下降或错误。</p><p><strong>CPU 核心：</strong> 确定服务器上可用的 CPU 核心数量对于优化线程池大小至关重要。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> numOfCores <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>每个核心可以同时执行一个线程。超过线程的 CPU 核心数量可能会导致过多的上下文切换，从而降低性能。搜索 Java 知音公众号，回复“Java 题库”，送你一份 Java 面试宝典</p><h1 id="_3cpu-密集型任务和-i-o-密集型任务" tabindex="-1"><a class="header-anchor" href="#_3cpu-密集型任务和-i-o-密集型任务"><span>3CPU 密集型任务和 I/O 密集型任务</span></a></h1><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1699785128184-1.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>CPU 密集型任务是那些需要大量处理能力的任务，例如执行复杂的计算或运行模拟。这些任务通常受到 CPU 速度的限制，而不是 I/O 设备的速度。</p><ul><li>对音频或视频文件进行编码或解码</li><li>编译和链接软件</li><li>运行复杂的模拟</li><li>执行机器学习或数据挖掘任务</li><li>玩电子游戏</li></ul><h3 id="优化" tabindex="-1"><a class="header-anchor" href="#优化"><span>优化</span></a></h3><p><strong>多线程和并行性：</strong> 并行处理是一种将较大的任务划分为较小的子任务并将这些子任务分布在多个 CPU 核心或处理器上的技术，以利用并发执行并提高整体性能</p><p>假设我们有一个很大的数字数组，并且我们想要使用多个线程同时计算每个数字的平方，从而利用并行处理。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ParallelSquareCalculator</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> numThreads <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Get the number of CPU cores</span>
        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span>numThreads<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> number <span class="token operator">:</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> square <span class="token operator">=</span> <span class="token function">calculateSquare</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Square of &quot;</span> <span class="token operator">+</span> number <span class="token operator">+</span> <span class="token string">&quot; is &quot;</span> <span class="token operator">+</span> square<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            executorService<span class="token punctuation">.</span><span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">NANOSECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">calculateSquare</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Simulate a time-consuming calculation (e.g., database query, complex computation)</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Simulate a 1-second delay</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> number <span class="token operator">*</span> number<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>IO 密集型任务是那些与存储设备交互的设备（例如，读/写文件）、网络套接字（例如，进行 API 调用），或用户输入（例如，图形用户界面中的用户交互）。</p><ul><li>将大文件读取或写入磁盘（例如，保存视频文件、加载数据库）</li><li>通过网络下载或上传文件（例如，浏览网页、观看流媒体视频）</li><li>发送和接收电子邮件</li><li>运行网络服务器或其他网络服务</li><li>执行数据库查询</li><li>处理传入请求的 Web 服务器。</li></ul><h3 id="优化-1" tabindex="-1"><a class="header-anchor" href="#优化-1"><span>优化</span></a></h3><ul><li><strong>缓存：</strong> 将频繁访问的数据缓存在内存中，以减少重复 I/O 操作的需要。</li><li><strong>负载平衡：</strong> 将 I/O 密集型任务分配到多个线程或进程，以有效处理并发 I/O 操作。</li><li><strong>SSD 的使用：</strong> 与传统硬盘驱动器 (HDD) 相比，固态驱动器 (SSD) 可以显着加快 I/O 操作速度。</li><li><strong>使用高效的数据结构</strong>（例如哈希表和 B 树）来减少所需的 I/O 操作数量。</li><li><strong>避免不必要的文件操作</strong>，例如多次打开和关闭文件。</li></ul><blockquote><p>确定线程数</p></blockquote><h2 id="_4-对于-cpu-密集型任务" tabindex="-1"><a class="header-anchor" href="#_4-对于-cpu-密集型任务"><span>4 对于 CPU 密集型任务</span></a></h2><p>对于 CPU 密集型任务，我们希望最大限度地提高 CPU 利用率，但又不会因为过多的线程而压垮系统，否则会导致过多的上下文切换。一个常见的经验法则是使用可用的 CPU 核心数量</p><h3 id="现实生活中的例子-视频编码" tabindex="-1"><a class="header-anchor" href="#现实生活中的例子-视频编码"><span>现实生活中的例子：视频编码</span></a></h3><p>想象一下我们有一个可用的多核 CPU，此时正在开发一个视频处理应用程序。视频编码是一项 CPU 密集型任务，我们需要应用复杂的算法来压缩视频文件。搜索 Java 知音公众号，回复“Java 题库”，送你一份 Java 面试宝典</p><h3 id="确定-cpu-密集型任务的线程数" tabindex="-1"><a class="header-anchor" href="#确定-cpu-密集型任务的线程数"><span>确定 CPU 密集型任务的线程数</span></a></h3><p>计算可用 CPU 核心数：在 Java 中用于<code>Runtime.getRuntime().availableProcessors()</code>确定可用 CPU 核心的数量。假设我们有 8 个核心。</p><p><strong>创建线程池：</strong> 创建大小接近或略小于可用 CPU 核心数的线程池。在这种情况下，我们可以选择 6 或 7 个线程，为其他任务和系统进程留下一些 CPU 容量。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VideoEncodingApp</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> availableCores <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> numberOfThreads <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>availableCores <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Adjust as needed</span>

        <span class="token class-name">ExecutorService</span> threadPool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span>numberOfThreads<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Submit video encoding tasks to the thread pool.</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token function">encodeVideo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Simulated video encoding task</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">encodeVideo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Simulate video encoding (CPU-bound) task.</span>
        <span class="token comment">// Complex calculations and compression algorithms here.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-对于-i-o-密集型任务" tabindex="-1"><a class="header-anchor" href="#_5-对于-i-o-密集型任务"><span>5 对于 I/O 密集型任务</span></a></h2><p>对于 I/O 密集型任务，最佳线程数通常由 I/O 操作的性质和预期延迟决定。我们希望有足够的线程来保持 I/O 设备繁忙而不会使它们过载。 <strong>理想的数量不一定等于 CPU 核心的数量。</strong></p><h3 id="现实生活中的例子-网页抓取" tabindex="-1"><a class="header-anchor" href="#现实生活中的例子-网页抓取"><span>现实生活中的例子：网页抓取</span></a></h3><p>考虑构建一个网页爬虫来下载网页并提取信息。这涉及到发出 HTTP 请求，由于网络延迟，这些请求是 I/O 密集型任务。</p><h3 id="确定-i-o-密集型任务的线程数" tabindex="-1"><a class="header-anchor" href="#确定-i-o-密集型任务的线程数"><span>确定 I/O 密集型任务的线程数</span></a></h3><p><strong>分析 I/O 延迟：</strong> 估计预期的 I/O 延迟，这取决于网络或存储。例如，如果每个 HTTP 请求大约需要 500 毫秒才能完成，我们可能需要适应 I/O 操作中的一些重叠。</p><p><strong>创建线程池：</strong> 创建一个大小能够平衡并行性与预期 I/O 延迟的线程池。每个任务不一定需要一个线程；相反，我们可以使用较小的池来有效管理 I/O 密集型任务。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebPageCrawler</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> expectedIOLatency <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span> <span class="token comment">// Estimated I/O latency in milliseconds</span>
        <span class="token keyword">int</span> numberOfThreads <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// Adjust based on your expected latency and system capabilities</span>

        <span class="token class-name">ExecutorService</span> threadPool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span>numberOfThreads<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// List of URLs to crawl.</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> urlsToCrawl <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;https://example.com&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;https://google.com&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;https://github.com&quot;</span><span class="token punctuation">,</span>
            <span class="token comment">// Add more URLs here</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> url <span class="token operator">:</span> urlsToCrawl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token function">crawlWebPage</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> expectedIOLatency<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">crawlWebPage</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token keyword">int</span> expectedIOLatency<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Simulate web page crawling (I/O-bound) task.</span>
        <span class="token comment">// Perform HTTP request and process the page content.</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>expectedIOLatency<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Simulating I/O latency</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-我们可以遵循具体的公式吗" tabindex="-1"><a class="header-anchor" href="#_6-我们可以遵循具体的公式吗"><span>6 我们可以遵循具体的公式吗？</span></a></h2><p>确定线程池大小的公式可以写成如下：</p><blockquote><p>线程数 = 可用核心数 <em>目标 CPU 利用率</em> (1 + 等待时间 / 服务时间)</p></blockquote><p><strong>可用核心数：</strong> 这是我们的应用程序可用的 CPU 核心数。需要注意的是，这与 CPU 的数量不同，因为每个 CPU 可能有多个核心。</p><p><strong>目标 CPU 利用率：</strong> 这是我们希望应用程序使用的 CPU 时间的百分比。如果我们将目标 CPU 利用率设置得太高，我们的应用程序可能会变得无响应。如果设置得太低，我们的应用程序将无法充分利用可用的 CPU 资源。</p><p><strong>等待时间：</strong> 这是线程等待 I/O 操作完成所花费的时间。这可能包括等待网络响应、数据库查询或文件操作。</p><p><strong>服务时间：</strong> 这是线程执行计算所花费的时间量。</p><p><strong>阻塞系数：</strong> 这是等待时间与服务时间的比率。它衡量线程等待 I/O 操作完成所花费的时间相对于执行计算所花费的时间。</p><h2 id="_7-用法示例" tabindex="-1"><a class="header-anchor" href="#_7-用法示例"><span>7 用法示例</span></a></h2><p>假设我们有一台具有 4 个 CPU 核心的服务器，并且我们希望应用程序使用 50% 的可用 CPU 资源。</p><p>我们的应用程序有两类任务：<strong>I/O 密集型任务</strong>和 <strong>CPU 密集型任务</strong>。</p><p>I/O 密集型任务的阻塞系数为 0.5，这意味着它们花费 50% 的时间等待 I/O 操作完成。</p><blockquote><p>线程数 = 4 核 <em>0.5</em> (1 + 0.5) = 3 线程</p></blockquote><p>CPU 密集型任务的阻塞系数为 0.1，这意味着它们花费 10% 的时间等待 I/O 操作完成。</p><blockquote><p>线程数 = 4 核 <em>0.5</em> (1 + 0.1) = 2.2 线程</p></blockquote><p>在此示例中，我们将创建两个线程池，一个用于 I/O 密集型任务，另一个用于 CPU 密集型任务。I/O 密集型线程池将有 3 个线程，CPU 密集型线程池将有 2 个线程。</p><p>这是根据大量的案例总结的 Java 线程池大小确定的公式，但在实操中所考虑的侧重点可能有不同，那么需要根据实际场景来微调，本文提供一种确定最优的思路，希望对你开发中确定线程池大小有所帮助！</p>`,64),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","如何合理估算 Java 线程池大小.html.vue"]]),d=JSON.parse('{"path":"/dev/%E5%A6%82%E4%BD%95%E5%90%88%E7%90%86%E4%BC%B0%E7%AE%97%20Java%20%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%A4%A7%E5%B0%8F.html","title":"如何合理估算 Java 线程池大小","lang":"zh-CN","frontmatter":{"author":"xlc520","title":"如何合理估算 Java 线程池大小","excerpt":null,"description":"如何合理估算 Java 线程池大小 Java 中的线程创建会产生显着的成本。创建线程会消耗时间，增加请求处理的延迟，并且涉及 JVM 和操作系统的大量工作。为了减轻这些开销，线程池发挥了作用。 在本文中，我们将深入研究确定理想线程池大小的艺术 。经过微调的线程池可以从系统中提取最佳性能，并帮助我们轻松应对峰值工作负载。然而，重要的是要记住，即使使用线程...","date":"2023-11-12T00:00:00.000Z","category":"Java","tag":"Java","article":true,"timeline":true,"icon":"java","head":[["meta",{"property":"og:url","content":"https://blog.ciberviler.top/dev/%E5%A6%82%E4%BD%95%E5%90%88%E7%90%86%E4%BC%B0%E7%AE%97%20Java%20%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%A4%A7%E5%B0%8F.html"}],["meta",{"property":"og:site_name","content":"StudyNote - 丰富的知识笔记库"}],["meta",{"property":"og:title","content":"如何合理估算 Java 线程池大小"}],["meta",{"property":"og:description","content":"如何合理估算 Java 线程池大小 Java 中的线程创建会产生显着的成本。创建线程会消耗时间，增加请求处理的延迟，并且涉及 JVM 和操作系统的大量工作。为了减轻这些开销，线程池发挥了作用。 在本文中，我们将深入研究确定理想线程池大小的艺术 。经过微调的线程池可以从系统中提取最佳性能，并帮助我们轻松应对峰值工作负载。然而，重要的是要记住，即使使用线程..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1699785128184-0.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-27T13:32:36.000Z"}],["meta",{"property":"article:author","content":"xlc520"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2023-11-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-27T13:32:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"如何合理估算 Java 线程池大小\\",\\"image\\":[\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1699785128184-0.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1699785128184-1.png\\"],\\"datePublished\\":\\"2023-11-12T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-27T13:32:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xlc520\\"}]}"]]},"headers":[{"level":2,"title":"1 使用线程池的原因","slug":"_1-使用线程池的原因","link":"#_1-使用线程池的原因","children":[]},{"level":2,"title":"2 调整线程池的大小：了解系统和资源限制","slug":"_2-调整线程池的大小-了解系统和资源限制","link":"#_2-调整线程池的大小-了解系统和资源限制","children":[{"level":3,"title":"场景","slug":"场景","link":"#场景","children":[]},{"level":3,"title":"需要考虑的因素","slug":"需要考虑的因素","link":"#需要考虑的因素","children":[]},{"level":3,"title":"优化","slug":"优化","link":"#优化","children":[]},{"level":3,"title":"优化","slug":"优化-1","link":"#优化-1","children":[]}]},{"level":2,"title":"4 对于 CPU 密集型任务","slug":"_4-对于-cpu-密集型任务","link":"#_4-对于-cpu-密集型任务","children":[{"level":3,"title":"现实生活中的例子：视频编码","slug":"现实生活中的例子-视频编码","link":"#现实生活中的例子-视频编码","children":[]},{"level":3,"title":"确定 CPU 密集型任务的线程数","slug":"确定-cpu-密集型任务的线程数","link":"#确定-cpu-密集型任务的线程数","children":[]}]},{"level":2,"title":"5 对于 I/O 密集型任务","slug":"_5-对于-i-o-密集型任务","link":"#_5-对于-i-o-密集型任务","children":[{"level":3,"title":"现实生活中的例子：网页抓取","slug":"现实生活中的例子-网页抓取","link":"#现实生活中的例子-网页抓取","children":[]},{"level":3,"title":"确定 I/O 密集型任务的线程数","slug":"确定-i-o-密集型任务的线程数","link":"#确定-i-o-密集型任务的线程数","children":[]}]},{"level":2,"title":"6 我们可以遵循具体的公式吗？","slug":"_6-我们可以遵循具体的公式吗","link":"#_6-我们可以遵循具体的公式吗","children":[]},{"level":2,"title":"7 用法示例","slug":"_7-用法示例","link":"#_7-用法示例","children":[]}],"git":{"createdTime":1699884468000,"updatedTime":1714224756000,"contributors":[{"name":"xlc","email":"2215400217@qq.com","commits":3}]},"readingTime":{"minutes":9.33,"words":2798},"filePathRelative":"dev/如何合理估算 Java 线程池大小.md","localizedDate":"2023年11月12日","autoDesc":true}');export{k as comp,d as data};
