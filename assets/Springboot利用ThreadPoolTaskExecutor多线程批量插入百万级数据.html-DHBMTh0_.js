import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,a as t}from"./app-BxuroukW.js";const e={},i=t(`<h1 id="springboot-利用-threadpooltaskexecutor-多线程批量插入百万级数据" tabindex="-1"><a class="header-anchor" href="#springboot-利用-threadpooltaskexecutor-多线程批量插入百万级数据"><span>Springboot 利用 ThreadPoolTaskExecutor 多线程批量插入百万级数据</span></a></h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>开发目的：提高百万级数据插入效率。</p><p>采取方案：利用 ThreadPoolTaskExecutor 多线程批量插入。</p><p>采用技术：springboot2.1.1+mybatisPlus3.0.6+swagger2.5.0+Lombok1.18.4+postgresql+ThreadPoolTaskExecutor 等。</p><h2 id="具体实现细节" tabindex="-1"><a class="header-anchor" href="#具体实现细节"><span><strong>具体实现细节</strong></span></a></h2><h3 id="application-dev-properties-添加线程池配置信息" tabindex="-1"><a class="header-anchor" href="#application-dev-properties-添加线程池配置信息"><span>application-dev.properties 添加线程池配置信息</span></a></h3><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code># 异步线程配置
# 配置核心线程数
async.executor.thread.core_pool_size = 30
# 配置最大线程数
async.executor.thread.max_pool_size = 30
# 配置队列大小
async.executor.thread.queue_capacity = 99988
# 配置线程池中的线程的名称前缀
async.executor.thread.name.prefix = async-importDB-
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="spring-容器注入线程池-bean-对象" tabindex="-1"><a class="header-anchor" href="#spring-容器注入线程池-bean-对象"><span>spring 容器注入线程池 bean 对象</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
 
<span class="token annotation punctuation">@EnableAsync</span>
 
<span class="token annotation punctuation">@Slf4j</span>
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExecutorConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${async.executor.thread.core_pool_size}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> corePoolSize<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${async.executor.thread.max_pool_size}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> maxPoolSize<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${async.executor.thread.queue_capacity}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> queueCapacity<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${async.executor.thread.name.prefix}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> namePrefix<span class="token punctuation">;</span>
 
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;asyncServiceExecutor&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Executor</span> <span class="token function">asyncServiceExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;start asyncServiceExecutor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//在这里修改</span>
        <span class="token class-name">ThreadPoolTaskExecutor</span> executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VisiableThreadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//配置核心线程数</span>
        executor<span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//配置最大线程数</span>
        executor<span class="token punctuation">.</span><span class="token function">setMaxPoolSize</span><span class="token punctuation">(</span>maxPoolSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//配置队列大小</span>
        executor<span class="token punctuation">.</span><span class="token function">setQueueCapacity</span><span class="token punctuation">(</span>queueCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//配置线程池中的线程的名称前缀</span>
        executor<span class="token punctuation">.</span><span class="token function">setThreadNamePrefix</span><span class="token punctuation">(</span>namePrefix<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// rejection-policy：当pool已经达到max size的时候，如何处理新任务</span>
        <span class="token comment">// CALLER_RUNS：不在新线程中执行任务，而是有调用者所在的线程来执行</span>
        executor<span class="token punctuation">.</span><span class="token function">setRejectedExecutionHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>CallerRunsPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//执行初始化</span>
        executor<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> executor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建异步线程-业务类" tabindex="-1"><a class="header-anchor" href="#创建异步线程-业务类"><span>创建异步线程 业务类</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
 
<span class="token annotation punctuation">@Slf4j</span>
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">AsyncService</span> <span class="token punctuation">{</span>
<span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@Async</span><span class="token punctuation">(</span><span class="token string">&quot;asyncServiceExecutor&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executeAsync</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LogOutputResult</span><span class="token punctuation">&gt;</span></span> logOutputResults<span class="token punctuation">,</span> <span class="token class-name">LogOutputResultMapper</span> logOutputResultMapper<span class="token punctuation">,</span> <span class="token class-name">CountDownLatch</span> countDownLatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span><span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;start executeAsync&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//异步线程要做的事情</span>
            logOutputResultMapper<span class="token punctuation">.</span><span class="token function">addLogOutputResultBatch</span><span class="token punctuation">(</span>logOutputResults<span class="token punctuation">)</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;end executeAsync&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>
            countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 很关键, 无论上面程序是否异常必须执行countDown,否则await无法释放</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建多线程批量插入具体业务方法" tabindex="-1"><a class="header-anchor" href="#创建多线程批量插入具体业务方法"><span>创建多线程批量插入具体业务方法</span></a></h3><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>@Override
    public int testMultiThread() {
        List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LogOutputResult</span><span class="token punctuation">&gt;</span></span> logOutputResults = getTestData();
        //测试每100条数据插入开一个线程
        List&lt;List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LogOutputResult</span><span class="token punctuation">&gt;</span></span>&gt; lists = ConvertHandler.splitList(logOutputResults, 100);
        CountDownLatch countDownLatch = new CountDownLatch(lists.size());
        for (List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LogOutputResult</span><span class="token punctuation">&gt;</span></span> listSub:lists) {
            asyncService.executeAsync(listSub, logOutputResultMapper,countDownLatch);
        }
        try {
            countDownLatch.await(); //保证之前的所有的线程都执行完成，才会走下面的；
            // 这样就可以在下面拿到所有线程执行完的集合结果
        } catch (Exception e) {
            log.error(&quot;阻塞异常:&quot;+e.getMessage());
        }
        return logOutputResults.size();
    }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模拟-2000003-条数据进行测试" tabindex="-1"><a class="header-anchor" href="#模拟-2000003-条数据进行测试"><span>模拟 2000003 条数据进行测试</span></a></h3><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/20191225121702208.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>多线程 测试 2000003 耗时如下：耗时 1.67 分钟</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/2019122512171971.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/20191225121745132.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>本次开启 30 个线程，截图如下：</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/20191225121812550.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>单线程测试 2000003 耗时如下：耗时 5.75 分钟</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/20191225121832495.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/20191225121848593.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="检查多线程入库的数据-检查是否存在重复入库的问题" tabindex="-1"><a class="header-anchor" href="#检查多线程入库的数据-检查是否存在重复入库的问题"><span>检查多线程入库的数据，检查是否存在重复入库的问题</span></a></h3><p>根据 id 分组，查看是否有 id 重复的数据，通过 sql 语句检查，没有发现重复入库的问题</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/2019122512191274.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>检查数据完整性： 通过 sql 语句查询，多线程录入数据完整 <img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/20191225122051393.png" alt="img" loading="lazy"></p><h2 id="测试结果" tabindex="-1"><a class="header-anchor" href="#测试结果"><span>测试结果</span></a></h2><p>不同线程数测试：</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/2019122512213611.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https://img-blog.csdnimg.cn/20191225122203925.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>通过以上测试案列，同样是导入 2000003 条数据，多线程耗时 1.67 分钟，单线程耗时 5.75 分钟。通过对不同线程数的测试，发现不是线程数越多越好，具体多少合适，网上有一个不成文的算法：</p>`,34),o=[i];function p(c,l){return a(),s("div",null,o)}const d=n(e,[["render",p],["__file","Springboot利用ThreadPoolTaskExecutor多线程批量插入百万级数据.html.vue"]]),g=JSON.parse('{"path":"/dev/Springboot%E5%88%A9%E7%94%A8ThreadPoolTaskExecutor%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E7%99%BE%E4%B8%87%E7%BA%A7%E6%95%B0%E6%8D%AE.html","title":"Springboot利用ThreadPoolTaskExecutor多线程批量插入百万级数据","lang":"zh-CN","frontmatter":{"author":"xlc520","title":"Springboot利用ThreadPoolTaskExecutor多线程批量插入百万级数据","excerpt":null,"description":"Springboot利用ThreadPoolTaskExecutor多线程批量插入百万级数据","date":"2022-06-10T00:00:00.000Z","category":"Java","tag":["Java","Spring"],"article":true,"timeline":true,"icon":"java","head":[["meta",{"property":"og:url","content":"https://blog.ciberviler.top/dev/Springboot%E5%88%A9%E7%94%A8ThreadPoolTaskExecutor%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E7%99%BE%E4%B8%87%E7%BA%A7%E6%95%B0%E6%8D%AE.html"}],["meta",{"property":"og:site_name","content":"StudyNote - 丰富的知识笔记库"}],["meta",{"property":"og:title","content":"Springboot利用ThreadPoolTaskExecutor多线程批量插入百万级数据"}],["meta",{"property":"og:description","content":"Springboot利用ThreadPoolTaskExecutor多线程批量插入百万级数据"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://bitbucket.org/xlc520/blogasset/raw/main/images3/20191225121702208.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-27T13:32:36.000Z"}],["meta",{"property":"article:author","content":"xlc520"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:published_time","content":"2022-06-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-27T13:32:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Springboot利用ThreadPoolTaskExecutor多线程批量插入百万级数据\\",\\"image\\":[\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/20191225121702208.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/2019122512171971.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/20191225121745132.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/20191225121812550.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/20191225121832495.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/20191225121848593.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/2019122512191274.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/20191225122051393.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/2019122512213611.png\\",\\"https://img-blog.csdnimg.cn/20191225122203925.png\\"],\\"datePublished\\":\\"2022-06-10T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-27T13:32:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xlc520\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"具体实现细节","slug":"具体实现细节","link":"#具体实现细节","children":[{"level":3,"title":"application-dev.properties 添加线程池配置信息","slug":"application-dev-properties-添加线程池配置信息","link":"#application-dev-properties-添加线程池配置信息","children":[]},{"level":3,"title":"spring 容器注入线程池 bean 对象","slug":"spring-容器注入线程池-bean-对象","link":"#spring-容器注入线程池-bean-对象","children":[]},{"level":3,"title":"创建异步线程 业务类","slug":"创建异步线程-业务类","link":"#创建异步线程-业务类","children":[]},{"level":3,"title":"创建多线程批量插入具体业务方法","slug":"创建多线程批量插入具体业务方法","link":"#创建多线程批量插入具体业务方法","children":[]},{"level":3,"title":"模拟 2000003 条数据进行测试","slug":"模拟-2000003-条数据进行测试","link":"#模拟-2000003-条数据进行测试","children":[]},{"level":3,"title":"检查多线程入库的数据，检查是否存在重复入库的问题","slug":"检查多线程入库的数据-检查是否存在重复入库的问题","link":"#检查多线程入库的数据-检查是否存在重复入库的问题","children":[]}]},{"level":2,"title":"测试结果","slug":"测试结果","link":"#测试结果","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1653749082000,"updatedTime":1714224756000,"contributors":[{"name":"xlc520","email":"2215400217@qq.com","commits":5},{"name":"xlc","email":"2215400217@qq.com","commits":2}]},"readingTime":{"minutes":2.61,"words":782},"filePathRelative":"dev/Springboot利用ThreadPoolTaskExecutor多线程批量插入百万级数据.md","localizedDate":"2022年6月10日"}');export{d as comp,g as data};
