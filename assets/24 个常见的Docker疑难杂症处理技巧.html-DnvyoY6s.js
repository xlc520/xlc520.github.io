import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as c,c as i,d as n,e as s,b as e,a as o}from"./app-DS3HItsn.js";const p={},r=o('<h1 id="_24-个常见的-docker-疑难杂症处理技巧" tabindex="-1"><a class="header-anchor" href="#_24-个常见的-docker-疑难杂症处理技巧"><span>24 个常见的 Docker 疑难杂症处理技巧</span></a></h1><blockquote><p><strong>这里主要是为了记录在使用 Docker 的时候遇到的问题及其处理解决方法。</strong></p></blockquote><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/docker-have-some-trouble.png" alt="Docker疑难杂症汇总" tabindex="0" loading="lazy"><figcaption>Docker疑难杂症汇总</figcaption></figure><p><strong>Docker 疑难杂症汇总</strong></p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/docker-have-some-trouble-1.png" alt="Docker疑难杂症汇总" tabindex="0" loading="lazy"><figcaption>Docker疑难杂症汇总</figcaption></figure><p><strong>Docker 疑难杂症汇总</strong></p><hr><h2 id="_1-docker-迁移存储目录" tabindex="-1"><a class="header-anchor" href="#_1-docker-迁移存储目录"><span>1. Docker 迁移存储目录</span></a></h2><blockquote><p><strong>默认情况系统会将 Docker 容器存放在 /var/lib/docker 目录下</strong></p></blockquote>',9),d=n("li",null,[n("strong",null,"[问题起因]"),s(" 今天通过监控系统，发现公司其中一台服务器的磁盘快慢，随即上去看了下，发现 "),n("code",null,"/var/lib/docker"),s(" 这个目录特别大。由上述原因，我们都知道，在 "),n("code",null,"/var/lib/docker"),s(" 中存储的都是相关于容器的存储，所以也不能随便的将其删除掉。")],-1),u=n("code",null,"docker",-1),v=n("code",null,"/var",-1),k=n("code",null,"dockerd",-1),m={href:"https://docs.docker.com/engine/reference/commandline/dockerd/",target:"_blank",rel:"noopener noreferrer"},b=n("strong",null,"官方文档",-1),g=n("li",null,[s("但是需要注意的一点就是，尽量不要用软链， 因为一些 "),n("code",null,"docker"),s(" 容器编排系统不支持这样做，比如我们所熟知的 "),n("code",null,"k8s"),s(" 就在内。")],-1),h=o(`<p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 发现容器启动不了了</span>
ERROR：cannot  create temporary directory<span class="token operator">!</span>

<span class="token comment"># 查看系统存储情况</span>
$ <span class="token function">du</span> <span class="token parameter variable">-h</span> --max-depth<span class="token operator">=</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>[解决方法 1] 添加软链接</strong></li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 1.停止docker服务</span>
$ <span class="token function">sudo</span> systemctl stop <span class="token function">docker</span>

<span class="token comment"># 2.开始迁移目录</span>
$ <span class="token function">sudo</span> <span class="token function">mv</span> /var/lib/docker /data/

<span class="token comment"># 3.添加软链接</span>
$ <span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> /data/docker /var/lib/docker

<span class="token comment"># 4.启动docker服务</span>
$ <span class="token function">sudo</span> systemctl start <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>[解决方法 2] 改动 docker 配置文件</strong></li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># [方式一] 改动docker启动配置文件</span>
$ <span class="token function">sudo</span> <span class="token function">vim</span> /lib/systemd/system/docker.service
<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/bin/dockerd <span class="token parameter variable">--graph</span><span class="token operator">=</span>/data/docker/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># [方式二] 改动docker启动配置文件</span>
$ <span class="token function">sudo</span> <span class="token function">vim</span> /etc/docker/daemon.json
<span class="token punctuation">{</span>
    <span class="token string">&quot;live-restore&quot;</span><span class="token builtin class-name">:</span> true,
    <span class="token string">&quot;graph&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;/data/docker/&quot;</span> <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>[操作注意事项]</strong> 在迁移 <code>docker</code> 目录的时候注意使用的命令，要么使用 <code>mv</code> 命令直接移动，要么使用 <code>cp</code> 命令复制文件，但是需要注意同时复制文件权限和对应属性，不然在使用的时候可能会存在权限问题。如果容器中，也是使用 <code>root</code> 用户，则不会存在该问题，但是也是需要按照正确的操作来迁移目录。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 使用mv命令</span>
$ <span class="token function">sudo</span> <span class="token function">mv</span> /var/lib/docker /data/docker

<span class="token comment"># 使用cp命令</span>
$ <span class="token function">sudo</span> <span class="token function">cp</span> <span class="token parameter variable">-arv</span> /data/docker /data2/docker
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>下图中，就是因为启动的容器使用的是普通用户运行进程的，且在运行当中需要使用 <code>/tmp</code> 目录，结果提示没有权限。在我们导入容器镜像的时候，其实是会将容器启动时需要的各个目录的权限和属性都赋予了。如果我们直接是 <code>cp</code> 命令单纯复制文件内容的话，就会出现属性不一致的情况，同时还会有一定的安全问题。</li></ul><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/docker-have-some-trouble-3.png" alt="Docker迁移存储目录" tabindex="0" loading="lazy"><figcaption>Docker迁移存储目录</figcaption></figure><p><strong>Docker 迁移存储目录</strong></p><hr><h2 id="_2-docker-设备空间不足" tabindex="-1"><a class="header-anchor" href="#_2-docker-设备空间不足"><span>2. Docker 设备空间不足</span></a></h2>`,18),f={href:"https://stackoverflow.com/questions/50140939/increase-docker-container-size-from-default-10gb-on-rhel7/52971594#52971594",target:"_blank",rel:"noopener noreferrer"},_=o(`<ul><li><strong>[问题起因一]</strong> 容器在导入或者启动的时候，如果提示磁盘空间不足的，那么多半是真的因为物理磁盘空间真的有问题导致的。如下所示，我们可以看到 <code>/</code> 分区确实满了。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 查看物理磁盘空间</span>
$ <span class="token function">df</span> <span class="token parameter variable">-Th</span>
Filesystem    Size    Used    Avail    Use%    Mounted on
/dev/vda1      40G     40G       0G    <span class="token number">100</span>%    /
tmpfs         <span class="token number">7</span>.8G       <span class="token number">0</span>     <span class="token number">7</span>.8G      <span class="token number">0</span>%    /dev/shm
/dev/vdb1     493G    289G     179G     <span class="token number">62</span>%    /mnt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果发现真的是物理磁盘空间满了的话，就需要查看到底是什么占据了如此大的空间，导致因为容器没有空间无法启动。其中，<code>docker</code> 自带的命令就是一个很好的能够帮助我们发现问题的工具。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 查看基本信息</span>
<span class="token comment"># 硬件驱动使用的是devicemapper，空间池为docker-252</span>
<span class="token comment"># 磁盘可用容量仅剩16.78MB，可用供我们使用</span>
$ <span class="token function">docker</span> info
Containers: <span class="token number">1</span>
Images: <span class="token number">28</span>
Storage Driver: devicemapper
 Pool Name: docker-252:1-787932-pool
 Pool Blocksize: <span class="token number">65.54</span> kB
 Backing Filesystem: extfs
 Data file: /dev/loop0
 Metadata file: /dev/loop1
 Data Space Used: <span class="token number">1.225</span> GB
 Data Space Total: <span class="token number">107.4</span> GB
 Data Space Available: <span class="token number">16.78</span> MB
 Metadata Space Used: <span class="token number">2.073</span> MB
 Metadata Space Total: <span class="token number">2.147</span> GB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>[解决方法]</strong> 通过查看信息，我们知道正是因为 <code>docker</code> 可用的磁盘空间不足，所以导致启动的时候没有足够的空间进行加载启动镜像。解决的方法也很简单，第一就是清理无效数据文件释放磁盘空间( <strong>清除日志</strong>)，第二就是修改 <code>docker</code> 数据的存放路径(<strong>大分区</strong>)。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 显示哪些容器目录具有最大的日志文件</span>
$ <span class="token function">du</span> <span class="token parameter variable">-d1</span> <span class="token parameter variable">-h</span> /var/lib/docker/containers <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-h</span>

<span class="token comment"># 清除您选择的容器日志文件的内容</span>
$ <span class="token function">cat</span> /dev/null <span class="token operator">&gt;</span> /var/lib/docker/containers/container_id/container_log_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><ul><li><strong>[问题起因二]</strong> 显然我遇到的不是上一种情况，而是在启动容器的时候，容器启动之后不久就显示是 <code>unhealthy</code> 的状态，通过如下日志发现，原来是复制配置文件启动的时候，提示磁盘空间不足。</li><li>后面发现是因为 <code>CentOS7</code> 的系统使用的 <code>docker</code> 容器默认的创建大小就是 <code>10G</code> 而已，然而我们使用的容器却超过了这个限制，导致无法启动时提示空间不足。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token number">2019</span>-08-16 <span class="token number">11</span>:11:15,816 INFO spawned: <span class="token string">&#39;app-demo&#39;</span> with pid <span class="token number">835</span>
<span class="token number">2019</span>-08-16 <span class="token number">11</span>:11:16,268 INFO exited: app <span class="token punctuation">(</span>exit status <span class="token number">1</span><span class="token punctuation">;</span> not expected<span class="token punctuation">)</span>
<span class="token number">2019</span>-08-16 <span class="token number">11</span>:11:17,270 INFO gave up: app entered FATAL state, too many start retries too quickly
cp: cannot create regular <span class="token function">file</span> <span class="token string">&#39;/etc/supervisor/conf.d/grpc-app-demo.conf&#39;</span><span class="token builtin class-name">:</span> No space left on device
cp: cannot create regular <span class="token function">file</span> <span class="token string">&#39;/etc/supervisor/conf.d/grpc-app-demo.conf&#39;</span><span class="token builtin class-name">:</span> No space left on device
cp: cannot create regular <span class="token function">file</span> <span class="token string">&#39;/etc/supervisor/conf.d/grpc-app-demo.conf&#39;</span><span class="token builtin class-name">:</span> No space left on device
cp: cannot create regular <span class="token function">file</span> <span class="token string">&#39;/etc/supervisor/conf.d/grpc-app-demo.conf&#39;</span><span class="token builtin class-name">:</span> No space left on device
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>[解决方法 1] 改动 docker 启动配置文件</strong></li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># /etc/docker/daemon.json</span>
<span class="token punctuation">{</span>
    <span class="token string">&quot;live-restore&quot;</span><span class="token builtin class-name">:</span> true,
    <span class="token string">&quot;storage-opt&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;dm.basesize=20G&quot;</span> <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>[解决方法 2] 改动 systemctl 的 docker 启动文件</strong></li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 1.stop the docker service</span>
$ <span class="token function">sudo</span> systemctl stop <span class="token function">docker</span>

<span class="token comment"># 2.rm exised container</span>
$ <span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /var/lib/docker

<span class="token comment"># 2.edit your docker service file</span>
$ <span class="token function">sudo</span> <span class="token function">vim</span> /usr/lib/systemd/system/docker.service

<span class="token comment"># 3.find the execution line</span>
<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/bin/dockerd
and change it to:
<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/bin/dockerd --storage-opt <span class="token assign-left variable">dm.basesize</span><span class="token operator">=</span>20G

<span class="token comment"># 4.start docker service again</span>
$ <span class="token function">sudo</span> systemctl start <span class="token function">docker</span>

<span class="token comment"># 5.reload daemon</span>
$ <span class="token function">sudo</span> systemctl daemon-reload
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><ul><li><strong>[问题起因三]</strong> 还有一种情况也会让容器无法启动，并提示磁盘空间不足，但是使用命令查看发现并不是因为物理磁盘真的不足导致的。而是，因为对于分区的 <code>inode</code> 节点数满了导致的。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 报错信息</span>
No space left on device
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>[解决方法]</strong> 因为 <code>ext3</code> 文件系统使用 <code>inode table</code> 存储 <code>inode</code> 信息，而 <code>xfs</code> 文件系统使用 <code>B+ tree</code> 来进行存储。考虑到性能问题，默认情况下这个 <code>B+ tree</code> 只会使用前 <code>1TB</code> 空间，当这 <code>1TB</code> 空间被写满后，就会导致无法写入 <code>inode</code> 信息，报磁盘空间不足的错误。我们可以在 <code>mount</code> 时，指定 <code>inode64</code> 即可将这个 <code>B+ tree</code> 使用的空间扩展到整个文件系统。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 查看系统的inode节点使用情况</span>
$ <span class="token function">sudo</span> <span class="token function">df</span> <span class="token parameter variable">-i</span>

<span class="token comment"># 尝试重新挂载</span>
$ <span class="token function">sudo</span> <span class="token function">mount</span> <span class="token parameter variable">-o</span> remount <span class="token parameter variable">-o</span> noatime,nodiratime,inode64,nobarrier /dev/vda1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>[补充知识]</strong> 文件储存在硬盘上，硬盘的最小存储单位叫做 <strong>扇区</strong>(<code>Sector</code>)。每个扇区储存 <code>512</code> 字节(相当于<code>0.5KB</code>) 。操作系统读取硬盘的时候，不会一个个扇区地读取，这样效率太低，而是一次性连续读取多个扇区，即一次性读取一个<strong>块</strong>(<code>block</code>) 。这种由多个扇区组成的<strong>块</strong>，是文件存取的最小单位。<strong>块</strong>的大小，最常见的是<code>4KB</code>，即连续八个 <code>sector</code> 组成一个 <code>block</code> 块。文件数据都储存在<strong>块</strong>中，那么很显然，我们还必须找到一个地方储存文件的元信息，比如文件的创建者、文件的创建日期、文件的大小等等。这种储存文件元信息的区域就叫做 <strong>索引节点</strong>(<code>inode</code>)。每一个文件都有对应的 <code>inode</code>，里面包含了除了文件名以外的所有文件信息。</li><li><code>inode</code> 也会消耗硬盘空间，所以硬盘格式化的时候，操作系统自动将硬盘分成两个区域。一个是数据区，存放文件数据；另一个是 <code>inode</code> 区(<code>inode table</code>)，存放 <code>inode</code> 所包含的信息。每个 <code>inode</code> 节点的大小，一般是 <code>128</code> 字节或 <code>256</code> 字节。<code>inode</code> 节点的总数，在格式化时就给定，一般是每<code>1KB</code>或每<code>2KB</code>就设置一个 <code>inode</code> 节点。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 每个节点信息的内容</span>
$ <span class="token function">stat</span> check_port_live.sh
  File: check_port_live.sh
  Size: <span class="token number">225</span>           Blocks: <span class="token number">8</span>          IO Block: <span class="token number">4096</span>   regular <span class="token function">file</span>
Device: 822h/2082d    Inode: <span class="token number">99621663</span>    Links: <span class="token number">1</span>
Access: <span class="token punctuation">(</span>0755/-rwxr-xr-x<span class="token punctuation">)</span>  Uid: <span class="token punctuation">(</span> <span class="token number">1006</span>/  escape<span class="token punctuation">)</span>   Gid: <span class="token punctuation">(</span> <span class="token number">1006</span>/  escape<span class="token punctuation">)</span>
Access: <span class="token number">2019</span>-07-29 <span class="token number">14</span>:59:59.498076903 +0800
Modify: <span class="token number">2019</span>-07-29 <span class="token number">14</span>:59:59.498076903 +0800
Change: <span class="token number">2019</span>-07-29 <span class="token number">23</span>:20:27.834866649 +0800
 Birth: -

<span class="token comment"># 磁盘的inode使用情况</span>
$ <span class="token function">df</span> <span class="token parameter variable">-i</span>
Filesystem                 Inodes   IUsed     IFree IUse% Mounted on
udev                     <span class="token number">16478355</span>     <span class="token number">801</span>  <span class="token number">16477554</span>    <span class="token number">1</span>% /dev
tmpfs                    <span class="token number">16487639</span>    <span class="token number">2521</span>  <span class="token number">16485118</span>    <span class="token number">1</span>% /run
/dev/sdc2               <span class="token number">244162560</span> <span class="token number">4788436</span> <span class="token number">239374124</span>    <span class="token number">2</span>% /
tmpfs                    <span class="token number">16487639</span>       <span class="token number">5</span>  <span class="token number">16487634</span>    <span class="token number">1</span>% /dev/shm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_3-docker-缺共享链接库" tabindex="-1"><a class="header-anchor" href="#_3-docker-缺共享链接库"><span>3. Docker 缺共享链接库</span></a></h2><blockquote><p><strong>Docker 命令需要对/tmp 目录下面有访问权限</strong></p></blockquote><ul><li><strong>[问题起因]</strong> 给系统安装完 <code>compose</code> 之后，查看版本的时候，提示缺少一个名为 <code>libz.so.1</code> 的共享链接库。第一反应就是，是不是系统少安装那个软件包导致的。随即，搜索了一下，将相关的依赖包都给安装了，却还是提示同样的问题。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 提示错误信息</span>
$ <span class="token function">docker-compose</span> <span class="token parameter variable">--version</span>
error <span class="token keyword">while</span> loading shared libraries: libz.so.1: failed to map segment from shared object: Operation not permitted
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>[解决方法]</strong> 后来发现，是因为系统中 <code>docker</code> 没有对 <code>/tmp</code> 目录的访问权限导致，需要重新将其挂载一次，就可以解决了。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 重新挂载</span>
$ <span class="token function">sudo</span> <span class="token function">mount</span> /tmp <span class="token parameter variable">-o</span> remount,exec
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_4-docker-容器文件损坏" tabindex="-1"><a class="header-anchor" href="#_4-docker-容器文件损坏"><span>4. Docker 容器文件损坏</span></a></h2><blockquote><p><strong>对 dockerd 的配置有可能会影响到系统稳定</strong></p></blockquote><ul><li><strong>[问题起因]</strong> 容器文件损坏，经常会导致容器无法操作。正常的 <code>docker</code> 命令已经无法操控这台容器了，无法关闭、重启、删除。正巧，前天就需要这个的问题，主要的原因是因为重新对 <code>docker</code> 的默认容器进行了重新的分配限制导致的。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 操作容器遇到类似的错误</span>
b<span class="token string">&#39;devicemapper: Error running deviceCreate (CreateSnapDeviceRaw) dm_task_run failed&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>[解决方法]</strong> 可以通过以下操作将容器删除/重建。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 1.关闭docker</span>
$ <span class="token function">sudo</span> systemctl stop <span class="token function">docker</span>

<span class="token comment"># 2.删除容器文件</span>
$ <span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /var/lib/docker/containers

<span class="token comment"># 3.重新整理容器元数据</span>
$ <span class="token function">sudo</span> thin_check /var/lib/docker/devicemapper/devicemapper/metadata
$ <span class="token function">sudo</span> thin_check --clear-needs-check-flag /var/lib/docker/devicemapper/devicemapper/metadata

<span class="token comment"># 4.重启docker</span>
$ <span class="token function">sudo</span> systemctl start <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_5-docker-容器优雅重启" tabindex="-1"><a class="header-anchor" href="#_5-docker-容器优雅重启"><span>5. Docker 容器优雅重启</span></a></h2><blockquote><p><strong>不停止服务器上面运行的容器，重启 dockerd 服务是多么好的一件事</strong></p></blockquote><ul><li><strong>[问题起因]</strong> 默认情况下，当 <code>Docker</code> 守护程序终止时，它会关闭正在运行的容器。从 <code>Docker-ce 1.12</code> 开始，可以在配置文件中添加 <code>live-restore</code> 参数，以便在守护程序变得不可用时容器保持运行。需要注意的是 <code>Windows</code> 平台暂时还是不支持该参数的配置。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># Keep containers alive during daemon downtime</span>
$ <span class="token function">sudo</span> <span class="token function">vim</span> /etc/docker/daemon.yaml
<span class="token punctuation">{</span>
  <span class="token string">&quot;live-restore&quot;</span><span class="token builtin class-name">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>

<span class="token comment"># 在守护进程停机期间保持容器存活</span>
$ <span class="token function">sudo</span> dockerd --live-restore

<span class="token comment"># 只能使用reload重载</span>
<span class="token comment"># 相当于发送SIGHUP信号量给dockerd守护进程</span>
$ <span class="token function">sudo</span> systemctl reload <span class="token function">docker</span>

<span class="token comment"># 但是对应网络的设置需要restart才能生效</span>
$ <span class="token function">sudo</span> systemctl restart <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>[解决方法]</strong> 可以通过以下操作将容器删除/重建。</li></ul><p>json</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code># /etc/docker/daemon.yaml
<span class="token punctuation">{</span>
    <span class="token property">&quot;registry-mirrors&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;https://vec0xydj.mirror.aliyuncs.com&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  # 配置获取官方镜像的仓库地址
    <span class="token property">&quot;experimental&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  # 启用实验功能
    <span class="token property">&quot;default-runtime&quot;</span><span class="token operator">:</span> <span class="token string">&quot;nvidia&quot;</span><span class="token punctuation">,</span>  # 容器的默认OCI运行时(默认为runc)
    <span class="token property">&quot;live-restore&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  # 重启dockerd服务的时候容易不终止
    <span class="token property">&quot;runtimes&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>  # 配置容器运行时
        <span class="token property">&quot;nvidia&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/usr/bin/nvidia-container-runtime&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;runtimeArgs&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;default-address-pools&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>  # 配置容器使用的子网地址池
        <span class="token punctuation">{</span>
            <span class="token property">&quot;scope&quot;</span><span class="token operator">:</span> <span class="token string">&quot;local&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;base&quot;</span><span class="token operator">:</span><span class="token string">&quot;172.17.0.0/12&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;size&quot;</span><span class="token operator">:</span><span class="token number">24</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">vim</span> /etc/docker/daemon.json
<span class="token punctuation">{</span>
  <span class="token string">&quot;default-address-pools&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token string">&quot;base&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;172.240.0.0/16&quot;</span>,
      <span class="token string">&quot;size&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">24</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_6-docker-容器无法删除" tabindex="-1"><a class="header-anchor" href="#_6-docker-容器无法删除"><span>6. Docker 容器无法删除</span></a></h2><blockquote><p><strong>找不到对应容器进程是最吓人的</strong></p></blockquote><ul><li><strong>[问题起因]</strong> 今天遇到 <code>docker</code> 容器无法停止/终止/删除，以为这个容器可能又出现了 <code>dockerd</code> 守护进程托管的情况，但是通过 <code>ps -ef &lt;container id&gt;</code> 无法查到对应的运行进程。哎，后来开始开始查 <code>supervisor</code> 以及 <code>Dockerfile</code> 中的进程，都没有。这种情况的可能原因是容器启动之后，主机因任何原因重新启动并且没有优雅地终止容器。剩下的文件现在阻止你重新生成旧名称的新容器，因为系统认为旧容器仍然存在。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 删除容器</span>
$ <span class="token function">sudo</span> <span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> f8e8c3<span class="token punctuation">..</span>
Error response from daemon: Conflict, cannot remove the default name of the container
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>[解决方法]</strong> 找到 <code>/var/lib/docker/containers/</code> 下的对应容器的文件夹，将其删除，然后重启一下 <code>dockerd</code> 即可。我们会发现，之前无法删除的容器没有了。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 删除容器文件</span>
$ <span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /var/lib/docker/containers/f8e8c3<span class="token punctuation">..</span>.65720

<span class="token comment"># 重启服务</span>
$ <span class="token function">sudo</span> systemctl restart docker.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_7-docker-容器中文异常" tabindex="-1"><a class="header-anchor" href="#_7-docker-容器中文异常"><span>7. Docker 容器中文异常</span></a></h2><blockquote><p><strong>容器存在问题话，记得优先在官网查询</strong></p></blockquote><ul><li><strong>[问题起因]</strong> 今天登陆之前部署的 <code>MySQL</code> 数据库查询，发现使用 <code>SQL</code> 语句无法查询中文字段，即使直接输入中文都没有办法显示。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 查看容器支持的字符集</span>
root@b18f56aa1e15:<span class="token comment"># locale -a</span>
C
C.UTF-8
POSIX
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>[解决方法]</strong> <code>Docker</code> 部署的 <code>MySQL</code> 系统使用的是 <code>POSIX</code> 字符集。然而 <code>POSIX</code> 字符集是不支持中文的，而 <code>C.UTF-8</code> 是支持中文的只要把系统中的环境 <code>LANG</code> 改为 <code>&quot;C.UTF-8&quot;</code> 格式即可解决问题。同理，在 <code>K8S</code> 进入 <code>pod</code> 不能输入中文也可用此方法解决。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 临时解决</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> some-mysql <span class="token function">env</span> <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>C.UTF-8 /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 永久解决</span>
<span class="token function">docker</span> run <span class="token parameter variable">--name</span> some-mysql <span class="token punctuation">\\</span>
    <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span>my-secret-pw <span class="token punctuation">\\</span>
    <span class="token parameter variable">-d</span> mysql:tag --character-set-server<span class="token operator">=</span>utf8mb4 <span class="token punctuation">\\</span>
    --collation-server<span class="token operator">=</span>utf8mb4_unicode_ci
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_8-docker-容器网络互通" tabindex="-1"><a class="header-anchor" href="#_8-docker-容器网络互通"><span>8. Docker 容器网络互通</span></a></h2><blockquote><p><strong>了解 Docker 的四种网络模型</strong></p></blockquote><ul><li><strong>[问题起因]</strong> 在本机部署 <code>Nginx</code> 容器想代理本机启动的 <code>Python</code> 后端服务程序，但是对代码服务如下的配置，结果访问的时候一直提示 <code>502</code> 错误。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 启动Nginx服务</span>
$ <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 <span class="token environment constant">$PWD</span>:/etc/nginx nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>nginx</p><div class="language-nginx line-numbers-mode" data-ext="nginx" data-title="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
    ...
    <span class="token directive"><span class="token keyword">location</span> /api</span> <span class="token punctuation">{</span>
        proxy_pass http://localhost:8080
    <span class="token punctuation">}</span>
    ...
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>[解决方法]</strong> 后面发现是因为 <code>nginx.conf</code> 配置文件中的 <code>localhost</code> 配置的有问题，由于 <code>Nginx</code> 是在容器中运行，所以 <code>localhost</code> 为容器中的 <code>localhost</code>，而非本机的 <code>localhost</code>，所以导致无法访问。</li><li>可以将 <code>nginx.conf</code> 中的 <code>localhost</code> 改为宿主机的 <code>IP</code> 地址，就可以解决 <code>502</code> 的错误。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 查询宿主机IP地址 =&gt; 172.17.0.1</span>
$ <span class="token function">ip</span> addr show docker0
docker0: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc noqueue state UP group default
    link/ether 02:42:d5:4c:f2:1e brd ff:ff:ff:ff:ff:ff
    inet <span class="token number">172.17</span>.0.1/16 scope global docker0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:d5ff:fe4c:f21e/64 scope <span class="token function">link</span>
       valid_lft forever preferred_lft forever
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>nginx</p><div class="language-nginx line-numbers-mode" data-ext="nginx" data-title="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
    ...
    <span class="token directive"><span class="token keyword">location</span> /api</span> <span class="token punctuation">{</span>
        proxy_pass http://172.17.0.1:8080
    <span class="token punctuation">}</span>
    ...
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当容器使用 <code>host</code> 网络时，容器与宿主共用网络，这样就能在容器中访问宿主机网络，那么容器的 <code>localhost</code> 就是宿主机的 <code>localhost</code> 了。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 服务的启动方式有所改变(没有映射出来端口)</span>
<span class="token comment"># 因为本身与宿主机共用了网络，宿主机暴露端口等同于容器中暴露端口</span>
$ <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 <span class="token parameter variable">--network</span><span class="token operator">=</span>host <span class="token environment constant">$PWD</span>:/etc/nginx nginxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_9-docker-容器总线错误" tabindex="-1"><a class="header-anchor" href="#_9-docker-容器总线错误"><span>9. Docker 容器总线错误</span></a></h2><blockquote><p><strong>总线错误看到的时候还是挺吓人了</strong></p></blockquote><ul><li><strong>[问题起因]</strong> 在 <code>docker</code> 容器中运行程序的时候，提示 <code>bus error</code> 错误。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 总线报错</span>
$ inv app.user_op <span class="token parameter variable">--name</span><span class="token operator">=</span>zhangsan
Bus error <span class="token punctuation">(</span>core dumped<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,100),x=n("strong",null,"[解决方法]",-1),y=n("code",null,"docker",-1),q=n("code",null,"shm",-1),D=n("code",null,"share memory",-1),w=n("code",null,"--shm-size",-1),$=n("code",null,"docker",-1),T=n("code",null,"shm",-1),S=n("code",null,"64M",-1),E=n("code",null,"pytorch",-1),A=n("code",null,"docker",-1),P=n("code",null,"torch",-1),I=n("code",null,"tmpfs",-1),B={href:"https://github.com/pytorch/pytorch/issues/2244",target:"_blank",rel:"noopener noreferrer"},N=o(`<p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 问题原因</span>
root@18<span class="token punctuation">..</span>.35:/opt/app<span class="token comment"># df -TH</span>
Filesystem     Type     Size  Used Avail Use% Mounted on
overlay        overlay  <span class="token number">2</span>.0T  221G  <span class="token number">1</span>.4T   <span class="token number">3</span>% /
tmpfs          tmpfs     68M     <span class="token number">0</span>   68M   <span class="token number">0</span>% /dev
shm            tmpfs     68M   41k   68M   <span class="token number">1</span>% /dev/shm

<span class="token comment"># 启动docker的时候加上--shm-size参数(单位为b,k,m或g)</span>
$ <span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> --shm-size<span class="token operator">=</span>200m pytorch/pytorch:latest

<span class="token comment"># 在docker-compose添加对应配置</span>
$ shm_size: <span class="token string">&#39;2gb&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>[解决方法]</strong> 还有一种情况就是容器内的磁盘空间不足，也会导致 <code>bus error</code> 这样的报错，所以如果出现了，清除多余文件和目录或者分配一个大的磁盘空间，就可以解决了。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 磁盘空间不足</span>
$ <span class="token function">df</span> <span class="token parameter variable">-Th</span>
Filesystem     Type     Size  Used Avail Use% Mounted on
overlay        overlay    1T    1T    0G <span class="token number">100</span>% /
shm            tmpfs     64M   24K   64M   <span class="token number">1</span>% /dev/shm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_10-docker-nfs-挂载报错" tabindex="-1"><a class="header-anchor" href="#_10-docker-nfs-挂载报错"><span>10. Docker NFS 挂载报错</span></a></h2><blockquote><p><strong>NFS 挂载之后容器程序使用异常为内核版本太低导致的</strong></p></blockquote><ul><li><strong>[问题起因]</strong> 我们将服务部署到 <code>openshift</code> 集群中，启动服务调用资源文件的时候，报错信息如下所示。从报错信息中，得知是在 <code>Python3</code> 程序执行 <code>read_file()</code> 读取文件的内容，给文件加锁的时候报错了。但是奇怪的是，本地调试的时候发现服务都是可以正常运行的，文件加锁也是没问题的。后来发现，在 <code>openshift</code> 集群中使用的是 <code>NFS</code> 挂载的共享磁盘。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 报错信息</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:
    <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
    File <span class="token string">&quot;xxx/utils/storage.py&quot;</span>, line <span class="token number">34</span>, <span class="token keyword">in</span> xxx.utils.storage.LocalStorage.read_file
OSError: <span class="token punctuation">[</span>Errno <span class="token number">9</span><span class="token punctuation">]</span> Bad <span class="token function">file</span> descriptor
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>python</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 文件加锁代码</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>mount<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fileobj<span class="token punctuation">:</span>
        fcntl<span class="token punctuation">.</span>flock<span class="token punctuation">(</span>fileobj<span class="token punctuation">,</span> fcntl<span class="token punctuation">.</span>LOCK_EX<span class="token punctuation">)</span>
        data <span class="token operator">=</span> fileobj<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> data
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>[解决方法]</strong> 从下面的信息得知，要在 <code>Linux</code> 中使用 <code>flock()</code> 的话，就需要升级内核版本到 <code>2.6.11+</code> 才行。后来才发现，这实际上是由 <code>RedHat</code> 內核中的一个错误引起的，并在 <code>kernel-3.10.0-693.18.1.el7</code> 版本中得到修复。 所以对于 <code>NFSv3</code> 和 <code>NFSv4</code> 服务而已，就需要升级 <code>Linux</code> 内核版本才能够解决这个问题。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># https://t.codebug.vip/questions-930901.htm</span>
$ In Linux kernels up to <span class="token number">2.6</span>.11, flock<span class="token punctuation">(</span><span class="token punctuation">)</span> does not lock files over NFS <span class="token punctuation">(</span>i.e.,
the scope of locks was limited to the <span class="token builtin class-name">local</span> system<span class="token punctuation">)</span>. <span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span> Since Linux <span class="token number">2.6</span>.12,
NFS clients support flock<span class="token punctuation">(</span><span class="token punctuation">)</span> locks by emulating them as byte-range locks on the entire file.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_11-docker-使用默认网段" tabindex="-1"><a class="header-anchor" href="#_11-docker-使用默认网段"><span>11. Docker 使用默认网段</span></a></h2><blockquote><p><strong>启动的容器网络无法相互通信，很是奇怪！</strong></p></blockquote><ul><li><strong>[问题起因]</strong> 我们在使用 <code>Docker</code> 启动服务的时候，发现有时候服务之前可以相互连通，而有时启动的多个服务之前却出现了无法访问的情况。究其原因，发现原来是因为使用的内部私有地址网段不一致导致的。有的服务启动到了 <code>172.17 - 172.31</code> 的网段，有的服务跑到了 <code>192.169.0 - 192.168.224</code> 的网段，这样导致服务启动之后出现无法访问的情况( 默认情况下，有下面这个两个网段可供其使用)。</li></ul><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/docker-have-some-trouble-2.png" alt="Docker默认使用网段" tabindex="0" loading="lazy"><figcaption>Docker默认使用网段</figcaption></figure><p><strong>Docker 默认使用网段</strong></p><ul><li><strong>[解决方法]</strong> 上述问题的处理方式，就是手动指定 <code>Docker</code> 服务的启动网段，二选一就可以了。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 查看docker容器配置</span>
$ <span class="token function">cat</span> /etc/docker/daemon.json
<span class="token punctuation">{</span>
    <span class="token string">&quot;registry-mirrors&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">&quot;https://vec0xydj.mirror.aliyuncs.com&quot;</span><span class="token punctuation">]</span>,
    <span class="token string">&quot;default-address-pools&quot;</span>:<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">&quot;base&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;172.17.0.0/12&quot;</span>, <span class="token string">&quot;size&quot;</span>:24<span class="token punctuation">}</span><span class="token punctuation">]</span>,
    <span class="token string">&quot;experimental&quot;</span><span class="token builtin class-name">:</span> true,
    <span class="token string">&quot;default-runtime&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;nvidia&quot;</span>,
    <span class="token string">&quot;live-restore&quot;</span><span class="token builtin class-name">:</span> true,
    <span class="token string">&quot;runtimes&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;nvidia&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;path&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;/usr/bin/nvidia-container-runtime&quot;</span>,
            <span class="token string">&quot;runtimeArgs&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_12-docker-服务启动串台" tabindex="-1"><a class="header-anchor" href="#_12-docker-服务启动串台"><span>12. Docker 服务启动串台</span></a></h2><blockquote><p><strong>使用 docker-compose 命令各自启动两组服务，发现服务会串台！</strong></p></blockquote><ul><li><strong>[问题起因]</strong> 在两个不同名称的目录目录下面，使用 <code>docker-compose</code> 来启动服务，发现当 <code>A</code> 组服务启动完毕之后，再启动 <code>B</code> 组服务的时候，发现 <code>A</code> 组当中对应的一部分服务又重新启动了一次，这就非常奇怪了！因为这个问题的存在会导致，<code>A</code> 组服务和 <code>B</code> 组服务无法同时启动。之前还以为是工具的 <code>Bug</code>，后来请教了 <strong>“上峰”</strong>，才知道了原因，恍然大悟。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 服务目录结构如下所示</span>
A: /data1/app/docker-compose.yml
B: /data2/app/docker-compose.yml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>[解决方法]</strong> 发现 <code>A</code> 和 <code>B</code> 两组服务会串台的原因，原来是 <code>docker-compose</code> 会给启动的容器加 <code>label</code> 标签，然后根据这些 <code>label</code> 标签来识别和判断对应的容器服务是由谁启动的、谁来管理的，等等。而这里，我们需要关注的 <code>label</code> 变量是 <code>com.docker.compose.project</code>，其对应的值是使用启动配置文件的目录的最底层子目录名称，即上面的 <code>app</code> 就是对应的值。我们可以发现， <code>A</code> 和 <code>B</code> 两组服务对应的值都是 <code>app</code>，所以启动的时候被认为是同一个，这就出现了上述的问题。如果需要深入了解的话，可以去看对应源代码。</li></ul><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/docker-have-some-trouble-4.png" alt="Docker服务启动串台" tabindex="0" loading="lazy"><figcaption>Docker服务启动串台</figcaption></figure><p><strong>Docker 服务启动串台</strong></p><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 可以将目录结构调整为如下所示</span>
A: /data/app1/docker-compose.yml
B: /data/app2/docker-compose.yml

A: /data1/app-old/docker-compose.yml
B: /data2/app-new/docker-compose.yml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>或者使用 <code>docker-compose</code> 命令提供的参数 <code>-p</code> 手动指定标签，来规避该问题的发生。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 指定项目项目名称</span>
$ <span class="token function">docker-compose</span> <span class="token parameter variable">-f</span> ./docker-compose.yml <span class="token parameter variable">-p</span> app1 up <span class="token parameter variable">-d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_13-docker-命令调用报错" tabindex="-1"><a class="header-anchor" href="#_13-docker-命令调用报错"><span>13. Docker 命令调用报错</span></a></h2><blockquote><p><strong>在编写脚本的时候常常会执行 docker 相关的命令，但是需要注意使用细节！</strong></p></blockquote><ul><li><strong>[问题起因]</strong> <code>CI</code> 更新环境执行了一个脚本，但是脚本执行过程中报错了，如下所示。通过对应的输出信息，可以看到提示说正在执行的设备不是一个 <code>tty</code>。</li></ul><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/docker-have-some-trouble-5.png" alt="Docker命令调用报错" tabindex="0" loading="lazy"><figcaption>Docker命令调用报错</figcaption></figure><p><strong>Docker 命令调用报错</strong></p><ul><li>随即，查看了脚本发现报错地方是执行了一个 <code>exec</code> 的 <code>docker</code> 命令，大致如下所示。很奇怪的是，手动执行或直接调脚本的时候，怎么都是没有问题的，但是等到 <code>CI</code> 调用的时候怎么都是有问题。后来好好看下，下面这个命令，注意到 <code>-it</code> 这个参数了。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 脚本调用docker命令</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token operator">&lt;</span>container_name<span class="token operator">&gt;</span> psql <span class="token parameter variable">-Upostgres</span> <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>我们可以一起看下 <code>exec</code> 命令的这两个参数，自然就差不多理解了。</li></ul><table><thead><tr><th style="text-align:left;">编号</th><th style="text-align:left;">参数</th><th style="text-align:left;">解释说明</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;"><code>-i</code>/<code>-interactive</code></td><td style="text-align:left;">即使没有附加也保持 STDIN 打开；如果你需要执行命令则需要开启这个选项</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;"><code>-t</code>/<code>–tty</code></td><td style="text-align:left;">分配一个伪终端进行执行；一个连接用户的终端与容器 stdin 和 stdout 的桥梁</td></tr></tbody></table>`,50),C=n("strong",null,"[解决方法]",-1),z=n("code",null,"docker exec",-1),G=n("code",null,"-t",-1),M=n("code",null,"Allocate a pseudo-TTY",-1),O=n("code",null,"CI",-1),F=n("code",null,"job",-1),L=n("code",null,"TTY",-1),R=n("code",null,"-t",-1),U={href:"https://stackoverflow.com/questions/43099116/error-the-input-device-is-not-a-tty",target:"_blank",rel:"noopener noreferrer"},j=o(`<figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/docker-have-some-trouble-6.png" alt="Docker命令调用报错" tabindex="0" loading="lazy"><figcaption>Docker命令调用报错</figcaption></figure><p><strong>Docker 命令调用报错</strong></p><hr><h2 id="_14-docker-定时任务异常" tabindex="-1"><a class="header-anchor" href="#_14-docker-定时任务异常"><span>14. Docker 定时任务异常</span></a></h2><blockquote><p><strong>在 Crontab 定时任务中也存在 Docker 命令执行异常的情况！</strong></p></blockquote><ul><li><strong>[问题起因]</strong> 今天发现了一个问题，就是在备份 <code>Mysql</code> 数据库的时候，使用 <code>docker</code> 容器进行备份，然后使用 <code>Crontab</code> 定时任务来触发备份。但是发现备份的 <code>MySQL</code> 数据库居然是空的，但是手动执行对应命令切是好的，很奇怪。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># Crontab定时任务</span>
<span class="token number">0</span> */6 * * * <span class="token punctuation">\\</span>
    <span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token operator">&lt;</span>container_name<span class="token operator">&gt;</span> <span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token punctuation">\\</span>
        <span class="token string">&#39;exec mysqldump --all-databases -uroot -ppassword ......&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>[解决方法]</strong> 后来发现是因为执行的 <code>docker</code> 命令多个 <code>-i</code> 导致的。因为 <code>Crontab</code> 命令执行的时候，并不是交互式的，所以需要把这个去掉才可以。总结就是，如果你需要回显的话则需要 <code>-t</code> 选项，如果需要交互式会话则需要 <code>-i</code> 选项。</li></ul><table><thead><tr><th style="text-align:left;">编号</th><th style="text-align:left;">参数</th><th style="text-align:left;">解释说明</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;"><code>-i</code>/<code>-interactive</code></td><td style="text-align:left;">即使没有附加也保持 STDIN 打开；如果你需要执行命令则需要开启这个选项</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;"><code>-t</code>/<code>–tty</code></td><td style="text-align:left;">分配一个伪终端进行执行；一个连接用户的终端与容器 stdin 和 stdout 的桥梁</td></tr></tbody></table><hr><h2 id="_15-docker-变量使用引号" tabindex="-1"><a class="header-anchor" href="#_15-docker-变量使用引号"><span>15. Docker 变量使用引号</span></a></h2><blockquote><p><strong>compose 里边环境变量带不带引号的问题！</strong></p></blockquote><ul><li><strong>[问题起因]</strong> 使用过 <code>compose</code> 的朋友可能都遇到过，在编写启服务启动配置文件的时候，添加环境变量时到底是使用单引号、双引号还是不使用引号的问题？时间长了，我们可能会将三者混用，认为其效果是一样的。但是后来，发现的坑越来越多，才发现其越来越隐晦。</li></ul>`,14),V=n("code",null,"Github",-1),K={href:"https://github.com/docker/compose/issues/2854",target:"_blank",rel:"noopener noreferrer"},H=o(`<p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 在Compose中进行引用TEST_VAR变量，无法找到</span>
<span class="token assign-left variable">TEST_VAR</span><span class="token operator">=</span><span class="token string">&quot;test&quot;</span>

<span class="token comment"># 在Compose中进行引用TEST_VAR变量，可以找到</span>
<span class="token assign-left variable">TEST_VAR</span><span class="token operator">=</span>test

<span class="token comment"># 后来发现docker本身其实已经正确地处理了引号的使用</span>
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> <span class="token parameter variable">-e</span> <span class="token assign-left variable">TEST_VAR</span><span class="token operator">=</span><span class="token string">&quot;test&quot;</span> test:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>[解决方法]</strong> 得到的结论就是，因为 <code>Compose</code> 解析 <code>yaml</code> 配置文件，发现引号也进行了解释包装。这就导致原本的 <code>TEST_VAR=&quot;test&quot;</code> 被解析成了 <code>&#39;TEST_VAR=&quot;test&quot;&#39;</code> ，所以我们在引用的时候就无法获取到对应的值。现在解决方法就是，不管是我们直接在配置文件添加环境变量或者使用 <code>env_file</code> 配置文件，能不使用引号就不适用引号。</li><li>需要注意的是环境变量配置的是日志格式的话(<code>2022-01-01</code>)，如果使用的是 <code>Python</code> 的 <code>yaml.load</code> 模块的话，会被当做是 <code>date</code> 类型的，这是如果希望保持原样信息的话，可以使用 <code>&#39;</code>/<code>&quot;</code> 引起来将其变成字符串格式的。</li></ul><hr><h2 id="_16-docker-删除镜像报错" tabindex="-1"><a class="header-anchor" href="#_16-docker-删除镜像报错"><span>16. Docker 删除镜像报错</span></a></h2><blockquote><p><strong>无法删除镜像，归根到底还是有地方用到了！</strong></p></blockquote><ul><li><strong>[问题起因]</strong> 清理服器磁盘空间的时候，删除某个镜像的时候提示如下信息。提示需要强制删除，但是发现及时执行了强制删除依旧没有效果。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 删除镜像</span>
$ <span class="token function">docker</span> rmi 3ccxxxx2e862
Error response from daemon: conflict: unable to delete 3ccxxxx2e862 <span class="token punctuation">(</span>cannot be forced<span class="token punctuation">)</span> - image has dependent child images

<span class="token comment"># 强制删除</span>
$ dcoker rmi <span class="token parameter variable">-f</span> 3ccxxxx2e862
Error response from daemon: conflict: unable to delete 3ccxxxx2e862 <span class="token punctuation">(</span>cannot be forced<span class="token punctuation">)</span> - image has dependent child images
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>[解决方法]</strong> 后来才发现，出现这个原因主要是因为 <code>TAG</code> ，即存在其他镜像引用了这个镜像。这里我们可以使用如下命令查看对应镜像文件的依赖关系，然后根据对应 <code>TAG</code> 来删除镜像。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 查询依赖 - image_id表示镜像名称</span>
$ <span class="token function">docker</span> image inspect <span class="token parameter variable">--format</span><span class="token operator">=</span><span class="token string">&#39;{{.RepoTags}} {{.Id}} {{.Parent}}&#39;</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> image <span class="token function">ls</span> <span class="token parameter variable">-q</span> <span class="token parameter variable">--filter</span> <span class="token assign-left variable">since</span><span class="token operator">=</span><span class="token operator">&lt;</span>image_id<span class="token operator">&gt;</span><span class="token variable">)</span></span>

<span class="token comment"># 根据TAG删除镜像</span>
$ <span class="token function">docker</span> rmi <span class="token parameter variable">-f</span> c565xxxxc87f
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 删除悬空镜像</span>
$ <span class="token function">docker</span> rmi <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> images <span class="token parameter variable">--filter</span> <span class="token string">&quot;dangling=true&quot;</span> <span class="token parameter variable">-q</span> --no-trunc<span class="token variable">)</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_17-docker-普通用户切换" tabindex="-1"><a class="header-anchor" href="#_17-docker-普通用户切换"><span>17. Docker 普通用户切换</span></a></h2><blockquote><p><strong>切换 Docker 启动用户的话，还是需要注意下权限问题的！</strong></p></blockquote><ul><li><strong>[问题起因]</strong> 我们知道在 <code>Docker</code> 容器里面使用 <code>root</code> 用户的话，是不安全的，很容易出现越权的安全问题，所以一般情况下，我们都会使用普通用户来代替 <code>root</code> 进行服务的启动和管理的。今天给一个服务切换用户的时候，发现 <code>Nginx</code> 服务一直无法启动，提示如下权限问题。因为对应的配置文件也没有配置 <code>var</code> 相关的目录，无奈 🤷‍♀ ！️</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># Nginx报错信息</span>
nginx: <span class="token punctuation">[</span>alert<span class="token punctuation">]</span> could not <span class="token function">open</span> error log file: open<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token string">&quot;/var/log/nginx/error.log&quot;</span> failed <span class="token punctuation">(</span><span class="token number">13</span>: Permission denied<span class="token punctuation">)</span>
<span class="token number">2020</span>/11/12 <span class="token number">15</span>:25:47 <span class="token punctuation">[</span>emerg<span class="token punctuation">]</span> <span class="token number">23</span><span class="token comment">#23: mkdir() &quot;/var/cache/nginx/client_temp&quot; failed (13: Permission denied)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>[解决方法]</strong> 后来发现还是 <code>nginx.conf</code> 配置文件，配置的有问题，需要将 <code>Nginx</code> 服务启动时候需要的文件都配置到一个无权限的目录，即可解决。</li></ul><p>nginx</p><div class="language-nginx line-numbers-mode" data-ext="nginx" data-title="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">user</span>  www-data</span><span class="token punctuation">;</span>
<span class="token directive"><span class="token keyword">worker_processes</span>  <span class="token number">1</span></span><span class="token punctuation">;</span>

<span class="token directive"><span class="token keyword">error_log</span>  /data/logs/master_error.log warn</span><span class="token punctuation">;</span>
<span class="token directive"><span class="token keyword">pid</span>        /dev/shm/nginx.pid</span><span class="token punctuation">;</span>

<span class="token directive"><span class="token keyword">events</span></span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">worker_connections</span>  <span class="token number">1024</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">include</span>       /etc/nginx/mime.types</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">default_type</span>  application/octet-stream</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">gzip</span>               <span class="token boolean">on</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">sendfile</span>           <span class="token boolean">on</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">tcp_nopush</span>         <span class="token boolean">on</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">keepalive_timeout</span>  <span class="token number">65</span></span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">client_body_temp_path</span>  /tmp/client_body</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">fastcgi_temp_path</span>      /tmp/fastcgi_temp</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">proxy_temp_path</span>        /tmp/proxy_temp</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">scgi_temp_path</span>         /tmp/scgi_temp</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">uwsgi_temp_path</span>        /tmp/uwsgi_temp</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">include</span> /etc/nginx/conf.d/*.conf</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_18-docker-绑定到-ipv6-上" tabindex="-1"><a class="header-anchor" href="#_18-docker-绑定到-ipv6-上"><span>18. Docker 绑定到 IPv6 上</span></a></h2><blockquote><p><strong>Docker 服务在启动的时候，将地址绑定到 IPv6 地址上面了，提示报错信息！</strong></p></blockquote><ul><li><strong>[问题起因]</strong> 物理机器更新了对应补丁之后，重启了服务，导致原本可以正常启动的 <code>docker-compose</code> 服务提示如下报错信息。不清楚是否修改了操作系统的相关配置，还是对应 <code>docker</code> 进行的其他方面的配置，比如修改 <code>/etc/docker/daemon.json</code> 或者 <code>docker</code> 的 <code>service</code> 启动文件。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># Docker的报错信息</span>
<span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 nginx:alpine succeeds. Previously, this was failing with Error <span class="token punctuation">\\</span>
starting userland proxy: listen tcp6 <span class="token punctuation">[</span>::<span class="token punctuation">]</span>:80: socket: address family not supported by protocol.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29),Z=n("strong",null,"[解决方法]",-1),W=n("code",null,"tcp6",-1),J=n("code",null,"socket",-1),Q=n("code",null,"ipv6",-1),X=n("code",null,"ipv6",-1),Y={href:"https://github.com/moby/moby/pull/42322",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://github.com/moby/moby/issues/42288",target:"_blank",rel:"noopener noreferrer"},sn=n("code",null,"issus",-1),an=o(`<p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 操作系统配置</span>
$ <span class="token function">cat</span> /etc/sysctl.conf <span class="token operator">|</span> <span class="token function">grep</span> ipv6
<span class="token assign-left variable">net.ipv6.conf.all.disable_ipv6</span><span class="token operator">=</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>[方法一]</strong> 最为简单的解决方法，就是在 <code>docker-compose.yml</code> 文件中，手动指定将对应服务的端口绑定到 <code>ipv4</code> 上面，如下所示。</li></ul><p>yaml</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3&quot;</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">app</span><span class="token punctuation">:</span>
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> on<span class="token punctuation">-</span>failure
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> app_web
    <span class="token key atrule">image</span><span class="token punctuation">:</span> app<span class="token punctuation">:</span>latest
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;0.0.0.0:80:80/tcp&quot;</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;./app_web:/data&quot;</span>
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> app_network

<span class="token key atrule">networks</span><span class="token punctuation">:</span>
  <span class="token key atrule">app_network</span><span class="token punctuation">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>[方法二]</strong> 或者修改 <code>/etc/docker/daemon.json</code> 文件，在配置中，阻止 <code>Docker</code> 错误的将端口映射到 <code>IPv6</code> 上，即可达到同样的效果，且不用再次修改多个服务的启动配置文件了。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 修改配置</span>
$ <span class="token function">vim</span> /etc/docker/daemon.json
<span class="token punctuation">{</span>
  <span class="token string">&quot;ipv6&quot;</span><span class="token builtin class-name">:</span> false,
  <span class="token string">&quot;fixed-cidr-v6&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;2001:db8:1::/64&quot;</span>
<span class="token punctuation">}</span>

<span class="token comment"># 重启服务</span>
$ systemctl reload <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),en=n("strong",null,"[方法三]",-1),on=n("code",null,"Docker",-1),tn=n("code",null,"IPv4",-1),ln=n("code",null,"IPv6",-1),cn=n("code",null,"IPv6",-1),pn=n("code",null,"IPv4",-1),rn=n("code",null,"IPv6",-1),dn={href:"https://github.com/moby/moby/issues/2174",target:"_blank",rel:"noopener noreferrer"},un=n("code",null,"issus",-1),vn=o(`<p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 修改系统配置</span>
<span class="token builtin class-name">echo</span> <span class="token string">&#39;1&#39;</span> <span class="token operator">&gt;</span> /proc/sys/net/ipv6/conf/lo/disable_ipv6
<span class="token builtin class-name">echo</span> <span class="token string">&#39;1&#39;</span> <span class="token operator">&gt;</span> /proc/sys/net/ipv6/conf/lo/disable_ipv6
<span class="token builtin class-name">echo</span> <span class="token string">&#39;1&#39;</span> <span class="token operator">&gt;</span> /proc/sys/net/ipv6/conf/all/disable_ipv6
<span class="token builtin class-name">echo</span> <span class="token string">&#39;1&#39;</span> <span class="token operator">&gt;</span> /proc/sys/net/ipv6/conf/default/disable_ipv6

<span class="token comment"># 重启网络</span>
$ /etc/init.d/networking restart

<span class="token comment"># 最后检测是否已关闭IPv6</span>
<span class="token function">ip</span> addr show <span class="token operator">|</span> <span class="token function">grep</span> net6
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_19-docker-容器启动超时" tabindex="-1"><a class="header-anchor" href="#_19-docker-容器启动超时"><span>19. Docker 容器启动超时</span></a></h2><blockquote><p><strong>Docker 服务在启动的时候，提示超时，被直接终止了！</strong></p></blockquote><ul><li><strong>[问题起因]</strong> 使用 <code>docker-compose</code> 启动容器的时候，等待了很久的时候(大约 <code>2-3</code> 分钟左右) ，之后提示如下信息。通过阅读信息内容，可以看到是因为超时导致的，提示可以通过设置环境变量，加大超时的时间。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span>
ERROR: <span class="token keyword">for</span> xxx  UnixHTTPConnectionPool<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">&#39;localhost&#39;</span>, <span class="token assign-left variable">port</span><span class="token operator">=</span>None<span class="token punctuation">)</span>: Read timed out. <span class="token punctuation">(</span>read <span class="token assign-left variable">timeout</span><span class="token operator">=</span><span class="token number">70</span><span class="token punctuation">)</span>
ERROR: An HTTP request took too long to complete. Retry with <span class="token parameter variable">--verbose</span> to obtain debug information.
If you encounter this issue regularly because of slow network conditions, consider setting COMPOSE_HTTP_TIMEOUT to a higher value <span class="token punctuation">(</span>current value: <span class="token number">60</span><span class="token punctuation">)</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>[解决方法]</strong> 按照提示设置的环境变量之后，再次启动发现确实可以正常启动了，但是还是能够感觉到有些慢。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> <span class="token function">vim</span> /etc/profile
<span class="token builtin class-name">export</span> <span class="token assign-left variable">COMPOSE_HTTP_TIMEOUT</span><span class="token operator">=</span><span class="token number">500</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">DOCKER_CLIENT_TIMEOUT</span><span class="token operator">=</span><span class="token number">500</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>排除了下启动流程，因为容器启动有映射目录到容器里面且目录大小比较大，所以怀疑是因为 <code>i/o</code> 导致的。随即使用 <code>iotop</code> 命令查看服务器目前的 <code>i/o</code> 情况，发现存在很多个 <code>rg</code> 命令，且都处于 <code>100%</code> 左右。查了下，发现是 <code>vscode</code> 远程服务器启动的搜索目录结构的进程，西八，有些坑呀！</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> iotop
 <span class="token number">4269</span> be/4 escape     <span class="token number">15.64</span> K/s    <span class="token number">0.00</span> B/s  <span class="token number">0.00</span> % <span class="token number">98.36</span> % rg <span class="token parameter variable">--files</span> <span class="token parameter variable">--hidden</span>
 <span class="token number">4270</span> be/4 escape     <span class="token number">28.15</span> K/s    <span class="token number">0.00</span> B/s  <span class="token number">0.00</span> % <span class="token number">97.46</span> % rg <span class="token parameter variable">--files</span> <span class="token parameter variable">--hidden</span>
 <span class="token number">4272</span> be/4 escape     <span class="token number">31.27</span> K/s    <span class="token number">0.00</span> B/s  <span class="token number">0.00</span> % <span class="token number">97.39</span> % rg <span class="token parameter variable">--files</span> <span class="token parameter variable">--hidden</span>
 <span class="token number">4276</span> be/4 escape     <span class="token number">34.40</span> K/s    <span class="token number">0.00</span> B/s  <span class="token number">0.00</span> % <span class="token number">96.98</span> % rg <span class="token parameter variable">--files</span> <span class="token parameter variable">--hidden</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_20-docker-端口网络限制" tabindex="-1"><a class="header-anchor" href="#_20-docker-端口网络限制"><span>20. Docker 端口网络限制</span></a></h2><blockquote><p><strong>如果发现服务都一切正常，但是无法无法访问的话，则多为网络问题！</strong></p></blockquote><ul><li><strong>[问题起因]</strong> 启用服务之后，登录跳转发现直接 <code>502</code> 报错了。排除了配置等相关原因都没有任何问题(做过相关测试)，这就非常奇怪了！</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 部署服务架构</span>
nginx<span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span> -<span class="token operator">&gt;</span> web1<span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span>
          -<span class="token operator">&gt;</span> web2<span class="token punctuation">(</span><span class="token number">8081</span><span class="token punctuation">)</span>

<span class="token comment"># 报错信息如下所示</span>
nginx connect<span class="token punctuation">(</span><span class="token punctuation">)</span> failed <span class="token punctuation">(</span><span class="token number">113</span>: No route to <span class="token function">host</span><span class="token punctuation">)</span> <span class="token keyword">while</span> connecting to upstream
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>[解决方法]</strong> 根据错误信息可知，是因为没有路由到指定的 <code>host</code> 导致了，随即看了下防火墙是开着的，看了日志发现被过滤掉了，西八！问题找到了，现在需要做的就是，要么添加防火墙规则，要么关闭防火墙。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 检查开放的端口</span>
$ <span class="token function">sudo</span> firewall-cmd <span class="token parameter variable">--permanent</span> <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --list-ports

<span class="token comment"># 开启需要路由的端口</span>
$ <span class="token function">sudo</span> firewall-cmd <span class="token parameter variable">--permanent</span> <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">8080</span>/tcp
$ <span class="token function">sudo</span> firewall-cmd <span class="token parameter variable">--permanent</span> <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">8081</span>/tcp

<span class="token comment"># 配置立即生效</span>
firewall-cmd <span class="token parameter variable">--reload</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 关闭防火墙</span>
$ <span class="token function">sudo</span> systemctl stop firewalld.service

<span class="token comment"># 禁用自启动</span>
$ <span class="token function">sudo</span> systemctl disable firewalld.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_21-docker-无法获取镜像" tabindex="-1"><a class="header-anchor" href="#_21-docker-无法获取镜像"><span>21. Docker 无法获取镜像</span></a></h2><blockquote><p><strong>新初始化的机器，无法获取私有仓库的镜像文件！</strong></p></blockquote><ul><li><strong>[问题起因]</strong> 机器初始化之后，使用如下命令登录私有 <code>docker</code> 仓库，发现提示无法获取对应镜像，但是在其他机器上面获取该镜像就可以执行成功，这就非常奇怪了！</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 登录私有仓库</span>
$ <span class="token builtin class-name">echo</span> <span class="token string">&#39;123456&#39;</span> <span class="token operator">|</span> <span class="token function">docker</span> login <span class="token parameter variable">-u</span> escape --password-stdin docker.escapelife.site

<span class="token comment"># 异常信息提示</span>
$ <span class="token function">sudo</span> <span class="token function">docker</span> pull docker.escapelife.site/app:0.10
Error response from daemon: manifest <span class="token keyword">for</span> docker.escapelife.site/app:0.10 not found: manifest unknown: manifest unknown
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>[解决方法]</strong> 太坑了，我还以为我发现某个隐藏的 <code>bug</code> 了，可劲的排查，最后发现，原来是自己镜像包名字写错了，应该写成 <code>0.0.10</code> 的，自己却写成了 <code>0.10</code> 。这里，纪念一下，以后碰到上述报错，那肯定是镜像不存在的。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 登录私有仓库之后会在用户家目录下生成一个docker配置</span>
<span class="token comment"># 其用来记录docker私有仓库的登录认证信息(是加密过的信息但不安全) =&gt; base64</span>
$ <span class="token function">cat</span> .docker/config.json
<span class="token punctuation">{</span>
    <span class="token string">&quot;auths&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;docker.escapelife.site&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;auth&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;d00u11Fu22B3355VG2xasE12w==&quot;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_22-docker-使容器不退出" tabindex="-1"><a class="header-anchor" href="#_22-docker-使容器不退出"><span>22. Docker 使容器不退出</span></a></h2><blockquote><p><strong>如何使使用 docker-compose 启动的容器服务 hang 住而不退出</strong></p></blockquote><ul><li><strong>[问题起因]</strong> 有时候我们启动的服务，因为某些问题(<code>bug</code>) 导致服务无法正常启动，就会出现容器无限重启(<code>restart: on-failure</code>)的情况，这时就很不利于排除问题。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>➜ <span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span>
4e6xxx9a4   app:latest   <span class="token string">&quot;/xxx/…&quot;</span>   <span class="token number">26</span> seconds ago   Restarting <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">2</span> seconds ago
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>[解决方法]</strong> 这时我们就需要根据，服务构建使用命令来决定是用什么命令来 <code>hang</code> 住服务。卡住的原理，就类似于使用 <code>/bin/bash</code> 进入容器是一样的，这里我就不过多解释了。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 类似原理</span>
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> <span class="token parameter variable">--entrypoint</span><span class="token operator">=</span>/bin/bash xxx/app:latest

<span class="token comment"># 使用Command命令</span>
tty: <span class="token boolean">true</span>
command: <span class="token function">tail</span> <span class="token parameter variable">-f</span> /dev/null

<span class="token comment"># 使用Entrypoint命令</span>
tty: <span class="token boolean">true</span>
entrypoint: <span class="token function">tail</span> <span class="token parameter variable">-f</span> /dev/null
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>同理，我们在使用 <code>docker-compose</code> 或者 <code>k8s</code> 平台部署服务的时候，也有时会因为启动问题需要，使启动的服务不直接退出，来手动调试和排查问题原因。所以，我这里记录下其不同部署方式的，暂停方式。</li></ul><p>yaml</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token comment"># Compose</span>

<span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3&quot;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">app</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">:</span>latest
    <span class="token key atrule">tty</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">entrypoint</span><span class="token punctuation">:</span> /usr/bin/tail
    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token string">&quot;-f /dev/null&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>yaml</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token comment"># K8S</span>

<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> ubuntu
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">containers</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ubuntu
      <span class="token key atrule">image</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">:</span>latest
      <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;/bin/bash&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;--&quot;</span><span class="token punctuation">]</span>
      <span class="token key atrule">args</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;while true; do sleep 30; done;&quot;</span><span class="token punctuation">]</span>
      <span class="token comment"># command: [&quot;sleep&quot;]</span>
      <span class="token comment"># args: [&quot;infinity&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_23-docker-不使用默认网段" tabindex="-1"><a class="header-anchor" href="#_23-docker-不使用默认网段"><span>23. Docker 不使用默认网段</span></a></h2><blockquote><p><strong>有些情况，内部规划的网段和可能和 Dockerd 默认的网段有冲突，导致异常出现！</strong></p></blockquote><ul><li><strong>[问题起因]</strong> 今天在新机器上面，部署了一整套服务(多台机器)，服务部署完毕之后，通过前置 <code>Nginx</code> 服务发现并不能访问，后置机器开放的端口，发现发到对应端口的请求都没有转发出去。这就比较奇怪了，因为端口控制是已经开通了的，不应该出现不通的情况。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>➜ <span class="token function">nc</span> <span class="token parameter variable">-v</span> <span class="token number">172.16</span>.100.12 <span class="token number">8000</span>
nc: connect to <span class="token number">172.16</span>.100.12 port <span class="token number">8000</span> <span class="token punctuation">(</span>tcp<span class="token punctuation">)</span> failed: Connection refused
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>[解决方法]</strong> 发现服务器端口不通，我这里怀疑可能是 <code>dockerd</code> 服务启动导致的，所以我先将服务都停掉，直接在机器上面启动了 <code>Python</code> 的服务端程序(<code>Linux</code> 机器自带 <code>Python2.7.x</code> 的版本) ，然后在前置 <code>Nginx</code> 服务发现，端口确实是通的。后来，排除发现是内部服务默认网段和 <code>dockerd</code> 服务启动的默认网段是冲突的，导致重写了机器的防火墙规则，导致出现上述异常的。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ python <span class="token parameter variable">-m</span> SimpleHTTPServer <span class="token number">8000</span>
Serving HTTP on <span class="token number">0.0</span>.0.0 port <span class="token number">8000</span> <span class="token punctuation">..</span>.

➜ <span class="token function">nc</span> <span class="token parameter variable">-v</span> <span class="token number">172.16</span>.100.12 <span class="token number">8000</span>
Connection to <span class="token number">172.16</span>.100.12 <span class="token number">8000</span> port <span class="token punctuation">[</span>tcp/*<span class="token punctuation">]</span> succeeded<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,57),kn={href:"https://docs.mirantis.com/mke/3.4/install/plan-deployment/mcr-considerations/default-address-pools.html",target:"_blank",rel:"noopener noreferrer"},mn=n("code",null,"dockerd",-1),bn=o(`<p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 修改配置</span>
$ <span class="token function">sudo</span> <span class="token function">cat</span> /etc/docker/daemon.json
<span class="token punctuation">{</span>
  <span class="token string">&quot;default-address-pools&quot;</span>:<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">&quot;base&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;192.168.100.0/20&quot;</span>,<span class="token string">&quot;size&quot;</span>:24<span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token comment"># 重启服务</span>
$ <span class="token function">sudo</span> systemctl restart <span class="token function">docker</span>

<span class="token comment"># 启动服务验证是否生效</span>
$ <span class="token function">ip</span> a
$ <span class="token function">docker</span> network inspect app <span class="token operator">|</span> <span class="token function">grep</span> Subnet
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/docker-have-some-trouble-7.png" alt="Docker 不使用默认网段" tabindex="0" loading="lazy"><figcaption>Docker 不使用默认网段</figcaption></figure><p><strong>Docker 不使用默认网段</strong></p>`,4),gn={href:"https://www.sojson.com/convert/subnetmask.html",target:"_blank",rel:"noopener noreferrer"},hn=n("code",null,"base",-1),fn=n("code",null,"size",-1),_n=o(`<p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 报错信息</span>
Error response from daemon: could not <span class="token function">find</span> an available, non-overlapping IPv4 address pool among the defaults to assign to the network

<span class="token comment"># 按照下图我们可以对 pool 进行合理划分</span>
<span class="token comment"># 给定 10.210.200.0 + 255.255.255.0 的网段来划分子网</span>
$ <span class="token function">sudo</span> <span class="token function">cat</span> /etc/docker/daemon.json
<span class="token punctuation">{</span>
  <span class="token string">&quot;default-address-pools&quot;</span>:<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">&quot;base&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;10.210.200.0/24&quot;</span>,<span class="token string">&quot;size&quot;</span>:28<span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>其中，<code>base</code> 告诉我们划分子网的网段是什么(从来开始)，是从前两位(<code>/16</code>)开始，还是第三位开始(<code>/24</code>)呢？而 <code>size</code> 则告诉我们划分的每个子网有多少 <code>IP</code> 地址可以使用呢？从 <code>&quot;10.210.200.0/24&quot;</code> 我们可以知道，该网络下面只有 <code>254</code> 个可用的 <code>IP</code> 地址(直接使用肯定不够)，然后我们需要给 <code>docker</code> 使用，划分每个子网可用 <code>16</code> 个 <code>IP</code> 地址，所以子网就应该写成 <code>28</code> 了。</li></ul><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/docker-have-some-trouble-8.png" alt="Docker 不使用默认网段" tabindex="0" loading="lazy"><figcaption>Docker 不使用默认网段</figcaption></figure><p><strong>Docker 不使用默认网段</strong></p><hr><h2 id="_24-docker-添加私有仓库" tabindex="-1"><a class="header-anchor" href="#_24-docker-添加私有仓库"><span>24. Docker 添加私有仓库</span></a></h2><blockquote><p><strong>有些情况，我们服务器上面需要使用内部私有的容器镜像地址！</strong></p></blockquote><ul><li><strong>[问题起因]</strong> 如果新机器上面需要使用私有仓库的话，但是又没有配置，再获取镜像的时候就会出现如下报错信息。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 拉取/登陆私库时提示</span>
$ <span class="token function">docker</span> pull <span class="token number">192.168</span>.31.191:5000/nginx:latest
x509: certificate signed by unknown authority
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>[解决方法]</strong> 该问题的处理方式很简单，如下所示，配置一下仓库地址，重启服务并登陆私有仓库就可以了。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 添加配置</span>
$ <span class="token function">sudo</span> <span class="token function">cat</span> /etc/docker/daemon.json
<span class="token punctuation">{</span>
    <span class="token string">&quot;insecure-registries&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">&quot;192.168.31.191:5000&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token comment"># 重启docker</span>
$ <span class="token function">sudo</span> systemctl restart <span class="token function">docker</span>

<span class="token comment"># 重新登录即可</span>
$ <span class="token function">docker</span> login 私库地址 <span class="token parameter variable">-u</span> 用户名 <span class="token parameter variable">-p</span> 密码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_25-docker-解决时间同步" tabindex="-1"><a class="header-anchor" href="#_25-docker-解决时间同步"><span>25. Docker 解决时间同步</span></a></h2><blockquote><p><strong>解决 Docker 容器时间时区和宿主机不同步的问题！</strong></p></blockquote><ul><li><strong>[问题起因]</strong> 有时间我们会遇到新创建的容器，容器内部和外部时间不一致，这就导致服务的日志、定时任务等不能按照我们既定的时间触发，非常麻烦。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 容器内部时间(CST - 东八区 - 北京时间)</span>
<span class="token punctuation">[</span>root@server ~<span class="token punctuation">]</span><span class="token comment"># date</span>
Fri Apr <span class="token number">27</span> <span class="token number">22</span>:49:47 CST <span class="token number">2022</span>

<span class="token comment"># 容器外部时间(UTC - 格林尼治 - 标准时间)</span>
<span class="token punctuation">[</span>root@server ~<span class="token punctuation">]</span><span class="token comment"># docker run --rm nginx date</span>
Fri Apr <span class="token number">27</span> <span class="token number">14</span>:49:51 UTC <span class="token number">2022</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>[解决方法]</strong> 宿主机设置了时区，而 <code>Docker</code> 容器并没有设置，导致两者相差 <code>8</code> 小时。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 以 docker run 方式启动</span>
$ <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> <span class="token string">&#39;app&#39;</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">-v</span> /etc/localtime:/etc/localtime <span class="token punctuation">\\</span>
    escape/nginx:v1

<span class="token comment"># 以 Dockerfile 构建</span>
ENV <span class="token assign-left variable">TimeZone</span><span class="token operator">=</span>Asia/Shanghai
RUN <span class="token function">ln</span> <span class="token parameter variable">-sf</span> /usr/share/zoneinfo/Asia/Shanghai /etc/localtime

<span class="token comment"># 以 docker-compose 方式启动</span>
environment:
  TZ: Asia/Shanghai
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_26-docker-容器磁盘不足" tabindex="-1"><a class="header-anchor" href="#_26-docker-容器磁盘不足"><span>26. Docker 容器磁盘不足</span></a></h2><blockquote><p><strong>启动很多容器服务，导致存储和运行的容器目录(/var/lib/docker/)磁盘消耗很大！</strong></p></blockquote><ul><li><strong>[问题起因]</strong> 服务器使用久了，就会出现磁盘不足的问题，这时候就需要排除到底是什么服务或者数据导致的。但如果使用容器化部署服务的话(<code>docker</code>) ，大多数都是因为启动的容器导致，即启动的服务占用了大量的磁盘空间。</li></ul><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/docker-have-some-trouble-9.png" alt="Docker 容器导致磁盘不足" tabindex="0" loading="lazy"><figcaption>Docker 容器导致磁盘不足</figcaption></figure><p><strong>Docker 容器导致磁盘不足</strong></p><ul><li><strong>[分析思路]</strong> 我们知道 <code>/var/lib/docker/overlay2</code> 目录下的文件夹名基本都是以 <code>md5</code> 编码命名的，而 <code>overlay2</code> 是 <code>docker</code> 使用的文件存储驱动，也就是说该目录里面存储的就是现在服务器运行的容器。同时，我们知道镜像是分层的结构，所以这容器每次层都在这里得到了体现。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 查看容器的默认文件驱动</span>
$ <span class="token function">docker</span> info <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">&quot;Storage Driver&quot;</span>
Storage Driver: overlay2

<span class="token comment"># 查看磁盘消耗大户</span>
$ <span class="token function">sudo</span> <span class="token function">du</span> <span class="token parameter variable">-sh</span> /var/lib/docker/overlay2
900G    /var/lib/docker/overlay2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/docker-have-some-trouble-10.png" alt="Docker 容器导致磁盘不足" tabindex="0" loading="lazy"><figcaption>Docker 容器导致磁盘不足</figcaption></figure><p><strong>Docker 容器导致磁盘不足</strong></p><ul><li>[分析思路]</li></ul><p>如果我们临时启动了一个服务，当时只是打算只是临时使用，但是后续因为某些原因导致长期使用。同时因为运行中产生的数据或者文件并没有挂载映射到宿主机，导致写入容器内本地的文件最终到了一个很大的量级( 比如容器产生的日志文件、数据文件)。这就导致我们看到，对应层下面</p><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>diff
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>和</p><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>merged
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>目录很大的原因。</p><ul><li><code>diff</code> -&gt; 保存的就是差分信息 -&gt; 容器的可读可写层且初始为空</li><li><code>merged</code> -&gt; 容器运行时才会出现的存储情况集合 -&gt; 容器的挂载点</li><li><code>upperdir</code> -&gt; 容器层</li><li><code>lowerdir</code> -&gt; 初始镜像层</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 里面到底存储的啥</span>
<span class="token comment"># diff文件夹占用100G+，merged文件夹占用200+G</span>
$ <span class="token function">sudo</span> <span class="token function">ls</span> <span class="token parameter variable">-lh</span> /var/lib/docker/overlay2/1e3137<span class="token punctuation">..</span>.9706bca6
drwxr-xr-x  <span class="token number">10</span> root root  <span class="token number">4096</span> <span class="token number">8</span>月   <span class="token number">5</span>  <span class="token number">2021</span> diff/   <span class="token comment"># 大</span>
-rw-r--r--   <span class="token number">1</span> root root    <span class="token number">26</span> <span class="token number">8</span>月   <span class="token number">5</span>  <span class="token number">2021</span> <span class="token function">link</span>
-rw-r--r--   <span class="token number">1</span> root root   <span class="token number">376</span> <span class="token number">8</span>月   <span class="token number">5</span>  <span class="token number">2021</span> lower
drwxr-xr-x   <span class="token number">1</span> root root  <span class="token number">4096</span> <span class="token number">8</span>月   <span class="token number">5</span>  <span class="token number">2021</span> merged/ <span class="token comment"># 大</span>
drwx------   <span class="token number">3</span> root root  <span class="token number">4096</span> <span class="token number">4</span>月  <span class="token number">24</span> <span class="token number">12</span>:22 work/

<span class="token comment"># link文件的内容对应了/var/lib/docker/overlay2/l的文件夹名称</span>
<span class="token comment"># 保存了镜像层的短标识；用于解决mount参数中长字符超过页大小限制的问题</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/docker-have-some-trouble-11.png" alt="Docker 容器导致磁盘不足" tabindex="0" loading="lazy"><figcaption>Docker 容器导致磁盘不足</figcaption></figure><p><strong>Docker 容器导致磁盘不足</strong></p><ul><li><strong>[解决方法]</strong> 宿主机设置了时区，而 <code>Docker</code> 容器并没有设置，导致两者相差 <code>8</code> 小时。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 查看那个容器层占用了大量磁盘空间</span>
$ <span class="token function">sudo</span> <span class="token function">du</span> <span class="token parameter variable">-sh</span> /var/lib/docker/overlay2/* <span class="token operator">|</span> <span class="token function">grep</span> G <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-rn</span>
121G    1e3137<span class="token punctuation">..</span>.9706bca6
33G     9d50b3<span class="token punctuation">..</span>.ef3ae1b0
12G     <span class="token number">462157</span><span class="token punctuation">..</span>.03ce3935

<span class="token comment"># 查找对应层所属于那个容器镜像</span>
$ <span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-q</span> <span class="token operator">|</span> <span class="token punctuation">\\</span>
    <span class="token function">xargs</span> <span class="token function">docker</span> inspect <span class="token parameter variable">--format</span> <span class="token string">&#39;{{.State.Pid}}, {{.Id}}, {{.Name}}, {{.GraphDriver.Data.WorkDir}}&#39;</span> <span class="token operator">|</span> <span class="token punctuation">\\</span>
    <span class="token function">grep</span> xxx

<span class="token comment"># 可以根据容器id和名称查看他的层数信息(从低到高)</span>
$ <span class="token function">docker</span> inspect xxx <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">&quot;LowerDir|UpperDir|MergedDir|WorkDir&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 在该目录下也存在一个同样名字容器的文件夹(xxx)</span>
$ <span class="token function">ls</span> <span class="token parameter variable">-lh</span> /var/lib/docker/image/overlay2/layerdb/mounts/
fff30d<span class="token punctuation">..</span>.bc6a0222
8078cf<span class="token punctuation">..</span>.73bda80b
b801ce<span class="token punctuation">..</span>.cc78e234

<span class="token comment"># mount-id: 表示了我们刚才创建的容器的目录(/var/lib/docker/overlay2)</span>
$ <span class="token function">ls</span> <span class="token parameter variable">-lh</span> /var/lib/docker/image/overlay2/layerdb/mounts/ff30d<span class="token punctuation">..</span>.bc6a0222/
-rw-r--r--  <span class="token number">1</span> root root    <span class="token number">69</span> <span class="token number">8</span>月   <span class="token number">5</span>  <span class="token number">2021</span> init-id
-rw-r--r--  <span class="token number">1</span> root root    <span class="token number">64</span> <span class="token number">8</span>月   <span class="token number">5</span>  <span class="token number">2021</span> mount-id
-rw-r--r--  <span class="token number">1</span> root root    <span class="token number">71</span> <span class="token number">8</span>月   <span class="token number">5</span>  <span class="token number">2021</span> parent
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_27-docker-挂载无法删除" tabindex="-1"><a class="header-anchor" href="#_27-docker-挂载无法删除"><span>27. Docker 挂载无法删除</span></a></h2><blockquote><p><strong>启动很多容器服务，导致存储和运行的容器目录(/var/lib/docker/)磁盘消耗很大！</strong></p></blockquote><ul><li><strong>[问题起因]</strong> 发现容器服务，有一个配置文件并没有更新生效，于是上面看了下，发现也无法删除。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>root@a06xxx9e799:/opt/app/config<span class="token comment"># rm config-docker-app.yml</span>
rm: cannot remove <span class="token string">&#39;config-docker-app.yml&#39;</span><span class="token builtin class-name">:</span> Device or resource busy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>[分析思路]</strong> 感觉很奇怪，就看了下挂载信息，发现原来是在服务启动的时候硬挂进去的，所以导致无法删除。</li></ul><p>bash</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>root@a06xxx9e799:/opt/app<span class="token comment"># cat /proc/mounts | grep &quot;config&quot;</span>
/dev/sda /opt/app/config/config-docker-app.yml ext4 rw,relatime,data<span class="token operator">=</span>ordered <span class="token number">0</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_28-docker-数组环境变量" tabindex="-1"><a class="header-anchor" href="#_28-docker-数组环境变量"><span>28. Docker 数组环境变量</span></a></h2><blockquote><p><strong>在使用容器添加环境变量的时候，加不加引号是有很大区别的！</strong></p></blockquote><ul><li><strong>[问题起因]</strong> 需要在 <code>docker-compose</code> 的配置文件中，通过 <code>ENV</code> 环境变量加一个数组，但是通过程序内部的 <code>Python</code> 程序读去的时候，发现并不是自己需要的(并不是数组)，而是一个字符串。</li></ul><p>yaml</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3&quot;</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">app</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> app<span class="token punctuation">:</span>latest
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> app
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token datetime number">80:80</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> APP_CONFIG_EMAIL_LIST=&#39;<span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">]</span>&#39;
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> app_network

<span class="token key atrule">networks</span><span class="token punctuation">:</span>
  <span class="token key atrule">app_network</span><span class="token punctuation">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,65),xn=n("strong",null,"[分析思路]",-1),yn={href:"https://www.escapelife.site/posts/43a2bb9b.html#toc-heading-15",target:"_blank",rel:"noopener noreferrer"},qn=n("code",null,"compose",-1),Dn=n("code",null,"yaml",-1),wn=n("code",null,"yaml.load",-1),$n=n("code",null,"load",-1),Tn=o(`<p>yaml</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3&quot;</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">app</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> app<span class="token punctuation">:</span>latest
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> app
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token datetime number">80:80</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> APP_CONFIG_EMAIL_LIST=<span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span>
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> app_network

<span class="token key atrule">networks</span><span class="token punctuation">:</span>
  <span class="token key atrule">app_network</span><span class="token punctuation">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>python</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>$ python3
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> app<span class="token punctuation">.</span>config <span class="token keyword">import</span> get_config

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> get_config<span class="token punctuation">(</span><span class="token string">&#39;APP_CONFIG_EMAIL_LIST&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">type</span><span class="token punctuation">(</span>get_config<span class="token punctuation">(</span><span class="token string">&#39;APP_CONFIG_EMAIL_LIST&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;list&#39;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>*<strong>文*</strong></p>`,6);function Sn(En,An){const a=l("ExternalLinkIcon");return c(),i("div",null,[r,n("ul",null,[d,n("li",null,[s("那就准备迁移 "),u,s(" 的存储目录吧，或者对 "),v,s(" 设备进行扩容来达到相同的目的。更多关于 "),k,s(" 的详细参数，请点击查看 "),n("a",m,[b,e(a)]),s(" 地址。")]),g]),h,n("blockquote",null,[n("p",null,[n("a",f,[s("**Increase Docker container size from default 10GB on rhel7. **"),e(a)])])]),_,n("ul",null,[n("li",null,[x,s(" 原因是在 "),y,s(" 运行的时候，"),q,s(" 分区设置太小导致 "),D,s(" 不够。不设置 "),w,s(" 参数时，"),$,s(" 给容器默认分配的 "),T,s(" 大小为 "),S,s("，导致程序启动时不足。具体原因还是因为安装 "),E,s(" 包导致了，多进程跑任务的时候，"),A,s(" 容器分配的共享内存太小，导致 "),P,s(" 要在 "),I,s(" 上面放模型数据用于子线程的 "),n("a",B,[s("共享不足"),e(a)]),s("，就出现报错了。")])]),N,n("ul",null,[n("li",null,[C,s(),z,s(" 的参数 "),G,s(" 是指 "),M,s(" 的意思，而 "),O,s(" 在执行 "),F,s(" 的时候并不是在 "),L,s(" 终端中执行，所以 "),R,s(" 这个参数会报错。同时在 『"),n("a",U,[s("stackoverflow"),e(a)]),s(" 』也有人给出原因，可以自行查看。")])]),j,n("p",null,[s("反正我是遇到过很多问题，都是因为添加引号导致的服务启动异常的，后来得出的结论就是一律不使引号。裸奔，体验前所未有的爽快！直到现在看到了 "),V,s(" 中对应的 "),n("a",K,[s("issus"),e(a)]),s(" 之后，才终于破案了。")]),H,n("ul",null,[n("li",null,[Z,s(" 通过如上所示的报错信息，可以看到服务的启动端口绑定到了 "),W,s(" 上面了，但是对应的 "),J,s(" 发现系统本身并不支持。这时，我们一看下对应的操作系统 "),Q,s(" 的设置，发现系统禁用了，所有的 "),X,s(" 地址。需要了解的朋友，可以参考 "),n("a",Y,[s("fix port forwarding with ipv6.disable=1"),e(a)]),s(" 和 "),n("a",nn,[s("cannot start if ipv6 is disabled on host"),e(a)]),s(" 这两个 "),sn,s(" 来获取更多信息。")])]),an,n("ul",null,[n("li",null,[en,s(),on,s(" 默认情况下会同时将端口映射于 "),tn,s(" 与 "),ln,s(" 两者上，而且有的时候会出现只绑定到了 "),cn,s(" ，导致服务无法正常访问的情况。现在通用的始终还是 "),pn,s(" 地址，因此最简单的做法就是关闭 "),rn,s(" 地址。详细的配置，可以参考 "),n("a",dn,[s("Port redirecting binding to IPv6 but not IPv4 interfaces"),e(a)]),s(" 这个 "),un,s(" 地址。")])]),vn,n("p",null,[s("既然问题已经知道了，现在需要做的就是非常简单了：不适用默认网段！通过 "),n("a",kn,[s("『mirantis』"),e(a)]),s(" 里面，我们可以选择进行设置，然后重启服务 "),mn,s(" 服务，即可。")]),bn,n("p",null,[s("这时，就到了考验我们网络的子网划分的能力了：如何在给定的网段下面合理且高效的进行划分呢？咳咳，确实难倒我了，这时我们可以再这个在线网站上面 "),n("a",gn,[s("JSON 在线解析"),e(a)]),s(" 进行划分，然后选定合理的 "),hn,s(" 和 "),fn,s(" 就可以了。")]),_n,n("ul",null,[n("li",null,[xn,s(" 后来发现，还是因为添加引号的问题( 可以参考 "),n("a",yn,[s("Docker 变量使用引号"),e(a)]),s(") ，其实添加进来的还是一个字符串(因为我们特意使用了引号，导致 "),qn,s(" 内置的 "),Dn,s(" 解析器以为我们就是需要它是一个字符串，所以就没有对其进行处理)，同时通过 "),wn,s(" 的函数的时候，"),$n,s(" 会尝试的帮我们转成我们需要的类型。")])]),Tn])}const Bn=t(p,[["render",Sn],["__file","24 个常见的Docker疑难杂症处理技巧.html.vue"]]),Nn=JSON.parse('{"path":"/dev/24%20%E4%B8%AA%E5%B8%B8%E8%A7%81%E7%9A%84Docker%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87%E5%A4%84%E7%90%86%E6%8A%80%E5%B7%A7.html","title":"24 个常见的 Docker 疑难杂症处理技巧","lang":"zh-CN","frontmatter":{"author":"xlc520","title":"24 个常见的 Docker 疑难杂症处理技巧","excerpt":null,"description":"24 个常见的 Docker 疑难杂症处理技巧 这里主要是为了记录在使用 Docker 的时候遇到的问题及其处理解决方法。 Docker疑难杂症汇总Docker疑难杂症汇总 Docker 疑难杂症汇总 Docker疑难杂症汇总Docker疑难杂症汇总 Docker 疑难杂症汇总 1. Docker 迁移存储目录 默认情况系统会将 Docker 容器存放...","date":"2022-09-04T00:00:00.000Z","category":"Java","tag":"Java","article":true,"timeline":true,"icon":"java","head":[["meta",{"property":"og:url","content":"https://blog.ciberviler.top/dev/24%20%E4%B8%AA%E5%B8%B8%E8%A7%81%E7%9A%84Docker%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87%E5%A4%84%E7%90%86%E6%8A%80%E5%B7%A7.html"}],["meta",{"property":"og:site_name","content":"StudyNote - 丰富的知识笔记库"}],["meta",{"property":"og:title","content":"24 个常见的 Docker 疑难杂症处理技巧"}],["meta",{"property":"og:description","content":"24 个常见的 Docker 疑难杂症处理技巧 这里主要是为了记录在使用 Docker 的时候遇到的问题及其处理解决方法。 Docker疑难杂症汇总Docker疑难杂症汇总 Docker 疑难杂症汇总 Docker疑难杂症汇总Docker疑难杂症汇总 Docker 疑难杂症汇总 1. Docker 迁移存储目录 默认情况系统会将 Docker 容器存放..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://bitbucket.org/xlc520/blogasset/raw/main/images3/docker-have-some-trouble.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-27T13:32:36.000Z"}],["meta",{"property":"article:author","content":"xlc520"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2022-09-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-27T13:32:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"24 个常见的 Docker 疑难杂症处理技巧\\",\\"image\\":[\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/docker-have-some-trouble.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/docker-have-some-trouble-1.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/docker-have-some-trouble-3.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/docker-have-some-trouble-2.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/docker-have-some-trouble-4.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/docker-have-some-trouble-5.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/docker-have-some-trouble-6.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/docker-have-some-trouble-7.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/docker-have-some-trouble-8.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/docker-have-some-trouble-9.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/docker-have-some-trouble-10.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/docker-have-some-trouble-11.png\\"],\\"datePublished\\":\\"2022-09-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-27T13:32:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xlc520\\"}]}"]]},"headers":[{"level":2,"title":"1. Docker 迁移存储目录","slug":"_1-docker-迁移存储目录","link":"#_1-docker-迁移存储目录","children":[]},{"level":2,"title":"2. Docker 设备空间不足","slug":"_2-docker-设备空间不足","link":"#_2-docker-设备空间不足","children":[]},{"level":2,"title":"3. Docker 缺共享链接库","slug":"_3-docker-缺共享链接库","link":"#_3-docker-缺共享链接库","children":[]},{"level":2,"title":"4. Docker 容器文件损坏","slug":"_4-docker-容器文件损坏","link":"#_4-docker-容器文件损坏","children":[]},{"level":2,"title":"5. Docker 容器优雅重启","slug":"_5-docker-容器优雅重启","link":"#_5-docker-容器优雅重启","children":[]},{"level":2,"title":"6. Docker 容器无法删除","slug":"_6-docker-容器无法删除","link":"#_6-docker-容器无法删除","children":[]},{"level":2,"title":"7. Docker 容器中文异常","slug":"_7-docker-容器中文异常","link":"#_7-docker-容器中文异常","children":[]},{"level":2,"title":"8. Docker 容器网络互通","slug":"_8-docker-容器网络互通","link":"#_8-docker-容器网络互通","children":[]},{"level":2,"title":"9. Docker 容器总线错误","slug":"_9-docker-容器总线错误","link":"#_9-docker-容器总线错误","children":[]},{"level":2,"title":"10. Docker NFS 挂载报错","slug":"_10-docker-nfs-挂载报错","link":"#_10-docker-nfs-挂载报错","children":[]},{"level":2,"title":"11. Docker 使用默认网段","slug":"_11-docker-使用默认网段","link":"#_11-docker-使用默认网段","children":[]},{"level":2,"title":"12. Docker 服务启动串台","slug":"_12-docker-服务启动串台","link":"#_12-docker-服务启动串台","children":[]},{"level":2,"title":"13. Docker 命令调用报错","slug":"_13-docker-命令调用报错","link":"#_13-docker-命令调用报错","children":[]},{"level":2,"title":"14. Docker 定时任务异常","slug":"_14-docker-定时任务异常","link":"#_14-docker-定时任务异常","children":[]},{"level":2,"title":"15. Docker 变量使用引号","slug":"_15-docker-变量使用引号","link":"#_15-docker-变量使用引号","children":[]},{"level":2,"title":"16. Docker 删除镜像报错","slug":"_16-docker-删除镜像报错","link":"#_16-docker-删除镜像报错","children":[]},{"level":2,"title":"17. Docker 普通用户切换","slug":"_17-docker-普通用户切换","link":"#_17-docker-普通用户切换","children":[]},{"level":2,"title":"18. Docker 绑定到 IPv6 上","slug":"_18-docker-绑定到-ipv6-上","link":"#_18-docker-绑定到-ipv6-上","children":[]},{"level":2,"title":"19. Docker 容器启动超时","slug":"_19-docker-容器启动超时","link":"#_19-docker-容器启动超时","children":[]},{"level":2,"title":"20. Docker 端口网络限制","slug":"_20-docker-端口网络限制","link":"#_20-docker-端口网络限制","children":[]},{"level":2,"title":"21. Docker 无法获取镜像","slug":"_21-docker-无法获取镜像","link":"#_21-docker-无法获取镜像","children":[]},{"level":2,"title":"22. Docker 使容器不退出","slug":"_22-docker-使容器不退出","link":"#_22-docker-使容器不退出","children":[]},{"level":2,"title":"23. Docker 不使用默认网段","slug":"_23-docker-不使用默认网段","link":"#_23-docker-不使用默认网段","children":[]},{"level":2,"title":"24. Docker 添加私有仓库","slug":"_24-docker-添加私有仓库","link":"#_24-docker-添加私有仓库","children":[]},{"level":2,"title":"25. Docker 解决时间同步","slug":"_25-docker-解决时间同步","link":"#_25-docker-解决时间同步","children":[]},{"level":2,"title":"26. Docker 容器磁盘不足","slug":"_26-docker-容器磁盘不足","link":"#_26-docker-容器磁盘不足","children":[]},{"level":2,"title":"27. Docker 挂载无法删除","slug":"_27-docker-挂载无法删除","link":"#_27-docker-挂载无法删除","children":[]},{"level":2,"title":"28. Docker 数组环境变量","slug":"_28-docker-数组环境变量","link":"#_28-docker-数组环境变量","children":[]}],"git":{"createdTime":1662363147000,"updatedTime":1714224756000,"contributors":[{"name":"xlc520","email":"2215400217@qq.com","commits":5},{"name":"xlc","email":"2215400217@qq.com","commits":2}]},"readingTime":{"minutes":37.49,"words":11246},"filePathRelative":"dev/24 个常见的Docker疑难杂症处理技巧.md","localizedDate":"2022年9月4日","autoDesc":true}');export{Bn as comp,Nn as data};
