import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as e}from"./app-Clq2mtAP.js";const t={},p=e(`<h1 id="java-8-stream-之-collect" tabindex="-1"><a class="header-anchor" href="#java-8-stream-之-collect"><span>Java 8 Stream 之 collect()</span></a></h1><h1 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h1><p>本身我是一个比较偏向少使用 Stream 的人，因为调试比较不方便。</p><p>但是, 不得不说，stream 确实会给我们编码带来便捷。</p><p>所以还是忍不住想分享一些奇技淫巧。</p><h1 id="正文" tabindex="-1"><a class="header-anchor" href="#正文"><span>正文</span></a></h1><p>Stream 流 其实操作分三大块 ：</p><p>创建 处理 收集</p><p>我今天想分享的是 收集 这 part 的玩法。</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/3426558c692f4273921554c6c043e41b.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>OK，开始结合代码示例一起玩下：</p><p>lombok 依赖引入，代码简洁一点：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>        <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>projectlombok<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>lombok<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
            <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">1.18</span><span class="token number">.20</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>
            <span class="token generics"><span class="token punctuation">&lt;</span>scope<span class="token punctuation">&gt;</span></span>compile<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>准备一个 UserDTO.java</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDTO</span> <span class="token punctuation">{</span>
 
    <span class="token doc-comment comment">/**
     * 姓名
     */</span>
    <span class="token keyword">private</span>  <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 年龄
     */</span>
    <span class="token keyword">private</span>  <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 性别
     */</span>
    <span class="token keyword">private</span>  <span class="token class-name">String</span> sex<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 是否有方向
     */</span>
    <span class="token keyword">private</span>  <span class="token class-name">Boolean</span> hasOrientation<span class="token punctuation">;</span>
 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>准备一个模拟获取 List 的函数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserDTO</span><span class="token punctuation">&gt;</span></span> <span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">UserDTO</span> userDTO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDTO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userDTO<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;小冬&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userDTO<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userDTO<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">&quot;男&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userDTO<span class="token punctuation">.</span><span class="token function">setHasOrientation</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">UserDTO</span> userDTO2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDTO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userDTO2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;小秋&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userDTO2<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userDTO2<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">&quot;男&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userDTO2<span class="token punctuation">.</span><span class="token function">setHasOrientation</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">UserDTO</span> userDTO3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDTO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userDTO3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;春&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userDTO3<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userDTO3<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">&quot;女&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userDTO3<span class="token punctuation">.</span><span class="token function">setHasOrientation</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserDTO</span><span class="token punctuation">&gt;</span></span> userList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>
        userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userDTO2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userDTO3<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> userList<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第一个小玩法" tabindex="-1"><a class="header-anchor" href="#第一个小玩法"><span>第一个小玩法</span></a></h2><h2 id="将集合通过-stream-collect-转换成其他集合-数组" tabindex="-1"><a class="header-anchor" href="#将集合通过-stream-collect-转换成其他集合-数组"><span>将集合通过 Stream.collect() 转换成其他集合/数组</span></a></h2><p>现在拿<code>List&lt;UserDTO&gt;</code>做例子</p><p>转成 <code>HashSet&lt;UserDTO&gt;</code>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserDTO</span><span class="token punctuation">&gt;</span></span> userList <span class="token operator">=</span> <span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserDTO</span><span class="token punctuation">&gt;</span></span> usersStream <span class="token operator">=</span> userList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserDTO</span><span class="token punctuation">&gt;</span></span> usersHashSet <span class="token operator">=</span> usersStream<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toCollection</span><span class="token punctuation">(</span><span class="token class-name">HashSet</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>转成 <code>Set&lt;UserDTO&gt; usersSet</code> ：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserDTO</span><span class="token punctuation">&gt;</span></span> userList <span class="token operator">=</span> <span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserDTO</span><span class="token punctuation">&gt;</span></span> usersStream <span class="token operator">=</span> userList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserDTO</span><span class="token punctuation">&gt;</span></span> usersSet <span class="token operator">=</span> usersStream<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>转成 <code>ArrayList&lt;UserDTO&gt;</code>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserDTO</span><span class="token punctuation">&gt;</span></span> userList <span class="token operator">=</span> <span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserDTO</span><span class="token punctuation">&gt;</span></span> usersStream <span class="token operator">=</span> userList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserDTO</span><span class="token punctuation">&gt;</span></span> usersArrayList <span class="token operator">=</span> usersStream<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toCollection</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>转成 <code>Object[] objects</code> ：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserDTO</span><span class="token punctuation">&gt;</span></span> userList <span class="token operator">=</span> <span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserDTO</span><span class="token punctuation">&gt;</span></span> usersStream <span class="token operator">=</span> userList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects <span class="token operator">=</span> usersStream<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>转成 <code>UserDTO[] users</code>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserDTO</span><span class="token punctuation">&gt;</span></span> userList <span class="token operator">=</span> <span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserDTO</span><span class="token punctuation">&gt;</span></span> usersStream <span class="token operator">=</span> userList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        <span class="token class-name">UserDTO</span><span class="token punctuation">[</span><span class="token punctuation">]</span> users <span class="token operator">=</span> usersStream<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token class-name">UserDTO</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">UserDTO</span> user <span class="token operator">:</span> users<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第二个小玩法" tabindex="-1"><a class="header-anchor" href="#第二个小玩法"><span>第二个小玩法</span></a></h2><h2 id="聚合-求和、最小、最大、平均值、分组" tabindex="-1"><a class="header-anchor" href="#聚合-求和、最小、最大、平均值、分组"><span>聚合（求和、最小、最大、平均值、分组）</span></a></h2><h3 id="找出年龄最大" tabindex="-1"><a class="header-anchor" href="#找出年龄最大"><span>找出年龄最大</span></a></h3><p>stream.max（）</p><p>写法 1：</p><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code> List&lt;UserDTO&gt; userList = getUserList();
 Stream&lt;UserDTO&gt; usersStream = userList.stream();
 Optional&lt;UserDTO&gt; maxUserOptional = 
         usersStream.max((s1, s2) -&gt; s1.getAge() - s2.getAge());
 if (maxUserOptional.isPresent()) {
     UserDTO masUser = maxUserOptional.get();
     System.out.println(masUser.toString());
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>写法 2：</p><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>List&lt;UserDTO&gt; userList = getUserList(); Stream&lt;UserDTO&gt; usersStream = userList.stream();
Optional&lt;UserDTO&gt; maxUserOptionalNew = sersStream.max(Comparator.comparingInt(UserDTO::getAge));
if (maxUserOptionalNew.isPresent()) {
    UserDTO masUser = maxUserOptionalNew.get();
    System.out.println(masUser.toString());
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果：</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/75c5e09c2fa54cfebbcbb3c85e06fa57.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>输出：</p><blockquote><p>UserDTO(name=小秋, age=30, sex=男, hasOrientation=true)</p></blockquote><h3 id="找出年龄最小" tabindex="-1"><a class="header-anchor" href="#找出年龄最小"><span>找出年龄最小</span></a></h3><p>stream.min（）</p><p>写法 1：</p><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>Optional&lt;UserDTO&gt; minUserOptional = sersStream.min(Comparator.comparingInt(UserDTO::getAge));
if (minUserOptional.isPresent()) {
    UserDTO minUser = minUserOptional.get();
    System.out.println(minUser.toString());
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>写法 2：</p><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>Optional&lt;UserDTO&gt; min = usersStream.collect(Collectors.minBy((s1, s2) -&gt; s1.getAge() - 2.getAge()));
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="求平均值" tabindex="-1"><a class="header-anchor" href="#求平均值"><span>求平均值</span></a></h3><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>List&lt;UserDTO&gt; userList = getUserList();
Stream&lt;UserDTO&gt; usersStream = userList.stream();
Double avgScore = usersStream.collect(Collectors.averagingInt(UserDTO::getAge));
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果：</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/49bc1d66e04c490aa4dcd19935f56ac6.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="求和" tabindex="-1"><a class="header-anchor" href="#求和"><span>求和</span></a></h3><p>写法 1：</p><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>Integer reduceAgeSum = usersStream.map(UserDTO::getAge).reduce(0, Integer::sum);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>写法 2：</p><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>int ageSumNew = usersStream.mapToInt(UserDTO::getAge).sum();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="统计数量" tabindex="-1"><a class="header-anchor" href="#统计数量"><span>统计数量</span></a></h3><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>long countNew = usersStream.count();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="简单分组" tabindex="-1"><a class="header-anchor" href="#简单分组"><span>简单分组</span></a></h3><p>按照具体年龄分组:</p><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>//按照具体年龄分组
Map&lt;Integer, List&lt;UserDTO&gt;&gt; ageGroupMap = usersStream.collect(Collectors.groupingBy((UserDTO::getAge)));
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>效果：</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/497c8a9436fd42ae94c9bbbbda1e0a57.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>分组过程加写判断逻辑：</p><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>//按照性别 分为&quot;男&quot;一组  &quot;女&quot;一组
Map&lt;Integer, List&lt;UserDTO&gt;&gt; groupMap = usersStream.collect(Collectors.groupingBy(s -&gt; {
    if (s.getSex().equals(&quot;男&quot;)) {
        return 1;
    } else {
        return 0;
    }
}));
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果：</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/71e5c6bb9fd143fabf251e98c610092a.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="多级复杂分组" tabindex="-1"><a class="header-anchor" href="#多级复杂分组"><span>多级复杂分组</span></a></h3><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>//多级分组
// 1.先根据年龄分组
// 2.然后再根据性别分组
Map&lt;Integer, Map&lt;String, Map&lt;Integer, List&lt;UserDTO&gt;&gt;&gt;&gt; moreGroupMap = usersStream.collect(Collectors.groupingBy(

        //1.KEY(Integer)             VALUE (Map&lt;String, Map&lt;Integer, List&lt;UserDTO&gt;&gt;)
        UserDTO::getAge, Collectors.groupingBy(
                //2.KEY(String)             VALUE (Map&lt;Integer, List&lt;UserDTO&gt;&gt;)
                UserDTO::getSex, Collectors.groupingBy((userDTO) -&gt; {
                    if (userDTO.getSex().equals(&quot;男&quot;)) {
                        return 1;
                    } else {
                        return 0;
                   }
                }))));
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果：</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/a22f1c8f49954825840c34c955d43972.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>`,72),c=[p];function l(i,o){return s(),a("div",null,c)}const d=n(t,[["render",l],["__file","Java8Stream之collect().html.vue"]]),m=JSON.parse('{"path":"/dev/Java8Stream%E4%B9%8Bcollect().html","title":"Java 8 Stream 之 collect()","lang":"zh-CN","frontmatter":{"author":"xlc520","title":"Java 8 Stream 之 collect()","excerpt":null,"description":"Java 8 Stream 之 collect() 前言 本身我是一个比较偏向少使用 Stream 的人，因为调试比较不方便。 但是, 不得不说，stream 确实会给我们编码带来便捷。 所以还是忍不住想分享一些奇技淫巧。 正文 Stream 流 其实操作分三大块 ： 创建 处理 收集 我今天想分享的是 收集 这 part 的玩法。 imgimg OK...","date":"2022-11-21T00:00:00.000Z","category":"Java","tag":"Java","article":true,"timeline":true,"icon":"java","head":[["meta",{"property":"og:url","content":"https://blog.ciberviler.top/dev/Java8Stream%E4%B9%8Bcollect().html"}],["meta",{"property":"og:site_name","content":"StudyNote - 丰富的知识笔记库"}],["meta",{"property":"og:title","content":"Java 8 Stream 之 collect()"}],["meta",{"property":"og:description","content":"Java 8 Stream 之 collect() 前言 本身我是一个比较偏向少使用 Stream 的人，因为调试比较不方便。 但是, 不得不说，stream 确实会给我们编码带来便捷。 所以还是忍不住想分享一些奇技淫巧。 正文 Stream 流 其实操作分三大块 ： 创建 处理 收集 我今天想分享的是 收集 这 part 的玩法。 imgimg OK..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://bitbucket.org/xlc520/blogasset/raw/main/images3/3426558c692f4273921554c6c043e41b.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-27T13:32:36.000Z"}],["meta",{"property":"article:author","content":"xlc520"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2022-11-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-27T13:32:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 8 Stream 之 collect()\\",\\"image\\":[\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/3426558c692f4273921554c6c043e41b.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/75c5e09c2fa54cfebbcbb3c85e06fa57.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/49bc1d66e04c490aa4dcd19935f56ac6.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/497c8a9436fd42ae94c9bbbbda1e0a57.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/71e5c6bb9fd143fabf251e98c610092a.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/a22f1c8f49954825840c34c955d43972.png\\"],\\"datePublished\\":\\"2022-11-21T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-27T13:32:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xlc520\\"}]}"]]},"headers":[{"level":2,"title":"第一个小玩法","slug":"第一个小玩法","link":"#第一个小玩法","children":[]},{"level":2,"title":"将集合通过 Stream.collect() 转换成其他集合/数组","slug":"将集合通过-stream-collect-转换成其他集合-数组","link":"#将集合通过-stream-collect-转换成其他集合-数组","children":[]},{"level":2,"title":"第二个小玩法","slug":"第二个小玩法","link":"#第二个小玩法","children":[]},{"level":2,"title":"聚合（求和、最小、最大、平均值、分组）","slug":"聚合-求和、最小、最大、平均值、分组","link":"#聚合-求和、最小、最大、平均值、分组","children":[{"level":3,"title":"找出年龄最大","slug":"找出年龄最大","link":"#找出年龄最大","children":[]},{"level":3,"title":"找出年龄最小","slug":"找出年龄最小","link":"#找出年龄最小","children":[]},{"level":3,"title":"求平均值","slug":"求平均值","link":"#求平均值","children":[]},{"level":3,"title":"求和","slug":"求和","link":"#求和","children":[]},{"level":3,"title":"统计数量","slug":"统计数量","link":"#统计数量","children":[]},{"level":3,"title":"简单分组","slug":"简单分组","link":"#简单分组","children":[]},{"level":3,"title":"多级复杂分组","slug":"多级复杂分组","link":"#多级复杂分组","children":[]}]}],"git":{"createdTime":1668945063000,"updatedTime":1714224756000,"contributors":[{"name":"xlc520","email":"2215400217@qq.com","commits":6},{"name":"xlc","email":"2215400217@qq.com","commits":2}]},"readingTime":{"minutes":2.53,"words":758},"filePathRelative":"dev/Java8Stream之collect().md","localizedDate":"2022年11月21日","autoDesc":true}');export{d as comp,m as data};
