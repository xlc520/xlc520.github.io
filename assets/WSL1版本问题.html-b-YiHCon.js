import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o as i,c as d,b as e,d as n,e as o,a as r}from"./app-V68d0221.js";const l={},c=r('<h1 id="wsl-问题" tabindex="-1"><a class="header-anchor" href="#wsl-问题" aria-hidden="true">#</a> WSL 问题</h1><h2 id="启动docker后卡住starting-the-engine" tabindex="-1"><a class="header-anchor" href="#启动docker后卡住starting-the-engine" aria-hidden="true">#</a> 启动docker后卡住starting the engine</h2><p>检查发现是wsl2没配置好</p><h2 id="wsl2配置以及微软官方的docker配置教程" tabindex="-1"><a class="header-anchor" href="#wsl2配置以及微软官方的docker配置教程" aria-hidden="true">#</a> wsl2配置以及微软官方的docker配置教程</h2>',4),p={href:"https://learn.microsoft.com/zh-cn/windows/wsl/install",target:"_blank",rel:"noopener noreferrer"},h={href:"https://learn.microsoft.com/zh-cn/windows/wsl/tutorials/wsl-containers",target:"_blank",rel:"noopener noreferrer"},u=e("h2",{id:"问题-3-wsl-17-error-utiltranslatepathlist-2853-failed-to-translate-d-software-microsoft-vs-code-bin",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#问题-3-wsl-17-error-utiltranslatepathlist-2853-failed-to-translate-d-software-microsoft-vs-code-bin","aria-hidden":"true"},"#"),n(" 问题：<3>WSL (17) ERROR: UtilTranslatePathList:2853: Failed to translate D:\\Software\\Microsoft VS Code\\bin")],-1),m=e("p",null,"查看我并没有这个路径，在环境变量中找到删除即可。",-1),g=e("h2",{id:"问题-占位程序接收到错误数据。-error-code-wsl-service-0x800706f7",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#问题-占位程序接收到错误数据。-error-code-wsl-service-0x800706f7","aria-hidden":"true"},"#"),n(" 问题：占位程序接收到错误数据。 Error code: Wsl/Service/0x800706f7")],-1),k=e("p",null,"解决：",-1),w={href:"https://blog.csdn.net/qq_44652876/article/details/126697937",target:"_blank",rel:"noopener noreferrer"},v=r(`<p><strong>如果重启电脑后反复遇到占位程序接收到错误数据：</strong></p><ol><li>下载NoLsp工具：http://www.proxifier.com/tmp/Test20200228/NoLsp.exe。</li><li>使用管理员权限启动命令提示符（CMD）或PowerShell，并cd到nolsp.exe的位置。</li><li>在命令行中输入以下命令（假设NoLsp.exe位于当前目录）：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>NoLsp.exe c:\\windows\\system32\\wsl.exe
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>4.如果命令返回“success”，则表示操作成功。</p><ol start="5"><li>继续输入并运行以下命令：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>netsh winsock reset
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="6"><li>不需要重启，打开一个新的命令行输入wsl，已经可以启动</li></ol><blockquote><p>使用NoLsp防止LSP DLL加载到WSL进程是什么原理？</p><p>使用 NoLsp.exe 防止 LSP DLL 加载到 WSL（Windows Subsystem for Linux）进程的原理涉及到了几个关键概念：LSP（Layered Service Provider）、DLL（Dynamic Link Library）和WSL本身的工作原理。让我们逐一解释： LSP（Layered Service Provider） <strong>定义</strong>: LSP是一种Windows套接字（Winsock）层，它可以插入自己的网络服务提供者来监视和修改网络数据。这通常用于数据包过滤、网络流量监控、代理服务等。 <strong>工作原理</strong>: LSP作为中间层，能截获并操控Winsock API的调用。这使得它可以在数据发送到网络协议栈之前，或在数据从协议栈返回到应用程序之前，对数据进行处理。 DLL（Dynamic Link Library） <strong>定义</strong>: DLL是包含可以被多个程序同时使用的代码和数据的库。在这种情况下，LSP通常以DLL的形式存在。 <strong>影响</strong>: 当一个程序（如WSL）启动时，如果系统配置了特定的LSP，相关的DLL就会被加载到程序的进程空间中，可能会影响程序的网络行为。 WSL（Windows Subsystem for Linux） <strong>工作原理</strong>: WSL允许Windows用户运行Linux环境和命令行工具，而不必安装完整的Linux操作系统。WSL使用Windows的网络堆栈，因此受到LSP的影响。 使用 NoLsp.exe 的原理 <strong>目的</strong>: NoLsp.exe 的目的是阻止特定的LSP DLL加载到WSL进程中，从而避免由这些LSP引起的潜在问题，如网络连接问题或性能下降。 <strong>操作</strong>: 它通过修改Windows的网络配置，特别是针对 wsl.exe 进程，来实现这一目的。这样，即使系统上安装了LSP，它们也不会影响到WSL的运行。 总的来说，使用 NoLsp.exe 是一种确保WSL不受系统中安装的LSP影响的方法。这对于解决由于网络配置不当引起的WSL启动问题或性能问题非常有用。</p></blockquote><h2 id="问题-wsl-检测到-localhost-代理配置-但未镜像到-wsl。nat-模式下的-wsl-不支持-localhost-代理。" tabindex="-1"><a class="header-anchor" href="#问题-wsl-检测到-localhost-代理配置-但未镜像到-wsl。nat-模式下的-wsl-不支持-localhost-代理。" aria-hidden="true">#</a> 问题：wsl: 检测到 localhost 代理配置，但未镜像到 WSL。NAT 模式下的 WSL 不支持 localhost 代理。</h2><p>解决：</p>`,10),f={href:"https://zhuanlan.zhihu.com/p/657110386",target:"_blank",rel:"noopener noreferrer"},L=e("p",null,[e("strong",null,"请注意这篇文章中关于docker服务的WSL配置！否则会产生本文中的下一个问题！")],-1),b=e("h2",{id:"问题-windows家庭版寄主机无法连接到docker-desktop中的mysql容器问题",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#问题-windows家庭版寄主机无法连接到docker-desktop中的mysql容器问题","aria-hidden":"true"},"#"),n(" 问题：Windows家庭版寄主机无法连接到Docker Desktop中的MySQL容器问题")],-1),x={href:"https://zhuanlan.zhihu.com/p/668874450",target:"_blank",rel:"noopener noreferrer"},_=r(`<h2 id="error-response-from-daemon-open-pipe-docker-engine-windows" tabindex="-1"><a class="header-anchor" href="#error-response-from-daemon-open-pipe-docker-engine-windows" aria-hidden="true">#</a> Error response from daemon:<code> open \\\\.\\pipe\\docker_engine_windows</code></h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker config ls 

Error response from daemon: open \\\\.\\pipe\\docker_engine_windows: The system cannot find the file specified.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="第一种解决方法" tabindex="-1"><a class="header-anchor" href="#第一种解决方法" aria-hidden="true">#</a> 第一种解决方法：</h3><p>Try running the below commands in the Powershell and start the docker</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Net stop com.docker.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>And then</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Net start com.docker.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="第二种" tabindex="-1"><a class="header-anchor" href="#第二种" aria-hidden="true">#</a> 第二种：</h3>`,8),S={href:"https://twitter.com/jflh",target:"_blank",rel:"noopener noreferrer"},W=r(`<ul><li><p>Fire up a console as Administrator</p></li><li><p>Run <code>cd &#39;C:\\Program Files\\Docker\\Docker\\resources\\&#39;</code></p><p>Run <code>.\\dockerd.exe -G docker-users --config-file c:\\programdata\\docker\\config\\daemon.json --register-service</code></p></li><li><p>Run <code>start-service docker</code></p></li></ul><p>Now this did not work for me - trying to register the docker service raised an error that the service already existed. However I was able to work out a slight alternative to this which did seem to work for me:</p><ul><li>Fire up a console as Administrator</li><li>Run <code>stop-service docker</code></li><li>Run <code>cd &#39;C:\\Program Files\\Docker\\Docker\\resources\\&#39;</code></li><li>Run \`\`.\\dockerd.exe --unregister-service\`</li><li>Reboot the computer</li><li>Run \`\`.\\dockerd.exe -G docker-users --config-file c:\\programdata\\docker\\config\\daemon.json --register-service\`</li><li>Reboot the computer</li><li>Restart Docker Desktop</li><li>Put Docker Desktop back into Windows Containers mode</li></ul><p>Having done this, I was able to start my containers again, and I could see that the &quot;missing&quot; named pipe had now appeared.</p><p>Docker do suggest you might need to change the Docker Engine config in</p><p><code>c:\\programdata\\docker\\config\\daemon.json</code></p><p>to</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;experimental&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">&quot;hosts&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;npipe:////./pipe/docker_engine_windows&quot;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>But I didn&#39;t find this necessary for my machines - which perhaps makes sense because the software was clearly looking for that pipe originally, so it shouldn&#39;t need to be told to?</p><h3 id="第三种" tabindex="-1"><a class="header-anchor" href="#第三种" aria-hidden="true">#</a> 第三种：</h3><p>Try add Optional Feature - Container and Hyper-V to windows. In Windows 11: Apps → Optional features → More Windows features → Check Containers and Hyper-V and click OK</p><p>or try run:</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code><span class="token function">Enable-WindowsOptionalFeature</span> <span class="token operator">-</span>Online <span class="token operator">-</span>FeatureName containers –All
<span class="token function">Enable-WindowsOptionalFeature</span> <span class="token operator">-</span>Online <span class="token operator">-</span>FeatureName Microsoft-Hyper-V –All
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,13);function y(D,P){const s=t("ExternalLinkIcon");return i(),d("div",null,[c,e("p",null,[e("a",p,[n("安装 WSL "),o(s)])]),e("p",null,[e("a",h,[n("WSL 上的 Docker 容器入门"),o(s)])]),u,m,g,k,e("p",null,[e("a",w,[n("关于Windows下Linux子系统的安装问题0x800701bc与wsl2出现“占位程序接收到错误数据”的解决办法-CSDN博客"),o(s)])]),v,e("p",null,[e("a",f,[n("hez2010：WSL2 的 2.0 更新彻底解决网络问题"),o(s)])]),L,b,e("p",null,[e("a",x,[n("季风：23年11月 解决Windows家庭版寄主机无法连接到Docker Desktop中的MySQL容器问题"),o(s)])]),_,e("p",null,[n("Alongside the googling I tried asking about this on Sitecore Slack's Docker channel. And "),e("a",S,[n("Jeff L'Heureux"),o(s)]),n(" from Sitecore suggested that they'd had dealings with Docker Support over a related issue, and had been given a potential fix. And this one didn't involve any uninstalling. The steps he relayed are:")]),W])}const R=a(l,[["render",y],["__file","WSL1版本问题.html.vue"]]);export{R as default};
