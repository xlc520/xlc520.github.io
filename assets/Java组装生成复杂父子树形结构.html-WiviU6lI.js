import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as t}from"./app-DS3HItsn.js";const e={},p=t(`<h1 id="java-组装生成复杂父子树形结构" tabindex="-1"><a class="header-anchor" href="#java-组装生成复杂父子树形结构"><span>Java 组装生成复杂父子树形结构</span></a></h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span><strong>前言</strong></span></a></h2><p>在最近的开发中，一星期内遇到了两个类似的需求：返回组装好的部门树、返回组装好的地区信息树，最终都需要返回 List 集合对象给前端。</p><p>于是在经过需求分析和探索实践后，我对于这种基于 Stream 和 List 结构的父、子树形结构的操作有了新的认识，现在拿出来和大家作分享交流。</p><p>一般来说完成这样的需求大多数人会想到递归，但递归的方式弊端过于明显：方法多次自调用效率很低、数据量大容易导致堆栈溢出、随着树深度的增加其时间复杂度会呈指数级增加等。</p><p>核心思路如下：</p><ul><li>一次数据库查询全部数据（几万条），其它全是内存操作、性能高；</li><li>同时熟练使用 stream 流操作、Lambda 表达式、Java 地址引用，完成组装；</li><li>使用缓存注解（底层 Redis 分布式缓存实现），过期后自动更新缓存，再次调用接口则先命中缓存，没有的话再查数据库</li><li>使用 RocketMQ 来做异步通知更新，即当数据有更改时，可以异步将数据先更新，再写入缓存，使业务更合理，考虑更全面</li></ul><h2 id="一、以部门结构为例" tabindex="-1"><a class="header-anchor" href="#一、以部门结构为例"><span><strong>一、以部门结构为例</strong></span></a></h2><p>这里的实体是放在 MySQL 里的，使用简单的封装好的查询语句，这个很简单，剩下的就是内存操作了。</p><h3 id="_1-1-实体" tabindex="-1"><a class="header-anchor" href="#_1-1-实体"><span><strong>1.1 实体</strong></span></a></h3><p>租户表：租户就是一个组织或者公司，所以每个租户都有自己的部门。下面的表结构我只列了一些核心的字段，其它不重要。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PmTenant</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 主键Id
     */</span>
    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">IdType</span><span class="token punctuation">.</span><span class="token constant">ASSIGN_ID</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 租户名称
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> tenantName<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 租户唯一编码，对外暴露
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> tenantCode<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 租户Id
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> tenantId<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 租户状态，0可用，1禁用
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> status<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>部门表：公司里都会有许多的部门，一个部门里还有部门。从最顶层公司到你所在的的部门，可能会有多达六、七层。以下同样只展示核心字段：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PmDept</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 主键id
     */</span>
    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">IdType</span><span class="token punctuation">.</span><span class="token constant">ASSIGN_ID</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 父部门Id
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> parentDeptId<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 部门id，全局唯一，所有系统用
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> deptId<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 部门名称
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> deptName<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 部门所处的排序
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> orderNum<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 部门所处的层级
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> depth<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 部门状态，0可用，1删除
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> status<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 租户id
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> tenantId<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 租户编码
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> tenantCode<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-返回-vo" tabindex="-1"><a class="header-anchor" href="#_1-2-返回-vo"><span><strong>1.2 返回 VO</strong></span></a></h3><p>这个返回的 VO 是给前端的，里面的子节点集合属性 <code>childrenNodeList</code> ，是一个关键字段，所有该方式返回树结构的 VO 都需要有该字段来”封装自己“。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptTreeNodeVO</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 子节点 list 集合，封装自己
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DeptTreeNodeVO</span><span class="token punctuation">&gt;</span></span> childrenNodeList<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 部门Id
     */</span>
    <span class="token keyword">protected</span> <span class="token class-name">Integer</span> deptId<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 父部门Id
     */</span>
    <span class="token keyword">protected</span> <span class="token class-name">Integer</span> parentDeptId<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 部门名称
     */</span>
    <span class="token keyword">protected</span> <span class="token class-name">String</span> deptName<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-具体实现" tabindex="-1"><a class="header-anchor" href="#_1-3-具体实现"><span><strong>1.3 具体实现</strong></span></a></h3><p>下面直接上代码，注释已经说的比较清楚了：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">PmTenantService</span> pmTenantService<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">PmDeptMapper</span> pmDeptMapper<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@Cache</span><span class="token punctuation">(</span>expiryTime <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DeptTreeNodeVO</span><span class="token punctuation">&gt;</span></span> <span class="token function">assembleTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//租户信息列表，这里是两个租户</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PmTenant</span><span class="token punctuation">&gt;</span></span> tenantList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pmTenantService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//step1：最外层根据租户去组装，有两个租户那么 Stream 就会遍历组装两次；换句话说，如果只有一个租户，就不需要最外层的 Stream</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DeptTreeNodeVO</span><span class="token punctuation">&gt;</span></span> resultList <span class="token operator">=</span> tenantList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>tenant <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">//注：这里 map 只是简单转换了返回的对象属性（返回需要的类型），本质还是该租户下的所有部门数据</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DeptTreeNodeVO</span><span class="token punctuation">&gt;</span></span> deptTreeNodeVOList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">selectAllDeptByTenantCode</span><span class="token punctuation">(</span>tenant<span class="token punctuation">.</span><span class="token function">getTenantCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>val <span class="token operator">-&gt;</span> val<span class="token punctuation">.</span><span class="token function">convertExt</span><span class="token punctuation">(</span><span class="token class-name">DeptTreeNodeVO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//step2：利用父节点分组，即按照该租户下的所有部门的父Id进行分组，把所有的子节点List集合都找出来并一层层分好组</span>
            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">DeptTreeNodeVO</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> listMap <span class="token operator">=</span> deptTreeNodeVOList<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">DeptTreeNodeVO</span><span class="token operator">::</span><span class="token function">getParentDeptId</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//step3：关键一步，关联上子部门，将子部门的List集合经过遍历一层层地放置好，最终会得到完整的部门父子关系List集合</span>
            deptTreeNodeVOList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>val <span class="token operator">-&gt;</span> val<span class="token punctuation">.</span><span class="token function">setChildrenNodeList</span><span class="token punctuation">(</span>listMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span><span class="token function">getDeptId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//step4：过滤出顶级部门，即所有的子部门数据都归属于一个顶级父Id</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DeptTreeNodeVO</span><span class="token punctuation">&gt;</span></span> allChildrenList <span class="token operator">=</span> deptTreeNodeVOList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>val <span class="token operator">-&gt;</span> val<span class="token punctuation">.</span><span class="token function">getParentDeptId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">NumberUtils</span><span class="token punctuation">.</span><span class="token constant">INTEGER_ZERO</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//组装最外层关于租户需要的数据，实质已经不是处理部门数据了</span>
            <span class="token class-name">DeptTreeNodeVO</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeptTreeNodeVO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            node<span class="token punctuation">.</span><span class="token function">setChildrenNodeList</span><span class="token punctuation">(</span>allChildrenList<span class="token punctuation">)</span><span class="token punctuation">;</span>
            node<span class="token punctuation">.</span><span class="token function">setDeptName</span><span class="token punctuation">(</span>tenant<span class="token punctuation">.</span><span class="token function">getTenantName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> node<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>resultList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 获取某个租户下的所有部门信息
     *
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PmDept</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectAllDeptByTenantCode</span><span class="token punctuation">(</span><span class="token class-name">String</span> tenantCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> pmDeptMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PmDept</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">PmDept</span><span class="token operator">::</span><span class="token function">getTenantCode</span><span class="token punctuation">,</span> tenantCode<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">PmDept</span><span class="token operator">::</span><span class="token function">getStatus</span><span class="token punctuation">,</span> <span class="token class-name">PmDeptStatus</span><span class="token punctuation">.</span><span class="token constant">DISABLE</span><span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-效果展示" tabindex="-1"><a class="header-anchor" href="#_1-4-效果展示"><span><strong>1.4 效果展示</strong></span></a></h3><p>我这里测试的例子是只有三层，数据也没有完全展开，当然五六层也是没问题的。</p><p>只要总的部门数据量在一两万条以内（啥情况部门数量会有几万个？部门表一般是独立于其它表的）速度都是比较快的，服务器性能（主要内存给力）好的话，基本整个请求/响应（抛开网络 I/O 消耗）可以在一秒内完成。</p><h2 id="二、以省市县结构为例" tabindex="-1"><a class="header-anchor" href="#二、以省市县结构为例"><span><strong>二、以省市县结构为例</strong></span></a></h2><p>这里的实体是放在 MongoDB 里的，不熟悉 MongoDB 也不要紧，这里只需要使用一次查全量的语句。</p><h3 id="_2-1-实体" tabindex="-1"><a class="header-anchor" href="#_2-1-实体"><span><strong>2.1 实体</strong></span></a></h3><p>全国行政区表：全国的行政区包括省/直辖市/自治区、地级市、区/县级市/县这三级，再往下的街道/镇、以及下面的村/小组就不包含了。同样也是只留关键属性：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Region</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 区域id
     */</span>
    <span class="token annotation punctuation">@Id</span>
    <span class="token keyword">public</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 父Id
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Long</span> parentId<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 地区名称
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 地区全称
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> district<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 所属省
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> province<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 所属地级市
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 所属省Id
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Long</span> provinceId<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 所属地级市Id
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Long</span> cityId<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 所处层级
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Integer</span> depth<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-返回-vo" tabindex="-1"><a class="header-anchor" href="#_2-2-返回-vo"><span><strong>2.2 返回 VO</strong></span></a></h3><p>同样，这个里面的子节点集合属性 <code>childrenRegionList</code>，是一个关键字段，所有该方式返回树结构的 VO 都需要有该字段来”封装自己“。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RegionCascadeVO</span> <span class="token keyword">extends</span> <span class="token class-name">RegionVO</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 子节点 list 集合
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RegionCascadeVO</span><span class="token punctuation">&gt;</span></span> childrenRegionList<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 区域id
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 地区名称
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 所处层级
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Integer</span> depth<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 省
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> province<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 城市
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 地区全称
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> district<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 父Id
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Long</span> parentId<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 所属省Id
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Long</span> provinceId<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 所属地级市Id
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Long</span> cityId<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-具体实现" tabindex="-1"><a class="header-anchor" href="#_2-3-具体实现"><span><strong>2.3 具体实现</strong></span></a></h3><p>下面同样直接上代码，注释比较详细：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Resource</span>
<span class="token keyword">private</span> <span class="token class-name">RegionRepository</span> regionRepository<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Override</span>
<span class="token annotation punctuation">@Cache</span><span class="token punctuation">(</span>expiryTime <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RegionCascadeVO</span><span class="token punctuation">&gt;</span></span> <span class="token function">quickAllTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//第一步，从数据库中查出所有数据，按照排序条件进行排序，本质上还是这个所有数据的 List 集合</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RegionCascadeVO</span><span class="token punctuation">&gt;</span></span> regionCascadeVOList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>regionRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">//注：这里使用 map 映射了需要返回的VO，即相同的属性字段就会转换</span>
        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>val <span class="token operator">-&gt;</span> val<span class="token punctuation">.</span><span class="token function">convertExt</span><span class="token punctuation">(</span><span class="token class-name">RegionCascadeVO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment">//业务需要的排序规则，使用工具来处理</span>
        <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">RegionSortUtil</span><span class="token punctuation">.</span><span class="token function">citySort</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">RegionSortUtil</span><span class="token punctuation">.</span><span class="token function">countySort</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//第二步，根据父Id 字段进行分组，即所有数据都会按照第一层至最后一层都按照父子关系进行分组；注意，是对所有数据分组</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">RegionCascadeVO</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> listMap <span class="token operator">=</span> regionCascadeVOList<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">RegionCascadeVO</span><span class="token operator">::</span><span class="token function">getParentId</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//第三步，也是最关键的一步，将父Id下面的所有子数据List集合，经过遍历后都一层层地放置好，最终会得到一个包含父子关系的完整List</span>
    regionCascadeVOList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>val <span class="token operator">-&gt;</span> val<span class="token punctuation">.</span><span class="token function">setChildrenRegionList</span><span class="token punctuation">(</span>listMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//第四步，过滤出符合顶层父Id的所有数据，即所有数据都归属于一个顶层父Id</span>
    <span class="token keyword">return</span> regionCascadeVOList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>val <span class="token operator">-&gt;</span> <span class="token class-name">RegionConstant</span><span class="token punctuation">.</span><span class="token constant">CHINA_ID</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span><span class="token function">getParentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-效果展示" tabindex="-1"><a class="header-anchor" href="#_2-4-效果展示"><span><strong>2.4 效果展示</strong></span></a></h3><p>我这里测试环境的例子是只有省/直辖市/自治区、地级市、区/县级市/县这三级，数据也没有完全展开，当然到下面的镇/街道，乃至村/小组也是没问题的。</p><p>这里总的测试数据量是几千条，如果加上镇/街道应该得有几万条，速度也还是是比较快的，服务器性能（主要内存给力）好的话，基本整个请求/响应（抛开网络 I/O 消耗）可以在一秒内完成。</p>`,37),c=[p];function o(l,i){return s(),a("div",null,c)}const k=n(e,[["render",o],["__file","Java组装生成复杂父子树形结构.html.vue"]]),r=JSON.parse('{"path":"/dev/Java%E7%BB%84%E8%A3%85%E7%94%9F%E6%88%90%E5%A4%8D%E6%9D%82%E7%88%B6%E5%AD%90%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84.html","title":"Java组装生成复杂父子树形结构","lang":"zh-CN","frontmatter":{"author":"xlc520","title":"Java组装生成复杂父子树形结构","excerpt":null,"description":"Java 组装生成复杂父子树形结构 前言 在最近的开发中，一星期内遇到了两个类似的需求：返回组装好的部门树、返回组装好的地区信息树，最终都需要返回 List 集合对象给前端。 于是在经过需求分析和探索实践后，我对于这种基于 Stream 和 List 结构的父、子树形结构的操作有了新的认识，现在拿出来和大家作分享交流。 一般来说完成这样的需求大多数人会...","date":"2024-04-20T00:00:00.000Z","category":"Java","tag":"Java","article":true,"timeline":true,"icon":"java","head":[["meta",{"property":"og:url","content":"https://blog.ciberviler.top/dev/Java%E7%BB%84%E8%A3%85%E7%94%9F%E6%88%90%E5%A4%8D%E6%9D%82%E7%88%B6%E5%AD%90%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84.html"}],["meta",{"property":"og:site_name","content":"StudyNote - 丰富的知识笔记库"}],["meta",{"property":"og:title","content":"Java组装生成复杂父子树形结构"}],["meta",{"property":"og:description","content":"Java 组装生成复杂父子树形结构 前言 在最近的开发中，一星期内遇到了两个类似的需求：返回组装好的部门树、返回组装好的地区信息树，最终都需要返回 List 集合对象给前端。 于是在经过需求分析和探索实践后，我对于这种基于 Stream 和 List 结构的父、子树形结构的操作有了新的认识，现在拿出来和大家作分享交流。 一般来说完成这样的需求大多数人会..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-27T13:32:36.000Z"}],["meta",{"property":"article:author","content":"xlc520"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2024-04-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-27T13:32:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java组装生成复杂父子树形结构\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-27T13:32:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xlc520\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"一、以部门结构为例","slug":"一、以部门结构为例","link":"#一、以部门结构为例","children":[{"level":3,"title":"1.1 实体","slug":"_1-1-实体","link":"#_1-1-实体","children":[]},{"level":3,"title":"1.2 返回 VO","slug":"_1-2-返回-vo","link":"#_1-2-返回-vo","children":[]},{"level":3,"title":"1.3 具体实现","slug":"_1-3-具体实现","link":"#_1-3-具体实现","children":[]},{"level":3,"title":"1.4 效果展示","slug":"_1-4-效果展示","link":"#_1-4-效果展示","children":[]}]},{"level":2,"title":"二、以省市县结构为例","slug":"二、以省市县结构为例","link":"#二、以省市县结构为例","children":[{"level":3,"title":"2.1 实体","slug":"_2-1-实体","link":"#_2-1-实体","children":[]},{"level":3,"title":"2.2 返回 VO","slug":"_2-2-返回-vo","link":"#_2-2-返回-vo","children":[]},{"level":3,"title":"2.3 具体实现","slug":"_2-3-具体实现","link":"#_2-3-具体实现","children":[]},{"level":3,"title":"2.4 效果展示","slug":"_2-4-效果展示","link":"#_2-4-效果展示","children":[]}]}],"git":{"createdTime":1714214949000,"updatedTime":1714224756000,"contributors":[{"name":"xlc","email":"2215400217@qq.com","commits":2}]},"readingTime":{"minutes":7.1,"words":2129},"filePathRelative":"dev/Java组装生成复杂父子树形结构.md","localizedDate":"2024年4月20日","autoDesc":true}');export{k as comp,r as data};
