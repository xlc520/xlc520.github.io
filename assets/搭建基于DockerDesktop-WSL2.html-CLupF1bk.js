import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,d as e,e as s,b as n,a as t}from"./app-CHLzVell.js";const r={},p=e("h1",{id:"搭建基于-docker-desktop-wsl2",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#搭建基于-docker-desktop-wsl2"},[e("span",null,"搭建基于 Docker Desktop - WSL2")])],-1),u={href:"https://www.cnblogs.com/taylorshi/p/13698355.html",target:"_blank",rel:"noopener noreferrer"},d=t('<h2 id="背景介绍" tabindex="-1"><a class="header-anchor" href="#背景介绍"><span>背景介绍</span></a></h2><p>Kubernetes（简称 k8s)已成为目前业界容器编排的事实标准，其搭配 Docker 可建立非常高效便捷的高可扩展、高可用应用服务架构。</p><blockquote><p>Kubernetes 的名字来自希腊语，意思是“舵手” 或 “领航员”。K8s 是将 8 个字母“ubernete”替换为“8”的缩写。</p></blockquote><h2 id="kubernetes-的由来" tabindex="-1"><a class="header-anchor" href="#kubernetes-的由来"><span>Kubernetes 的由来</span></a></h2><blockquote><p>Kubernetes 最初源于谷歌内部的 Borg，提供了面向应用的容器集群部署和管理系统。Kubernetes 的目标旨在消除编排物理/虚拟计算，网络和存储基础设施的负担，并使应用程序运营商和开发人员完全将重点放在以容器为中心的原语上进行自助运营。Kubernetes 也提供稳定、兼容的基础（平台），用于构建定制化的 workflows 和更高级的自动化任务。</p></blockquote><p><code>Kubernetes</code> 具备完善的集群管理能力，包括多层次的安全防护和准入机制、多租户应用支撑能力、透明的服务注册和服务发现机制、内建负载均衡器、故障发现和自我修复能力、服务滚动升级和在线扩容、可扩展的资源自动调度机制、多粒度的资源配额管理能力。</p><p><code>Kubernetes</code>还提供完善的管理工具，涵盖开发、部署测试、运维监控等各个环节。</p><h3 id="borg-简介" tabindex="-1"><a class="header-anchor" href="#borg-简介"><span>Borg 简介</span></a></h3><blockquote><p>Borg 是谷歌内部的大规模集群管理系统，负责对谷歌内部很多核心服务的调度和管理。Borg 的目的是让用户能够不必操心资源管理的问题，让他们专注于自己的核心业务，并且做到跨多个数据中心的资源利用率最大化。</p></blockquote><p>Borg 主要由<code>BorgMaster</code>、<code>Borglet</code>、<code>borgcfg</code>和<code>Scheduler</code>组成，如下图所示</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920015036286-1409787293.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><ul><li>BorgMaster 是整个集群的大脑，负责维护整个集群的状态，并将数据持久化到 Paxos 存储中；</li><li>Scheduer 负责任务的调度，根据应用的特点将其调度到具体的机器上去；</li><li>Borglet 负责真正运行任务（在容器中）；</li><li>borgcfg 是 Borg 的命令行工具，用于跟 Borg 系统交互，一般通过一个配置文件来提交任务。</li></ul><h3 id="kubernetes-架构" tabindex="-1"><a class="header-anchor" href="#kubernetes-架构"><span>Kubernetes 架构</span></a></h3><p>Kubernetes 借鉴了 Borg 的设计理念，比如 Pod、Service、Labels 和单 Pod 单 IP 等。Kubernetes 的整体架构跟 Borg 非常像，如下图所示</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920015227616-2027254697.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><p>Kubernetes 主要由以下几个核心组件组成：</p><ul><li><code>etcd</code>保存了整个集群的状态；</li><li><code>apiserver</code>提供了资源操作的唯一入口，并提供认证、授权、访问控制、API 注册和发现等机制；</li><li><code>controller manager</code>负责维护集群的状态，比如故障检测、自动扩展、滚动更新等；</li><li><code>scheduler</code>负责资源的调度，按照预定的调度策略将 Pod 调度到相应的机器上；</li><li><code>kubelet</code>负责维护容器的生命周期，同时也负责<code>Volume（CVI）</code>和<code>网络（CNI）</code>的管理；</li><li><code>Container runtime</code>负责镜像管理以及<code>Pod</code>和容器的真正运行（CRI）；</li><li><code>kube-proxy</code>负责为<code>Service</code>提供<code>cluster</code>内部的服务发现和负载均衡；</li></ul><p>除了核心组件，还有一些推荐的 Add-ons：</p><ul><li><code>kube-dns</code>负责为整个集群提供 DNS 服务</li><li><code>Ingress Controller</code>为服务提供外网入口</li><li><code>Heapster</code>提供资源监控</li><li><code>Dashboard</code>提供 GUI</li><li><code>Federation</code>提供跨可用区的集群</li><li><code>Fluentd-elasticsearch</code>提供集群日志采集、存储与查询</li></ul><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920015503920-677622898.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920015508721-1218848536.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><p>Kubernetes 设计理念和功能其实就是一个类似 Linux 的分层架构，如下图所示</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920015719817-2060783609.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><ul><li>核心层：Kubernetes 最核心的功能，对外提供 API 构建高层的应用，对内提供插件式应用执行环境</li><li>应用层：部署（无状态应用、有状态应用、批处理任务、集群应用等）和路由（服务发现、DNS 解析等）</li><li>管理层：系统度量（如基础设施、容器和网络的度量），自动化（如自动扩展、动态 Provision 等）以及策略管理（RBAC、Quota、PSP、NetworkPolicy 等）</li><li>接口层：kubectl 命令行工具、客户端 SDK 以及集群联邦</li><li>生态系统：在接口层之上的庞大容器集群管理调度的生态系统，可以划分为两个范畴 Kubernetes 外部：日志、监控、配置管理、CI、CD、Workflow、FaaS、OTS 应用、ChatOps 等 Kubernetes 内部：CRI、CNI、CVI、镜像仓库、Cloud Provider、集群自身的配置和管理等</li></ul><h2 id="kubernetes-常用技术概念" tabindex="-1"><a class="header-anchor" href="#kubernetes-常用技术概念"><span>Kubernetes 常用技术概念</span></a></h2><h3 id="业务类型" tabindex="-1"><a class="header-anchor" href="#业务类型"><span>业务类型</span></a></h3><p>目前 K8s 中的业务主要可以分为</p><table><thead><tr><th style="text-align:center;">业务类型</th><th style="text-align:center;">技术概念</th></tr></thead><tbody><tr><td style="text-align:center;">长期伺服型（long-running）</td><td style="text-align:center;"><code>Deployment</code></td></tr><tr><td style="text-align:center;">批处理型（batch）</td><td style="text-align:center;"><code>Job</code></td></tr><tr><td style="text-align:center;">节点后台支撑型（node-daemon）</td><td style="text-align:center;"><code>DaemonSet</code></td></tr><tr><td style="text-align:center;">有状态应用型（stateful application）</td><td style="text-align:center;"><code>PetSet</code></td></tr></tbody></table><h3 id="pod-微服务" tabindex="-1"><a class="header-anchor" href="#pod-微服务"><span>Pod(微服务)</span></a></h3><blockquote><p>Pod 是在 K8s 集群中运行部署应用或服务的最小单元，它是可以支持多容器的。Pod 的设计理念是支持多个容器在一个 Pod 中共享网络地址和文件系统，可以通过进程间通信和文件共享这种简单高效的方式组合完成服务。</p></blockquote><p>比如你运行一个操作系统发行版的软件仓库，一个 Nginx 容器用来发布软件，另一个容器专门用来从源仓库做同步，这两个容器的镜像不太可能是一个团队开发的，但是他们一块儿工作才能提供一个微服务；这种情况下，不同的团队各自开发构建自己的容器镜像，在部署的时候组合成一个微服务对外提供服务。</p><h3 id="deployment-部署" tabindex="-1"><a class="header-anchor" href="#deployment-部署"><span>Deployment(部署)</span></a></h3><p>以 K8s 的发展方向，未来对所有长期伺服型的的业务的管理，都会通过 Deployment 来管理。</p><blockquote><p>部署表示用户对 K8s 集群的一次更新操作。部署可以是创建一个新的服务，更新一个新的服务，也可以是滚动升级一个服务。</p></blockquote><h3 id="service-服务" tabindex="-1"><a class="header-anchor" href="#service-服务"><span>Service(服务)</span></a></h3><blockquote><p>服务发现完成的工作，是针对客户端访问的服务，找到对应的的后端服务实例。在 K8s 集群中，客户端需要访问的服务就是 Service 对象。每个 Service 会对应一个集群内部有效的虚拟 IP，集群内部通过虚拟 IP 访问一个服务。</p></blockquote><p>在 K8s 集群中微服务的负载均衡是由 Kube-proxy 实现的。Kube-proxy 是 K8s 集群内部的负载均衡器。它是一个分布式代理服务器，在 K8s 的每个节点上都有一个；这一设计体现了它的伸缩性优势，需要访问服务的节点越多，提供负载均衡能力的 Kube-proxy 就越多，高可用节点也随之增多。</p><h3 id="job-任务" tabindex="-1"><a class="header-anchor" href="#job-任务"><span>Job(任务)</span></a></h3><blockquote><p>Job 是 K8s 用来控制批处理型任务的 API 对象。批处理业务与长期伺服业务的主要区别是批处理业务的运行有头有尾，而长期伺服业务在用户不停止的情况下永远运行。Job 管理的 Pod 根据用户的设置把任务成功完成就自动退出了。</p></blockquote><h3 id="daemonset-后台支撑服务集" tabindex="-1"><a class="header-anchor" href="#daemonset-后台支撑服务集"><span>DaemonSet(后台支撑服务集)</span></a></h3><blockquote><p>后台支撑型服务的核心关注点在 K8s 集群中的节点（物理机或虚拟机），要保证每个节点上都有一个此类 Pod 运行。</p></blockquote><p>典型的后台支撑型服务包括，存储，日志和监控等在每个节点上支持 K8s 集群运行的服务。</p><h3 id="petset-有状态服务集" tabindex="-1"><a class="header-anchor" href="#petset-有状态服务集"><span>PetSet(有状态服务集)</span></a></h3><p>在云原生应用的体系里，有下面两组近义词；第一组是无状态（stateless）、牲畜（cattle）、无名（nameless）、可丢弃（disposable）；第二组是有状态（stateful）、宠物（pet）、有名（having name）、不可丢弃（non-disposable）。</p><blockquote><p>PetSet 是用来控制有状态服务，PetSet 中的每个 Pod 的名字都是事先确定的，不能更改。适合于 PetSet 的业务包括数据库服务 MySQL 和 PostgreSQL，集群化管理服务 Zookeeper、etcd 等有状态服务。</p></blockquote><h3 id="volume-存储卷" tabindex="-1"><a class="header-anchor" href="#volume-存储卷"><span>Volume(存储卷)</span></a></h3><blockquote><p>K8s 集群中的存储卷跟 Docker 的存储卷有些类似，只不过 Docker 的存储卷作用范围为一个容器，而 K8s 的存储卷的生命周期和作用范围是一个 Pod。每个 Pod 中声明的存储卷由 Pod 中的所有容器共享。</p></blockquote><p>K8s 还支持使用 Persistent Volume Claim 即 PVC 这种逻辑存储，使用这种存储，使得存储的使用者可以忽略后台的实际存储技术（例如 AWS，Google 或 GlusterFS 和 Ceph），而将有关存储实际技术的配置交给存储管理员通过 Persistent Volume 来配置。</p><h3 id="node-节点" tabindex="-1"><a class="header-anchor" href="#node-节点"><span>Node(节点)</span></a></h3><blockquote><p>K8s 集群中的计算能力由 Node 提供，是所有 Pod 运行所在的工作主机，可以是物理机也可以是虚拟机。不论是物理机还是虚拟机，工作主机的统一特征是上面要运行 kubelet 管理节点上运行的容器。</p></blockquote><h2 id="假设的前提" tabindex="-1"><a class="header-anchor" href="#假设的前提"><span>假设的前提</span></a></h2><ul><li>已经开启 Windows10 系统的 WSL2，并且把版本 2 设置为默认。</li><li>已经安装并成功运行 Docker Desktop For Windows</li><li>已经设置好 Docker Desktop 的镜像加速，比如阿里云、中科大</li><li>已经安装并启用至少一个 Windows10 Linux 发行版，比如 Ubuntu 20.04</li><li>已经设置好 Linux 发行版为 Docker 运行的默认容器。</li></ul><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920191653359-653163530.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920011447642-1671879599.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920011536810-200194442.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><p>接下来，以<code>Docker Desktop</code>版本<code>v2.3.0.4</code>为例，其中自带的<code>Kubernetes</code>版本为<code>v1.16.5</code></p><h2 id="准备-kubernetes-所需的镜像组合包" tabindex="-1"><a class="header-anchor" href="#准备-kubernetes-所需的镜像组合包"><span>准备 Kubernetes 所需的镜像组合包</span></a></h2>',57),g={href:"https://github.com/AliyunContainerService/k8s-for-docker-desktop",target:"_blank",rel:"noopener noreferrer"},b=t(`<p>打开 PowerShell，执行命令行</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> clone git@github.com:AliyunContainerService/k8s-for-docker-desktop.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920020300015-355962561.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><p><code>git clone</code>完毕之后，切换到它的目录。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> .<span class="token punctuation">\\</span>k8s-for-docker-desktop<span class="token punctuation">\\</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920020454805-1441919526.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><p>这里需要注意的是，由于不同的 Docker Desktop 带的 Kubernetes 是不一样的，然后我们需要的镜像版本应该和自带的 Kubernetes 保持一致，举例，如果你的 Docker Desktop 关于页面写着 Kubernetes 的版本是 v1.16.5 的话，我们需要把这个项目切换到对应的分支。</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920192344515-1587195360.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout v1.16.5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>官网给的清单如下：</p><ul><li>如 Kubernetes 版本为<code>v1.18.3</code>, 请使用下面命令切换<code>v1.18.3</code>分支 <code>git checkout v1.18.3</code></li><li>如 Kubernetes 版本为<code>v1.16.5</code>, 请使用下面命令切换<code>v1.16.5</code>分支 <code>git checkout v1.16.5</code></li><li>如 Kubernetes 版本为<code>v1.15.5</code>, 请使用下面命令切换<code>v1.15.5</code>分支 <code>git checkout v1.15.5</code></li><li>如 Kubernetes 版本为<code>v1.15.4</code>, 请使用下面命令切换<code>v1.15.4</code>分支 <code>git checkout v1.15.4</code></li><li>如 Kubernetes 版本为<code>v1.14.8</code>, 请使用下面命令切换<code>v1.14.8</code>分支 <code>git checkout v1.14.8</code></li><li>如 Kubernetes 版本为<code>v1.14.7</code>, 请使用下面命令切换<code>v1.14.7</code>分支 <code>git checkout v1.14.7</code></li><li>如 Kubernetes 版本为<code>v1.14.6</code>, 请使用下面命令切换<code>v1.14.6</code>分支 <code>git checkout v1.14.6</code></li><li>如 Kubernetes 版本为<code>v1.14.3</code>, 请使用下面命令切换<code>v1.14.3</code>分支 <code>git checkout v1.14.3</code></li><li>如 Kubernetes 版本为<code>v1.14.1</code>, 请使用下面命令切换<code>v1.14.1</code>分支 <code>git checkout v1.14.1</code></li><li>如 Kubernetes 版本为<code>v1.13.0</code>, 请使用下面命令切换<code>v1.13.0</code>分支 <code>git checkout v1.13.0</code></li><li>如 Kubernetes 版本为<code>v1.10.11</code>, 请使用下面命令切换<code>v1.10.11</code>分支 <code>git checkout v1.10.11</code></li></ul><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920204052206-383225007.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><p>接下来，就可以执行其中的 ps 脚本：<code>load_images.ps1</code></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>.<span class="token punctuation">\\</span>load_images.ps1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中 PS 脚本内容如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>foreach<span class="token punctuation">(</span><span class="token variable">$line</span> <span class="token keyword">in</span> Get-Content .<span class="token punctuation">\\</span>images.properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$line</span>.Split<span class="token punctuation">(</span><span class="token string">&#39;=&#39;</span><span class="token punctuation">)</span>
    <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    Write-Output <span class="token string">&quot;<span class="token variable">$key</span>=<span class="token variable">$value</span>&quot;</span>
    <span class="token function">docker</span> pull <span class="token variable">\${value}</span>
    <span class="token function">docker</span> tag <span class="token variable">\${value}</span> <span class="token variable">\${key}</span>
    <span class="token function">docker</span> rmi <span class="token variable">\${value}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而<code>images.properties</code>文件中，包括哪些镜像呢？</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>k8s.gcr.io/pause:3.1<span class="token operator">=</span>registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1
k8s.gcr.io/kube-controller-manager:v1.16.5<span class="token operator">=</span>registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.16.5
k8s.gcr.io/kube-scheduler:v1.16.5<span class="token operator">=</span>registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.16.5
k8s.gcr.io/kube-proxy:v1.16.5<span class="token operator">=</span>registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.16.5
k8s.gcr.io/kube-apiserver:v1.16.5<span class="token operator">=</span>registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.16.5
k8s.gcr.io/etcd:3.3.15-0<span class="token operator">=</span>registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.3.15-0
k8s.gcr.io/coredns:1.6.2<span class="token operator">=</span>registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.6.2
quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.26.1<span class="token operator">=</span>registry.cn-hangzhou.aliyuncs.com/google_containers/nginx-ingress-controller:0.26.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以我们能看出，阿里云这个批处理呢，实际上就是配置走阿里云的镜像中心来加速相关 Image 的下载速度。</p><p>不小心，可能就会遇到一个权限坑</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920021036665-648664370.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><p>不要慌，这是要允许 Powershell 来执行未知脚本。</p><p>请在开始菜单图标上右键，选<code>Windows PowerShell管理员</code>模式运行。</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920021334941-1028246888.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><p>根据提示执行命令即可</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>Set-ExecutionPolicy RemoteSigned
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920021446329-985938.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><p>然后记得重启一次 PowerShell 使其生效。</p><p>好了，解除权限限制之后，便可以开始继续上诉脚本执行了。</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920204238369-2146637537.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><p>如果一切顺利，不要多久你可以看到所有的镜像都拉取到本地了。</p><p>我们可以简单查验下</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> images
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920204317270-637976343.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><h2 id="本地-host-环境设置" tabindex="-1"><a class="header-anchor" href="#本地-host-环境设置"><span>本地 HOST 环境设置</span></a></h2><p>为了避免遇到一些奇怪的问题，我们先需要给本地的 Host 文件添加一些项。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># Kubernetes Start</span>
<span class="token number">127.0</span>.0.1 kubernetes.docker.internal
<span class="token comment"># Kubernetes End</span>

<span class="token comment"># GitHub Start</span>
<span class="token number">52.74</span>.223.119 github.com
<span class="token number">192.30</span>.253.119 gist.github.com
<span class="token number">54.169</span>.195.247 api.github.com
<span class="token number">185.199</span>.111.153 assets-cdn.github.com
<span class="token number">151.101</span>.76.133 raw.githubusercontent.com
<span class="token number">151.101</span>.108.133 user-images.githubusercontent.com
<span class="token number">151.101</span>.76.133 gist.githubusercontent.com
<span class="token number">151.101</span>.76.133 cloud.githubusercontent.com
<span class="token number">151.101</span>.76.133 camo.githubusercontent.com
<span class="token number">151.101</span>.76.133 avatars0.githubusercontent.com
<span class="token number">151.101</span>.76.133 avatars1.githubusercontent.com
<span class="token number">151.101</span>.76.133 avatars2.githubusercontent.com
<span class="token number">151.101</span>.76.133 avatars3.githubusercontent.com
<span class="token number">151.101</span>.76.133 avatars4.githubusercontent.com
<span class="token number">151.101</span>.76.133 avatars5.githubusercontent.com
<span class="token number">151.101</span>.76.133 avatars6.githubusercontent.com
<span class="token number">151.101</span>.76.133 avatars7.githubusercontent.com
<span class="token number">151.101</span>.76.133 avatars8.githubusercontent.com
<span class="token comment"># GitHub End</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920204418843-1843976703.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><ul><li>其中<code>kubernetes.docker.internal</code>指向<code>127.0.0.1</code>可避免遇到<code>kubernetes.docker.internal: no such host</code>的问题。</li><li>其中<code>Github</code>相关的 Host 呢，是避免遇到<code>raw.githubusercontent.com 找不到host</code>的问题。</li></ul><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920204455963-1896633151.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><p>另外需要注意，<code>Docker Desktop For Windows 10</code>的日志这个路径，如果需要可以查看</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>C:<span class="token punctuation">\\</span>ProgramData<span class="token punctuation">\\</span>DockerDesktop<span class="token punctuation">\\</span>service.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920071826472-286092709.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><p>另外，<code>Docker Desktop For Windows 10</code>生成的 Kubernetes 的配置文件路径位置在</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>C:<span class="token punctuation">\\</span>Users<span class="token punctuation">\\</span>UserName<span class="token punctuation">\\</span>.kube
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="开启并安装-docker-desktop-版-kubernetes" tabindex="-1"><a class="header-anchor" href="#开启并安装-docker-desktop-版-kubernetes"><span>开启并安装 Docker Desktop 版 Kubernetes</span></a></h2><p>事实上，Docker Desktop 自带了一个单节点版本的 Kubernetes，我们执行下命令就会发现了</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>kubectl version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920030203241-1025556876.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><p>但是，其实也看到，Kubernetes 服务并没有起来，好了，我们接下来启用并安装自带的 K8S 吧。</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920030421627-1176573897.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><p>在桌面右下角，右键打开你的 Docker Desktop 小图标，进入<code>Settings</code>页面的最后一项<code>Kubernetes</code></p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920022902881-1865014691.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><p>请勾选其中的<code>Enable Kubernetes</code>项，然后点击<code>Apply &amp; Restart</code>即可开始安装。</p><blockquote><p>如果你想通过 Docker 命令行查看 Kubernetes 内部的容器资源，那么可以多勾选一个<code>Show System Containers(Advanced)</code> ，默认不建议勾选，以免它产生的实例形成干扰信息。</p></blockquote><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920031705150-1882295227.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920032559468-655038327.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><p>这里需要等待一段时间，这期间，如果你勾选了<code>Show System Containers(Advanced)</code>，希望检查是否成功执行，可以通过以下命令来查看实例创建情况</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你会发现，已经在开始陆续创建了所需的 Docker 实例了。</p><p>如果不出意外的话，最终你会看到<code>Kubernetes Running</code>的胜果。</p><p>理论上，只要上诉步骤你都操作了，按理没有坑了，如果你漏了，极有可能会在这里等待很久哦。</p><p>如果你没有勾选<code>Show System Containers(Advanced)</code>，你会看到一个干净的 Docker Desktop Dashboard 面板，里面不会看到<code>Kubernetes</code> 相关的容器，如果你勾选了，会新增一堆实例。</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920205013588-743988895.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><p>底部状态的<code>Kubernetes Running</code>就代表我们已经安装并启用成功了。</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920205435168-1342089193.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><p>接下来，验证下集群的状态，执行命令</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>kubectl cluster-info
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920205531103-1519922837.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><p>查看的 node 节点</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>kubectl get nodes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920205627877-616000426.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><p>如果以上命令都成功执行，如图输出，说明已经运转正常了。</p><h2 id="配置-kubernetes-控制台-dashboard-面板" tabindex="-1"><a class="header-anchor" href="#配置-kubernetes-控制台-dashboard-面板"><span>配置 Kubernetes 控制台(Dashboard)面板</span></a></h2><p>如果你设置了前面的 host 文件呢，这时候其中<code>raw.githubusercontent.com</code>的配置就马上要起到作用了，不然接下来这个命令就惨了。</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920205809227-1883125507.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>kubectl apply <span class="token parameter variable">-f</span> https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-rc5/aio/deploy/recommended.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920205734928-1474063800.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><p>这一步会安装并设置 Kubernetes 的 Dashboard 面板。</p><p>接下来，我们检查下 Kubernetes 的 Dashboard 面板的 Pod 状态。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>kubectl get pod <span class="token parameter variable">-n</span> kubernetes-dashboard
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>刚开始你会发现，都是<code>0/1</code>，这说明还需要在等等，实际上后台正在部署<code>kubernetes-dashboard</code>所需的 Pod。</p><p>多执行几次上诉命令，接下来你会看到每一个 Pod 都开始变成<code>1/1</code>，这时候说明 Dashboard 面板实例已经就位了，等待我们访问。</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920205857499-1713108756.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><h2 id="生成可登录-kubernetes-dashboard-的token" tabindex="-1"><a class="header-anchor" href="#生成可登录-kubernetes-dashboard-的token"><span>生成可登录 Kubernetes Dashboard 的<code>Token</code></span></a></h2><p>先执行如下命令，生成<code>Token</code></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token variable">$TOKEN</span><span class="token operator">=</span><span class="token punctuation">((</span>kubectl <span class="token parameter variable">-n</span> kube-system describe secret default <span class="token operator">|</span> Select-String <span class="token string">&quot;token:&quot;</span><span class="token punctuation">)</span> <span class="token parameter variable">-split</span> <span class="token string">&quot; +&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920205922707-1136895879.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><p>然后把这个<code>Token</code>，写入<code>Kubernetes</code>的上下文<code>docker-desktop</code>中，以便下一步登录使用</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>kubectl config set-credentials docker-desktop <span class="token parameter variable">--token</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${TOKEN}</span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920210045301-346214260.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><p>我们把这个<code>Token</code>，在终端中打印出来，并且复制保存哈。。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token variable">$TOKEN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920210112527-624896796.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><p>接着，我们开启 API Server 访问代理</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>kubectl proxy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920210413547-2033488985.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><p>然后，我们就可以使用 Url 来访问可视化界面了。</p>`,98),m={href:"http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/",target:"_blank",rel:"noopener noreferrer"},k=t(`<figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920210501303-1804114165.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><p>打开后，我们选择<code>Token</code>的登录方式，输入我们得到的<code>Token</code>信息。</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920210641744-598654338.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><p>点击<code>登录</code>，即可进入传说中的<code>Dashboard</code></p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920210756742-1026070019.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920210818191-996036967.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><p>恭喜你，开启成功！</p><h2 id="实战-kubernetes-高可用架构" tabindex="-1"><a class="header-anchor" href="#实战-kubernetes-高可用架构"><span>实战 Kubernetes 高可用架构</span></a></h2><ol><li>创建一个<code>.Net Core 3.1</code>的 API 实例项目<code>DeployToK8s</code></li></ol><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200921001804546-1308356919.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200921001854580-1993225198.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200921002014182-1112505069.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><ol><li>准备演示应用的领域模型</li></ol><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 用户表</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// Id</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token punctuation">[</span>Key<span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DatabaseGenerated</span><span class="token attribute-arguments"><span class="token punctuation">(</span>DatabaseGeneratedOption<span class="token punctuation">.</span>Identity<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 用户名</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>建立一个领域叫<code>User</code>，设置其 Id 作为主键，并且自增。</p><ol><li>添加<code>MYSQL-EFCore</code>相关的支持包到项目中</li></ol><ul><li>Pomelo.EntityFrameworkCore.MySql</li><li>Microsoft.EntityFrameworkCore.Proxies</li></ul><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200921002455527-1306803793.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200921005622476-821993304.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><p>并设置好 MYSQL 的连接字符串</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token assign-left variable">server</span><span class="token operator">=</span>localhost<span class="token punctuation">;</span><span class="token assign-left variable">Database</span><span class="token operator">=</span>deployk8s<span class="token punctuation">;</span>user <span class="token assign-left variable">id</span><span class="token operator">=</span>root<span class="token punctuation">;</span><span class="token assign-left variable">password</span><span class="token operator">=</span>yourrootpassword<span class="token punctuation">;</span><span class="token assign-left variable">CharSet</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span><span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token number">3307</span><span class="token punctuation">;</span><span class="token assign-left variable">AllowZeroDatetime</span><span class="token operator">=</span>True<span class="token punctuation">;</span><span class="token assign-left variable">ConvertZeroDatetime</span><span class="token operator">=</span>True<span class="token punctuation">;</span><span class="token assign-left variable">Pooling</span><span class="token operator">=</span>true<span class="token punctuation">;</span>Max Pool <span class="token assign-left variable">Size</span><span class="token operator">=</span><span class="token number">32767</span><span class="token punctuation">;</span>Allow User <span class="token assign-left variable">Variables</span><span class="token operator">=</span>True<span class="token punctuation">;</span><span class="token assign-left variable">AllowLoadLocalInfile</span><span class="token operator">=</span>true<span class="token punctuation">;</span><span class="token assign-left variable">SslMode</span><span class="token operator">=</span>none
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为了让 EF 在启动时自动根据我们的 Domain 创建表，我们需要加上</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token preprocessor property"># public </span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span>
<span class="token comment">// 添加Mysql数据上下文</span>
services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddTransient</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DataContext<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token preprocessor property"># public </span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IApplicationBuilder</span> app<span class="token punctuation">,</span> <span class="token class-name">IWebHostEnvironment</span> env<span class="token punctuation">)</span>

<span class="token comment">// 如果不迁移数据，只是需要在首次运行时，完全按照在上下文类中的DbContext模型来创建数据库，则可以使用</span>
<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> serviceScope <span class="token operator">=</span> app<span class="token punctuation">.</span>ApplicationServices<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IServiceScopeFactory<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CreateScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> context <span class="token operator">=</span> serviceScope<span class="token punctuation">.</span>ServiceProvider<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DataContext<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">EnsureCreated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 如果已经创建了迁移，则可以在Startup.cs中执行它们，如下所示</span>
<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> serviceScope <span class="token operator">=</span> app<span class="token punctuation">.</span>ApplicationServices<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IServiceScopeFactory<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CreateScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> context <span class="token operator">=</span> serviceScope<span class="token punctuation">.</span>ServiceProvider<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DataContext<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">Migrate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>往数据中插入一些模拟数据，创建好默认 Controller，然后并设置项目启动目录指向它。</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200921085911887-858401810.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><ol><li>给项目添加 Docker 支持</li></ol><p>在项目上右键，添加 -&gt; Docker 支持 -&gt; Linux 模式 -&gt; 确认</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200921090012804-350915610.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><p>它将在项目中新建一个<code>DockerFile</code>，这个是后续生成 Docker 镜像的配置文件。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">#See https://aka.ms/containerfastmode to understand how Visual Studio uses this Dockerfile to build your images for faster debugging.</span>

FROM mcr.microsoft.com/dotnet/core/aspnet:3.1-buster-slim AS base
WORKDIR /app
EXPOSE <span class="token number">80</span>

FROM mcr.microsoft.com/dotnet/core/sdk:3.1-buster AS build
WORKDIR /src
COPY <span class="token punctuation">[</span><span class="token string">&quot;DeployToK8s.csproj&quot;</span>, <span class="token string">&quot;&quot;</span><span class="token punctuation">]</span>
RUN dotnet restore <span class="token string">&quot;./DeployToK8s.csproj&quot;</span>
COPY <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span>
WORKDIR <span class="token string">&quot;/src/.&quot;</span>
RUN dotnet build <span class="token string">&quot;DeployToK8s.csproj&quot;</span> <span class="token parameter variable">-c</span> Release <span class="token parameter variable">-o</span> /app/build

FROM build AS publish
RUN dotnet publish <span class="token string">&quot;DeployToK8s.csproj&quot;</span> <span class="token parameter variable">-c</span> Release <span class="token parameter variable">-o</span> /app/publish

FROM base AS final
WORKDIR /app
COPY <span class="token parameter variable">--from</span><span class="token operator">=</span>publish /app/publish <span class="token builtin class-name">.</span>
ENTRYPOINT <span class="token punctuation">[</span><span class="token string">&quot;dotnet&quot;</span>, <span class="token string">&quot;DeployToK8s.dll&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>构建 Docker 镜像</li></ol><p>直接在项目的这个<code>DockerFile</code>文件上右键，有一个选项是<code>生成Docker镜像</code>，点击即可。</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200921090758873-643346420.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200921090816944-1125396572.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><p>它将开始执行构建，一共有 18 步骤，很快就能完成。</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200921090902656-128754629.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200921091048032-75040421.png" alt="Kubernetes-WSL2" tabindex="0" loading="lazy"><figcaption>Kubernetes-WSL2</figcaption></figure><h2 id="附录" tabindex="-1"><a class="header-anchor" href="#附录"><span>附录</span></a></h2>`,38),h={href:"https://github.com/AliyunContainerService/k8s-for-docker-desktop",target:"_blank",rel:"noopener noreferrer"},v={href:"http://docs.kubernetes.org.cn/",target:"_blank",rel:"noopener noreferrer"},f={href:"http://docs.kubernetes.org.cn/249.html",target:"_blank",rel:"noopener noreferrer"},x={href:"https://docs.docker.com/docker-for-windows/",target:"_blank",rel:"noopener noreferrer"};function S(K,y){const a=o("ExternalLinkIcon");return c(),l("div",null,[p,e("p",null,[e("a",u,[s("https://www.cnblogs.com/taylorshi/p/13698355.html"),n(a)])]),d,e("p",null,[s("由于 K8S 需要一些镜像，如果一个个去下载，还是有点麻烦，我们可以借助一个阿里云现有的项目"),e("a",g,[s("AliyunContainerService/k8s-for-docker-desktop"),n(a)]),s(" ，一次把所有 Image 都下载好。")]),b,e("p",null,[e("a",m,[s("http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/"),n(a)])]),k,e("ul",null,[e("li",null,[e("a",h,[s("https://github.com/AliyunContainerService/k8s-for-docker-desktop"),n(a)])]),e("li",null,[e("a",v,[s("http://docs.kubernetes.org.cn"),n(a)])]),e("li",null,[e("a",f,[s("http://docs.kubernetes.org.cn/249.html"),n(a)])]),e("li",null,[e("a",x,[s("https://docs.docker.com/docker-for-windows/"),n(a)])])])])}const W=i(r,[["render",S],["__file","搭建基于DockerDesktop-WSL2.html.vue"]]),D=JSON.parse('{"path":"/linux/%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8EDockerDesktop-WSL2.html","title":"搭建基于Docker Desktop - WSL2","lang":"zh-CN","frontmatter":{"author":"xlc520","title":"搭建基于Docker Desktop - WSL2","excerpt":null,"description":"Linux分类","date":"2022-09-22T00:00:00.000Z","category":"Linux","tag":["Linux","Docker","WSL2","Kubernetes","k8s"],"article":true,"timeline":true,"icon":"linux","head":[["meta",{"property":"og:url","content":"https://blog.ciberviler.top/linux/%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8EDockerDesktop-WSL2.html"}],["meta",{"property":"og:site_name","content":"StudyNote - 丰富的知识笔记库"}],["meta",{"property":"og:title","content":"搭建基于Docker Desktop - WSL2"}],["meta",{"property":"og:description","content":"Linux分类"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920015036286-1409787293.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-27T13:32:36.000Z"}],["meta",{"property":"article:author","content":"xlc520"}],["meta",{"property":"article:tag","content":"Linux"}],["meta",{"property":"article:tag","content":"Docker"}],["meta",{"property":"article:tag","content":"WSL2"}],["meta",{"property":"article:tag","content":"Kubernetes"}],["meta",{"property":"article:tag","content":"k8s"}],["meta",{"property":"article:published_time","content":"2022-09-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-27T13:32:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"搭建基于Docker Desktop - WSL2\\",\\"image\\":[\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920015036286-1409787293.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920015227616-2027254697.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920015503920-677622898.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920015508721-1218848536.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920015719817-2060783609.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920191653359-653163530.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920011447642-1671879599.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920011536810-200194442.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920020300015-355962561.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920020454805-1441919526.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920192344515-1587195360.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920204052206-383225007.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920021036665-648664370.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920021334941-1028246888.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920021446329-985938.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920204238369-2146637537.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920204317270-637976343.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920204418843-1843976703.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920204455963-1896633151.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920071826472-286092709.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920030203241-1025556876.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920030421627-1176573897.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920022902881-1865014691.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920031705150-1882295227.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920032559468-655038327.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920205013588-743988895.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920205435168-1342089193.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920205531103-1519922837.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920205627877-616000426.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920205809227-1883125507.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920205734928-1474063800.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920205857499-1713108756.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920205922707-1136895879.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920210045301-346214260.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920210112527-624896796.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920210413547-2033488985.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920210501303-1804114165.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920210641744-598654338.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920210756742-1026070019.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200920210818191-996036967.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200921001804546-1308356919.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200921001854580-1993225198.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200921002014182-1112505069.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200921002455527-1306803793.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200921005622476-821993304.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200921085911887-858401810.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200921090012804-350915610.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200921090758873-643346420.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200921090816944-1125396572.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200921090902656-128754629.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/375390-20200921091048032-75040421.png\\"],\\"datePublished\\":\\"2022-09-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-27T13:32:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xlc520\\"}]}"]]},"headers":[{"level":2,"title":"背景介绍","slug":"背景介绍","link":"#背景介绍","children":[]},{"level":2,"title":"Kubernetes 的由来","slug":"kubernetes-的由来","link":"#kubernetes-的由来","children":[{"level":3,"title":"Borg 简介","slug":"borg-简介","link":"#borg-简介","children":[]},{"level":3,"title":"Kubernetes 架构","slug":"kubernetes-架构","link":"#kubernetes-架构","children":[]}]},{"level":2,"title":"Kubernetes 常用技术概念","slug":"kubernetes-常用技术概念","link":"#kubernetes-常用技术概念","children":[{"level":3,"title":"业务类型","slug":"业务类型","link":"#业务类型","children":[]},{"level":3,"title":"Pod(微服务)","slug":"pod-微服务","link":"#pod-微服务","children":[]},{"level":3,"title":"Deployment(部署)","slug":"deployment-部署","link":"#deployment-部署","children":[]},{"level":3,"title":"Service(服务)","slug":"service-服务","link":"#service-服务","children":[]},{"level":3,"title":"Job(任务)","slug":"job-任务","link":"#job-任务","children":[]},{"level":3,"title":"DaemonSet(后台支撑服务集)","slug":"daemonset-后台支撑服务集","link":"#daemonset-后台支撑服务集","children":[]},{"level":3,"title":"PetSet(有状态服务集)","slug":"petset-有状态服务集","link":"#petset-有状态服务集","children":[]},{"level":3,"title":"Volume(存储卷)","slug":"volume-存储卷","link":"#volume-存储卷","children":[]},{"level":3,"title":"Node(节点)","slug":"node-节点","link":"#node-节点","children":[]}]},{"level":2,"title":"假设的前提","slug":"假设的前提","link":"#假设的前提","children":[]},{"level":2,"title":"准备 Kubernetes 所需的镜像组合包","slug":"准备-kubernetes-所需的镜像组合包","link":"#准备-kubernetes-所需的镜像组合包","children":[]},{"level":2,"title":"本地 HOST 环境设置","slug":"本地-host-环境设置","link":"#本地-host-环境设置","children":[]},{"level":2,"title":"开启并安装 Docker Desktop 版 Kubernetes","slug":"开启并安装-docker-desktop-版-kubernetes","link":"#开启并安装-docker-desktop-版-kubernetes","children":[]},{"level":2,"title":"配置 Kubernetes 控制台(Dashboard)面板","slug":"配置-kubernetes-控制台-dashboard-面板","link":"#配置-kubernetes-控制台-dashboard-面板","children":[]},{"level":2,"title":"生成可登录 Kubernetes Dashboard 的Token","slug":"生成可登录-kubernetes-dashboard-的token","link":"#生成可登录-kubernetes-dashboard-的token","children":[]},{"level":2,"title":"实战 Kubernetes 高可用架构","slug":"实战-kubernetes-高可用架构","link":"#实战-kubernetes-高可用架构","children":[]},{"level":2,"title":"附录","slug":"附录","link":"#附录","children":[]}],"git":{"createdTime":1673778094000,"updatedTime":1714224756000,"contributors":[{"name":"xlc520","email":"2215400217@qq.com","commits":3},{"name":"xlc","email":"2215400217@qq.com","commits":2}]},"readingTime":{"minutes":16.37,"words":4912},"filePathRelative":"linux/搭建基于DockerDesktop-WSL2.md","localizedDate":"2022年9月22日"}');export{W as comp,D as data};
