import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as r,b as s,n as h,g as d,r as e,a as o}from"./app-DWXdHMII.js";const k={};function c(p,i){const a=e("VPBanner"),t=e("Share");return n(),r("div",null,[s(a,h(d({title:"Docker容器内服务访问宿主机中的服务",content:"Docker容器内服务访问宿主机中的服务",logo:null,color:"var(--banner-text)",background:"rgba(217, 244, 208, 0.5)",actions:[{text:"Docker容器内服务访问宿主机中的服务",link:"/linux/Docker容器内服务访问宿主机中的服务"}]})),null,16),i[0]||(i[0]=o(`<h1 id="docker容器内服务访问宿主机中的服务" tabindex="-1"><a class="header-anchor" href="#docker容器内服务访问宿主机中的服务"><span>Docker容器内服务访问宿主机中的服务</span></a></h1><p>假设 docker 中的某服务要访问宿主机的 mysql 时：</p><h2 id="第一种-通过-docker0-的-ip-地址进行访问" tabindex="-1"><a class="header-anchor" href="#第一种-通过-docker0-的-ip-地址进行访问"><span>第一种：通过 docker0 的 IP 地址进行访问</span></a></h2><ol><li>先在宿主机上查看 <code>docker0</code> 对应的 <code>inet</code> IP 地址</li></ol><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 如果是 CentOS 或者 Ubuntu</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ifconfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 或者使用</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> addr</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> show</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker0</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 假设查看的 docker0 的 ip 地址为：172.18.0.1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>修改 mysql 的配置文件，保证 mysql 可以被任何 ip 访问，<strong>但是一定不能开放 3306 端口，不然外网就可以直接访问 mysql 了</strong>，如果不开放允许任何 ip 访问，那么则必须要开放允许 docker 服务容器的 IP 能够访问。（注意这里的 IP 是需要连接宿主机 mysql docker 容器的 IP 不是 docker0 的 IP）</li></ol><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">[mysqld]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">bind-address</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;"> 0.0.0.0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>docker 容器中的服务连接 mysql 时，直接采用 <code>docker0</code> 的 IP 地址进行访问即可。即 <code>172.18.0.1</code></li></ol><h2 id="第二种-将容器的网络类型改成-host-宿主网络-即与宿主机共用网络" tabindex="-1"><a class="header-anchor" href="#第二种-将容器的网络类型改成-host-宿主网络-即与宿主机共用网络"><span>第二种：将容器的网络类型改成 host （宿主网络：即与宿主机共用网络）</span></a></h2><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 比如容器启动时，增加 --net=host 参数</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 在这里就没有必要去指定映射端口，因为容器中暴露出去的端口等同于宿主机暴露的端口</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -it</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --net=host</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {image}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sh</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 测试：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ping</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> localhost</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第三种-增加-host-docker-internal-到-hosts-文件" tabindex="-1"><a class="header-anchor" href="#第三种-增加-host-docker-internal-到-hosts-文件"><span>第三种：增加 <code>host.docker.internal</code> 到 <code>hosts</code> 文件</span></a></h2><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># host-gateway 其实是个特殊的 CDN，在运行时会被替换为真实的宿主网关 IP 地址</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 通过查看 \`cat /etc/hosts\` 即可得知已经被替换成 docker0 的网管 IP 地址</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 创建容器的时候添加 \`--add-host=host.docker.internal:host-gateway\`</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 需要注意的是：</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 对于 mac 上的 docker 设置还有略微不一样</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># mac docker 版本在 v17.12-v18.02 需要将 host.docker.internal 替换成 docker.for.mac.host.internal</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># mac docker 版本在 v17.06-v18.11 需要替换成 docker.for.mac.localhost</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -it</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --add-host=host.docker.internal:host-gateway</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {image}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sh</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 进入容器中，可以通过 ping 进行测试：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ping</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> host.docker.internal</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 比如在容器中连接宿主机中的 mysql 时，那么则需要设置为</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">host.docker.internal:3306</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12)),s(t,{colorful:"",service:"email,qq,qzone,qrcode,weibo,telegram,twitter"})])}const m=l(k,[["render",c],["__file","Docker容器内服务访问宿主机中的服务.html.vue"]]),y=JSON.parse('{"path":"/linux/Docker%E5%AE%B9%E5%99%A8%E5%86%85%E6%9C%8D%E5%8A%A1%E8%AE%BF%E9%97%AE%E5%AE%BF%E4%B8%BB%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%9C%8D%E5%8A%A1.html","title":"Docker容器内服务访问宿主机中的服务","lang":"zh-CN","frontmatter":{"title":"Docker容器内服务访问宿主机中的服务","excerpt":null,"description":"Docker容器内服务访问宿主机中的服务","date":"2024-11-04T00:00:00.000Z","category":"Linux","tag":"Linux","author":"xlc520","article":true,"timeline":true,"icon":"linux","head":[["meta",{"property":"og:url","content":"https://blog.ciberviler.top/linux/Docker%E5%AE%B9%E5%99%A8%E5%86%85%E6%9C%8D%E5%8A%A1%E8%AE%BF%E9%97%AE%E5%AE%BF%E4%B8%BB%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%9C%8D%E5%8A%A1.html"}],["meta",{"property":"og:site_name","content":"StudyNote - 丰富的知识笔记库"}],["meta",{"property":"og:title","content":"Docker容器内服务访问宿主机中的服务"}],["meta",{"property":"og:description","content":"Docker容器内服务访问宿主机中的服务"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-15T14:38:03.000Z"}],["meta",{"property":"article:author","content":"xlc520"}],["meta",{"property":"article:tag","content":"Linux"}],["meta",{"property":"article:published_time","content":"2024-11-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-15T14:38:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker容器内服务访问宿主机中的服务\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-15T14:38:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xlc520\\"}]}"]]},"headers":[{"level":2,"title":"第一种：通过 docker0 的 IP 地址进行访问","slug":"第一种-通过-docker0-的-ip-地址进行访问","link":"#第一种-通过-docker0-的-ip-地址进行访问","children":[]},{"level":2,"title":"第二种：将容器的网络类型改成 host （宿主网络：即与宿主机共用网络）","slug":"第二种-将容器的网络类型改成-host-宿主网络-即与宿主机共用网络","link":"#第二种-将容器的网络类型改成-host-宿主网络-即与宿主机共用网络","children":[]},{"level":2,"title":"第三种：增加 host.docker.internal 到 hosts 文件","slug":"第三种-增加-host-docker-internal-到-hosts-文件","link":"#第三种-增加-host-docker-internal-到-hosts-文件","children":[]}],"git":{"createdTime":1731681483000,"updatedTime":1731681483000,"contributors":[{"name":"xlc","email":"2215400217@qq.com","commits":1}]},"readingTime":{"minutes":2.11,"words":633},"filePathRelative":"linux/Docker容器内服务访问宿主机中的服务.md","localizedDate":"2024年11月4日","excerpt":""}');export{m as comp,y as data};
