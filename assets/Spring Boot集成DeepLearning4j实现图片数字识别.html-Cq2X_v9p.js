import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as l,c as r,b as a,n as p,g as o,r as n,a as d}from"./app-DDjfOKh-.js";const c={};function g(m,e){const i=n("VPBanner"),s=n("Share");return l(),r("div",null,[a(i,p(o({title:"Spring Boot集成DeepLearning4j实现图片数字识别",content:"Java是一门面向对象的编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征",logo:null,color:"var(--banner-text)",background:"rgba(217, 244, 208, 0.5)",actions:[{text:"Spring Boot集成DeepLearning4j实现图片数字识别",link:"/dev/Spring Boot集成DeepLearning4j实现图片数字识别"}]})),null,16),e[0]||(e[0]=d(`<h1 id="spring-boot集成deeplearning4j实现图片数字识别" tabindex="-1"><a class="header-anchor" href="#spring-boot集成deeplearning4j实现图片数字识别"><span>Spring Boot集成DeepLearning4j实现图片数字识别</span></a></h1><h2 id="_1-什么是deeplearning4j" tabindex="-1"><a class="header-anchor" href="#_1-什么是deeplearning4j"><span>1.什么是DeepLearning4j？</span></a></h2><p>DeepLearning4J（DL4J）是一套基于Java语言的神经网络工具包，可以构建、定型和部署神经网络。DL4J与Hadoop和Spark集成，支持分布式CPU和GPU，为商业环境（而非研究工具目的）所设计。Skymind是DL4J的商业支持机构。Deeplearning4j拥有先进的技术，以即插即用为目标，通过更多预设的使用，避免多余的配置，让非企业也能够进行快速的原型制作。DL4J同时可以规模化定制。DL4J遵循Apache 2.0许可协议，一切以其为基础的衍生作品均属于衍生作品的作</p><h3 id="deeplearning4j的功能" tabindex="-1"><a class="header-anchor" href="#deeplearning4j的功能"><span>Deeplearning4j的功能</span></a></h3><p>Deeplearning4j包括了分布式、多线程的深度学习框架，以及普通的单线程深度学习框架。定型过程以集群进行，也就是说，Deeplearning4j可以快速处理大量数据。神经网络可通过[迭代化简] 平行定型，与 Java、 Scala 和 Clojure 均兼容。Deeplearning4j在开放堆栈中作为模块组件的功能，使之成为首个为微服务架构打造的深度学习框架。</p><h3 id="deeplearning4j的组件" tabindex="-1"><a class="header-anchor" href="#deeplearning4j的组件"><span>Deeplearning4j的组件</span></a></h3><p>深度神经网络能够实现前所未有的准确度。对神经网络的简介请参见概览页。简而言之，Deeplearning4j能够让你从各类浅层网络（其中每一层在英文中被称为layer）出发，设计深层神经网络。这一灵活性使用户可以根据所需，在分布式、生产级、能够在分布式CPU或GPU的基础上与Spark和Hadoop协同工作的框架内，整合受限玻尔兹曼机、其他自动编码器、卷积网络或递归网络。此处为我们已经建立的各个库及其在系统整体中的所处位置：</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1724082435445-1.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>DeepLearning4J用于设计神经网络：</p><ul><li>Deeplearning4j（简称DL4J）是为Java和Scala编写的首个商业级开源分布式深度学习</li><li>DL4J与Hadoop和Spark集成，为商业环境（而非研究工具目的）所设计。</li><li>支持GPU和CPU</li><li>受到 Cloudera, Hortonwork, NVIDIA, Intel, IBM 等认证，可以在Spark, Flink, Hadoop 上运行</li><li>支持并行迭代算法架构</li><li>DeepLearning4J的JavaDoc可在此处获取</li><li>DeepLearning4J示例的Github代码库请见此处。相关示例的简介汇总请见此处。</li><li>开源工具 ASF 2.0许可证：github.com/deeplearning4j/deeplearning4j</li></ul><h2 id="_2-训练模型" tabindex="-1"><a class="header-anchor" href="#_2-训练模型"><span>2.训练模型</span></a></h2><h3 id="训练和测试数据集下载" tabindex="-1"><a class="header-anchor" href="#训练和测试数据集下载"><span>训练和测试数据集下载</span></a></h3><ul><li>https://raw.githubusercontent.com/zq2599/blog_download_files/master/files/mnist_png.tar.gz</li></ul><h3 id="mnist简介" tabindex="-1"><a class="header-anchor" href="#mnist简介"><span>MNIST简介</span></a></h3><ul><li>MNIST是经典的计算机视觉数据集，来源是National Institute of Standards and Technology (NIST，美国国家标准与技术研究所) ，包含各种手写数字图片，其中训练集60,000张，测试集 10,000张，</li><li>MNIST来源于250 个不同人的手写,其中 50% 是高中学生, 50% 来自人口普查局 (the Census Bureau) 的工作人员.，测试集(test set) 也是同样比例的手写数字数据</li><li>MNIST官网：http://yann.lecun.com/exdb/mnist/</li></ul><h3 id="数据集简介" tabindex="-1"><a class="header-anchor" href="#数据集简介"><span>数据集简介</span></a></h3><p>从MNIST官网下载的原始数据并非图片文件，需要按官方给出的格式说明做解析处理才能转为一张张图片，这些事情显然不是本篇的主题，因此咱们可以直接使用DL4J为我们准备好的数据集( 下载地址稍后给出)，该数据集中是一张张独立的图片，这些图片所在目录的名字就是该图片具体的数字</p><h3 id="模型训练" tabindex="-1"><a class="header-anchor" href="#模型训练"><span>模型训练</span></a></h3><p><strong>LeNet-5简介</strong></p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1724082435445-2.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h4 id="lenet-5-结构" tabindex="-1"><a class="header-anchor" href="#lenet-5-结构"><span>LeNet-5 结构：</span></a></h4><ul><li>输入层</li></ul><p>图片大小为 32×32×1，其中 1 表示为黑白图像，只有一个 channel。</p><ul><li>卷积层</li></ul><p>filter 大小 5×5，filter 深度（个数）为 6，padding 为 0， 卷积步长 s=1=1，输出矩阵大小为 28×28×6，其中 6 表示 filter 的个数。</p><ul><li>池化层</li></ul><p>average pooling，filter 大小 2×2（即 f=2=2），步长 s=2=2，no padding，输出矩阵大小为 14×14×6。</p><ul><li>卷积层</li></ul><p>filter 大小 5×5，filter 个数为 16，padding 为 0， 卷积步长 s=1=1，输出矩阵大小为 10×10×16，其中 16 表示 filter 的个数。</p><ul><li>池化层</li></ul><p>average pooling，filter 大小 2×2（即 f=2=2），步长 s=2=2，no padding，输出矩阵大小为 5×5×16。注意，在该层结束，需要将 5×5×16 的矩阵flatten 成一个 400 维的向量。</p><ul><li>全连接层（Fully Connected layer，FC）</li></ul><p>neuron 数量为 120。</p><ul><li>全连接层（Fully Connected layer，FC）</li></ul><p>neuron 数量为 84。</p><ul><li>全连接层，输出层</li></ul><p>现在版本的 LeNet-5 输出层一般会采用 softmax 激活函数，在 LeNet-5 提出的论文中使用的激活函数不是 softmax，但其现在不常用。该层神经元数量为 10，代表 0～9 十个数字类别。（图 1 其实少画了一个表示全连接层的方框，而直接用 <sup>y</sup> 表示输出层。）</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/******************************************************************************* * Copyright (c) 2020 Konduit K.K. * Copyright (c) 2015-2019 Skymind, Inc. * * This program and the accompanying materials are made available under the * terms of the Apache License, Version 2.0 which is available at * https://www.apache.org/licenses/LICENSE-2.0. * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the * License for the specific language governing permissions and limitations * under the License. * * SPDX-License-Identifier: Apache-2.0 ******************************************************************************/</span></span>
<span class="line"><span>package com.et.dl4j.model;</span></span>
<span class="line"><span>import lombok.extern.slf4j.Slf4j;import org.datavec.api.io.labels.ParentPathLabelGenerator;import org.datavec.api.split.FileSplit;import org.datavec.image.loader.NativeImageLoader;import org.datavec.image.recordreader.ImageRecordReader;import org.deeplearning4j.datasets.datavec.RecordReaderDataSetIterator;import org.deeplearning4j.nn.conf.MultiLayerConfiguration;import org.deeplearning4j.nn.conf.NeuralNetConfiguration;import org.deeplearning4j.nn.conf.inputs.InputType;import org.deeplearning4j.nn.conf.layers.ConvolutionLayer;import org.deeplearning4j.nn.conf.layers.DenseLayer;import org.deeplearning4j.nn.conf.layers.OutputLayer;import org.deeplearning4j.nn.conf.layers.SubsamplingLayer;import org.deeplearning4j.nn.multilayer.MultiLayerNetwork;import org.deeplearning4j.nn.weights.WeightInit;import org.deeplearning4j.optimize.listeners.ScoreIterationListener;import org.deeplearning4j.util.ModelSerializer;import org.nd4j.evaluation.classification.Evaluation;import org.nd4j.linalg.activations.Activation;import org.nd4j.linalg.dataset.api.iterator.DataSetIterator;import org.nd4j.linalg.dataset.api.preprocessor.DataNormalization;import org.nd4j.linalg.dataset.api.preprocessor.ImagePreProcessingScaler;import org.nd4j.linalg.learning.config.Nesterovs;import org.nd4j.linalg.lossfunctions.LossFunctions;import org.nd4j.linalg.schedule.MapSchedule;import org.nd4j.linalg.schedule.ScheduleType;</span></span>
<span class="line"><span>import java.io.File;import java.util.HashMap;import java.util.Map;import java.util.Random;</span></span>
<span class="line"><span>/** * Implementation of LeNet-5 for handwritten digits image classification on MNIST dataset (99% accuracy) * &lt;a href=&quot;http://yann.lecun.com/exdb/publis/pdf/lecun-01a.pdf&quot;&gt;[LeCun et al., 1998. Gradient based learning applied to document recognition]&lt;/a&gt; * Some minor changes are made to the architecture like using ReLU and identity activation instead of * sigmoid/tanh, max pooling instead of avg pooling and softmax output layer. * &lt;p&gt; * This example will download 15 Mb of data on the first run. * * @author hanlon * @author agibsonccc * @author fvaleri * @author dariuszzbyrad */@Slf4jpublic class LeNetMNISTReLu {   //dataset github：https://raw.githubusercontent.com/zq2599/blog_download_files/master/files/mnist_png.tar.gz    // 存放文件的地址，请酌情修改//    private static final String BASE_PATH = System.getProperty(&quot;java.io.tmpdir&quot;) + &quot;/mnist&quot;;    private static final String BASE_PATH = &quot;/Users/liuhaihua/Downloads&quot;;</span></span>
<span class="line"><span>    public static void main(String[] args) throws Exception {        // 图片像素高        int height = 28;        // 图片像素宽        int width = 28;</span></span>
<span class="line"><span>        // 因为是黑白图像，所以颜色通道只有一个        int channels = 1;</span></span>
<span class="line"><span>        // 分类结果，0-9，共十种数字        int outputNum = 10;</span></span>
<span class="line"><span>        // 批大小        int batchSize = 54;</span></span>
<span class="line"><span>        // 循环次数        int nEpochs = 1;</span></span>
<span class="line"><span>        // 初始化伪随机数的种子        int seed = 1234;</span></span>
<span class="line"><span>        // 随机数工具        Random randNumGen = new Random(seed);</span></span>
<span class="line"><span>        log.info(&quot;检查数据集文件夹是否存在：{}&quot;, BASE_PATH + &quot;/mnist_png&quot;);</span></span>
<span class="line"><span>        if (!new File(BASE_PATH + &quot;/mnist_png&quot;).exists()) {            log.info(&quot;数据集文件不存在，请下载压缩包并解压到：{}&quot;, BASE_PATH);            return;        }</span></span>
<span class="line"><span>        // 标签生成器，将指定文件的父目录作为标签        ParentPathLabelGenerator labelMaker = new ParentPathLabelGenerator();        // 归一化配置(像素值从0-255变为0-1)        DataNormalization imageScaler = new ImagePreProcessingScaler();</span></span>
<span class="line"><span>        // 不论训练集还是测试集，初始化操作都是相同套路：        // 1. 读取图片，数据格式为NCHW        // 2. 根据批大小创建的迭代器        // 3. 将归一化器作为预处理器</span></span>
<span class="line"><span>        log.info(&quot;训练集的矢量化操作...&quot;);        // 初始化训练集        File trainData = new File(BASE_PATH + &quot;/mnist_png/training&quot;);        FileSplit trainSplit = new FileSplit(trainData, NativeImageLoader.ALLOWED_FORMATS, randNumGen);        ImageRecordReader trainRR = new ImageRecordReader(height, width, channels, labelMaker);        trainRR.initialize(trainSplit);        DataSetIterator trainIter = new RecordReaderDataSetIterator(trainRR, batchSize, 1, outputNum);        // 拟合数据(实现类中实际上什么也没做)        imageScaler.fit(trainIter);        trainIter.setPreProcessor(imageScaler);</span></span>
<span class="line"><span>        log.info(&quot;测试集的矢量化操作...&quot;);        // 初始化测试集，与前面的训练集操作类似        File testData = new File(BASE_PATH + &quot;/mnist_png/testing&quot;);        FileSplit testSplit = new FileSplit(testData, NativeImageLoader.ALLOWED_FORMATS, randNumGen);        ImageRecordReader testRR = new ImageRecordReader(height, width, channels, labelMaker);        testRR.initialize(testSplit);        DataSetIterator testIter = new RecordReaderDataSetIterator(testRR, batchSize, 1, outputNum);        testIter.setPreProcessor(imageScaler); // same normalization for better results</span></span>
<span class="line"><span>        log.info(&quot;配置神经网络&quot;);</span></span>
<span class="line"><span>        // 在训练中，将学习率配置为随着迭代阶梯性下降        Map&lt;Integer, Double&gt; learningRateSchedule = new HashMap&lt;&gt;();        learningRateSchedule.put(0, 0.06);        learningRateSchedule.put(200, 0.05);        learningRateSchedule.put(600, 0.028);        learningRateSchedule.put(800, 0.0060);        learningRateSchedule.put(1000, 0.001);</span></span>
<span class="line"><span>        // 超参数        MultiLayerConfiguration conf = new NeuralNetConfiguration.Builder()            .seed(seed)            // L2正则化系数            .l2(0.0005)            // 梯度下降的学习率设置            .updater(new Nesterovs(new MapSchedule(ScheduleType.ITERATION, learningRateSchedule)))            // 权重初始化            .weightInit(WeightInit.XAVIER)            // 准备分层            .list()            // 卷积层            .layer(new ConvolutionLayer.Builder(5, 5)                .nIn(channels)                .stride(1, 1)                .nOut(20)                .activation(Activation.IDENTITY)                .build())            // 下采样，即池化            .layer(new SubsamplingLayer.Builder(SubsamplingLayer.PoolingType.MAX)                .kernelSize(2, 2)                .stride(2, 2)                .build())            // 卷积层            .layer(new ConvolutionLayer.Builder(5, 5)                .stride(1, 1) // nIn need not specified in later layers                .nOut(50)                .activation(Activation.IDENTITY)                .build())            // 下采样，即池化            .layer(new SubsamplingLayer.Builder(SubsamplingLayer.PoolingType.MAX)                .kernelSize(2, 2)                .stride(2, 2)                .build())            // 稠密层，即全连接            .layer(new DenseLayer.Builder().activation(Activation.RELU)                .nOut(500)                .build())            // 输出            .layer(new OutputLayer.Builder(LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD)                .nOut(outputNum)                .activation(Activation.SOFTMAX)                .build())            .setInputType(InputType.convolutionalFlat(height, width, channels)) // InputType.convolutional for normal image            .build();</span></span>
<span class="line"><span>        MultiLayerNetwork net = new MultiLayerNetwork(conf);        net.init();</span></span>
<span class="line"><span>        // 每十个迭代打印一次损失函数值        net.setListeners(new ScoreIterationListener(10));</span></span>
<span class="line"><span>        log.info(&quot;神经网络共[{}]个参数&quot;, net.numParams());</span></span>
<span class="line"><span>        long startTime = System.currentTimeMillis();        // 循环操作        for (int i = 0; i &lt; nEpochs; i++) {            log.info(&quot;第[{}]个循环&quot;, i);            net.fit(trainIter);            Evaluation eval = net.evaluate(testIter);            log.info(eval.stats());            trainIter.reset();            testIter.reset();        }        log.info(&quot;完成训练和测试，耗时[{}]毫秒&quot;, System.currentTimeMillis()-startTime);</span></span>
<span class="line"><span>        // 保存模型        File ministModelPath = new File(BASE_PATH + &quot;/minist-model.zip&quot;);        ModelSerializer.writeModel(net, ministModelPath, true);        log.info(&quot;最新的MINIST模型保存在[{}]&quot;, ministModelPath.getPath());    }}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出模型文件和得分结果</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1724082435445-3.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h2 id="_3-编写模型预测接口" tabindex="-1"><a class="header-anchor" href="#_3-编写模型预测接口"><span>3.编写模型预测接口</span></a></h2><h3 id="pom-xml" tabindex="-1"><a class="header-anchor" href="#pom-xml"><span>pom.xml</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;    &lt;parent&gt;        &lt;artifactId&gt;springboot-demo&lt;/artifactId&gt;        &lt;groupId&gt;com.et&lt;/groupId&gt;        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;    &lt;/parent&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;Deeplearning4j&lt;/artifactId&gt;</span></span>
<span class="line"><span>    &lt;properties&gt;        &lt;maven.compiler.source&gt;8&lt;/maven.compiler.source&gt;        &lt;maven.compiler.target&gt;8&lt;/maven.compiler.target&gt;        &lt;dl4j-master.version&gt;1.0.0-beta7&lt;/dl4j-master.version&gt;        &lt;nd4j.backend&gt;nd4j-native&lt;/nd4j.backend&gt;    &lt;/properties&gt;    &lt;dependencies&gt;</span></span>
<span class="line"><span>        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;        &lt;/dependency&gt;</span></span>
<span class="line"><span>        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-autoconfigure&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;            &lt;scope&gt;test&lt;/scope&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;            &lt;artifactId&gt;lombok&lt;/artifactId&gt;            &lt;version&gt;1.18.20&lt;/version&gt;        &lt;/dependency&gt;</span></span>
<span class="line"><span>        &lt;dependency&gt;            &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;            &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;        &lt;/dependency&gt;</span></span>
<span class="line"><span>        &lt;dependency&gt;            &lt;groupId&gt;org.deeplearning4j&lt;/groupId&gt;            &lt;artifactId&gt;deeplearning4j-core&lt;/artifactId&gt;            &lt;version&gt;\${dl4j-master.version}&lt;/version&gt;        &lt;/dependency&gt;</span></span>
<span class="line"><span>        &lt;dependency&gt;            &lt;groupId&gt;org.nd4j&lt;/groupId&gt;            &lt;artifactId&gt;\${nd4j.backend}&lt;/artifactId&gt;            &lt;version&gt;\${dl4j-master.version}&lt;/version&gt;        &lt;/dependency&gt;</span></span>
<span class="line"><span>        &lt;!--用于本地GPU--&gt;        &lt;!--        &lt;dependency&gt;--&gt;        &lt;!--            &lt;groupId&gt;org.deeplearning4j&lt;/groupId&gt;--&gt;        &lt;!--            &lt;artifactId&gt;deeplearning4j-cuda-9.2&lt;/artifactId&gt;--&gt;        &lt;!--            &lt;version&gt;\${dl4j-master.version}&lt;/version&gt;--&gt;        &lt;!--        &lt;/dependency&gt;--&gt;</span></span>
<span class="line"><span>        &lt;!--        &lt;dependency&gt;--&gt;        &lt;!--            &lt;groupId&gt;org.nd4j&lt;/groupId&gt;--&gt;        &lt;!--            &lt;artifactId&gt;nd4j-cuda-9.2-platform&lt;/artifactId&gt;--&gt;        &lt;!--            &lt;version&gt;\${dl4j-master.version}&lt;/version&gt;--&gt;        &lt;!--        &lt;/dependency&gt;--&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    &lt;/dependencies&gt;&lt;/project&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\`\`</p><h3 id="cotroller" tabindex="-1"><a class="header-anchor" href="#cotroller"><span>cotroller</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>package com.et.dl4j.controller;</span></span>
<span class="line"><span>import com.et.dl4j.service.PredictService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.*;import org.springframework.web.multipart.MultipartFile;</span></span>
<span class="line"><span>import java.util.HashMap;import java.util.Map;</span></span>
<span class="line"><span>@RestControllerpublic class HelloWorldController {    @RequestMapping(&quot;/hello&quot;)    public Map&lt;String, Object&gt; showHelloWorld(){        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();        map.put(&quot;msg&quot;, &quot;HelloWorld&quot;);        return map;    }   @Autowired    PredictService predictService;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   @PostMapping(&quot;/predict-with-black-background&quot;)   public int predictWithBlackBackground(@RequestParam(&quot;file&quot;) MultipartFile file) throws Exception {      // 训练模型的时候，用的数字是白字黑底，      // 因此如果上传白字黑底的图片，可以直接拿去识别，而无需反色处理      return predictService.predict(file, false);   }</span></span>
<span class="line"><span>   @PostMapping(&quot;/predict-with-white-background&quot;)   public int predictWithWhiteBackground(@RequestParam(&quot;file&quot;) MultipartFile file) throws Exception {      // 训练模型的时候，用的数字是白字黑底，      // 因此如果上传黑字白底的图片，就需要做反色处理，      // 反色之后就是白字黑底了，可以拿去识别      return predictService.predict(file, true);   }}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="service" tabindex="-1"><a class="header-anchor" href="#service"><span>service</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>package com.et.dl4j.service;</span></span>
<span class="line"><span>import org.springframework.web.multipart.MultipartFile;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>public interface PredictService {</span></span>
<span class="line"><span>    /**     * 取得上传的图片，做转换后识别成数字     * @param file 上传的文件     * @param isNeedRevert 是否要做反色处理     * @return     */    int predict(MultipartFile file, boolean isNeedRevert) throws Exception ;}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>package com.et.dl4j.service.impl;import com.et.dl4j.service.PredictService;import com.et.dl4j.util.ImageFileUtil;import lombok.extern.slf4j.Slf4j;import org.deeplearning4j.nn.multilayer.MultiLayerNetwork;import org.deeplearning4j.util.ModelSerializer;import org.nd4j.linalg.api.ndarray.INDArray;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Service;import org.springframework.web.multipart.MultipartFile;</span></span>
<span class="line"><span>import javax.annotation.PostConstruct;import java.io.File;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@Service@Slf4jpublic class PredictServiceImpl implements PredictService {</span></span>
<span class="line"><span>    /**     * -1表示识别失败     */    private static final int RLT_INVALID = -1;</span></span>
<span class="line"><span>    /**     * 模型文件的位置     */    @Value(&quot;\${predict.modelpath}&quot;)    private String modelPath;</span></span>
<span class="line"><span>    /**     * 处理图片文件的目录     */    @Value(&quot;\${predict.imagefilepath}&quot;)    private String imageFilePath;</span></span>
<span class="line"><span>    /**     * 神经网络     */    private MultiLayerNetwork net;</span></span>
<span class="line"><span>    /**     * bean实例化成功就加载模型     */    @PostConstruct    private void loadModel() {        log.info(&quot;load model from [{}]&quot;, modelPath);</span></span>
<span class="line"><span>        // 加载模型        try {            net = ModelSerializer.restoreMultiLayerNetwork(new File(modelPath));            log.info(&quot;module summary\\n{}&quot;, net.summary());        } catch (Exception exception) {            log.error(&quot;loadModel error&quot;, exception);        }    }</span></span>
<span class="line"><span>    @Override    public int predict(MultipartFile file, boolean isNeedRevert) throws Exception {        log.info(&quot;start predict, file [{}], isNeedRevert [{}]&quot;, file.getOriginalFilename(), isNeedRevert);</span></span>
<span class="line"><span>        // 先存文件        String rawFileName = ImageFileUtil.save(imageFilePath, file);</span></span>
<span class="line"><span>        if (null==rawFileName) {            return RLT_INVALID;        }</span></span>
<span class="line"><span>        // 反色处理后的文件名        String revertFileName = null;</span></span>
<span class="line"><span>        // 调整大小后的文件名        String resizeFileName;</span></span>
<span class="line"><span>        // 是否需要反色处理        if (isNeedRevert) {            // 把原始文件做反色处理，返回结果是反色处理后的新文件            revertFileName = ImageFileUtil.colorRevert(imageFilePath, rawFileName);</span></span>
<span class="line"><span>            // 把反色处理后调整为28*28大小的文件            resizeFileName = ImageFileUtil.resize(imageFilePath, revertFileName);        } else {            // 直接把原始文件调整为28*28大小的文件            resizeFileName = ImageFileUtil.resize(imageFilePath, rawFileName);        }</span></span>
<span class="line"><span>        // 现在已经得到了结果反色和调整大小处理过后的文件，        // 那么原始文件和反色处理过的文件就可以删除了        ImageFileUtil.clear(imageFilePath, rawFileName, revertFileName);</span></span>
<span class="line"><span>        // 取出该黑白图片的特征        INDArray features = ImageFileUtil.getGrayImageFeatures(imageFilePath, resizeFileName);                // 将特征传给模型去识别        return net.predict(features)[0];    }}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="application-properties" tabindex="-1"><a class="header-anchor" href="#application-properties"><span>application.properties</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 上传文件总的最大值spring.servlet.multipart.max-request-size=1024MB</span></span>
<span class="line"><span># 单个文件的最大值spring.servlet.multipart.max-file-size=10MB</span></span>
<span class="line"><span># 处理图片文件的目录predict.imagefilepath=/Users/liuhaihua/Downloads/images/</span></span>
<span class="line"><span># 模型所在位置predict.modelpath=/Users/liuhaihua/Downloads/minist-model.zip</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="工具类" tabindex="-1"><a class="header-anchor" href="#工具类"><span>工具类</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>package com.et.dl4j.util;</span></span>
<span class="line"><span>import lombok.extern.slf4j.Slf4j;import org.datavec.api.split.FileSplit;import org.datavec.image.loader.NativeImageLoader;import org.datavec.image.recordreader.ImageRecordReader;import org.deeplearning4j.datasets.datavec.RecordReaderDataSetIterator;import org.nd4j.linalg.api.ndarray.INDArray;import org.nd4j.linalg.dataset.api.iterator.DataSetIterator;import org.nd4j.linalg.dataset.api.preprocessor.ImagePreProcessingScaler;import org.springframework.web.multipart.MultipartFile;</span></span>
<span class="line"><span>import javax.imageio.ImageIO;import java.awt.*;import java.awt.image.BufferedImage;import java.io.File;import java.io.IOException;import java.util.UUID;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@Slf4jpublic class ImageFileUtil {</span></span>
<span class="line"><span>    /**     * 调整后的文件宽度     */    public static final int RESIZE_WIDTH = 28;</span></span>
<span class="line"><span>    /**     * 调整后的文件高度     */    public static final int RESIZE_HEIGHT = 28;</span></span>
<span class="line"><span>    /**     * 将上传的文件存在服务器上     * @param base 要处理的文件所在的目录     * @param file 要处理的文件     * @return     */    public static String save(String base, MultipartFile file) {</span></span>
<span class="line"><span>        // 检查是否为空        if (file.isEmpty()) {            log.error(&quot;invalid file&quot;);            return null;        }</span></span>
<span class="line"><span>        // 文件名来自原始文件        String fileName = file.getOriginalFilename();</span></span>
<span class="line"><span>        // 要保存的位置        File dest = new File(base + fileName);</span></span>
<span class="line"><span>        // 开始保存        try {            file.transferTo(dest);        } catch (IOException e) {            log.error(&quot;upload fail&quot;, e);            return null;        }</span></span>
<span class="line"><span>        return fileName;    }</span></span>
<span class="line"><span>    /**     * 将图片转为28*28像素     * @param base     处理文件的目录     * @param fileName 待调整的文件名     * @return     */    public static String resize(String base, String fileName) {</span></span>
<span class="line"><span>        // 新文件名是原文件名在加个随机数后缀，而且扩展名固定为png        String resizeFileName = fileName.substring(0, fileName.lastIndexOf(&quot;.&quot;)) + &quot;-&quot; + UUID.randomUUID() + &quot;.png&quot;;</span></span>
<span class="line"><span>        log.info(&quot;start resize, from [{}] to [{}]&quot;, fileName, resizeFileName);</span></span>
<span class="line"><span>        try {            // 读原始文件            BufferedImage bufferedImage = ImageIO.read(new File(base + fileName));</span></span>
<span class="line"><span>            // 缩放后的实例            Image image = bufferedImage.getScaledInstance(RESIZE_WIDTH, RESIZE_HEIGHT, Image.SCALE_SMOOTH);</span></span>
<span class="line"><span>            BufferedImage resizeBufferedImage = new BufferedImage(28, 28, BufferedImage.TYPE_INT_RGB);            Graphics graphics = resizeBufferedImage.getGraphics();</span></span>
<span class="line"><span>            // 绘图            graphics.drawImage(image, 0, 0, null);            graphics.dispose();</span></span>
<span class="line"><span>            // 转换后的图片写文件            ImageIO.write(resizeBufferedImage, &quot;png&quot;, new File(base + resizeFileName));</span></span>
<span class="line"><span>        } catch (Exception exception) {            log.info(&quot;resize error from [{}] to [{}], {}&quot;, fileName, resizeFileName, exception);            resizeFileName = null;        }</span></span>
<span class="line"><span>        log.info(&quot;finish resize, from [{}] to [{}]&quot;, fileName, resizeFileName);</span></span>
<span class="line"><span>        return resizeFileName;    }</span></span>
<span class="line"><span>    /**     * 将RGB转为int数字     * @param alpha     * @param red     * @param green     * @param blue     * @return     */    private static int colorToRGB(int alpha, int red, int green, int blue) {        int pixel = 0;</span></span>
<span class="line"><span>        pixel += alpha;        pixel = pixel &lt;&lt; 8;</span></span>
<span class="line"><span>        pixel += red;        pixel = pixel &lt;&lt; 8;</span></span>
<span class="line"><span>        pixel += green;        pixel = pixel &lt;&lt; 8;</span></span>
<span class="line"><span>        pixel += blue;</span></span>
<span class="line"><span>        return pixel;    }</span></span>
<span class="line"><span>    /**     * 反色处理     * @param base 处理文件的目录     * @param src 用于处理的源文件     * @return 反色处理后的新文件     * @throws IOException     */    public static String colorRevert(String base, String src) throws IOException {        int color, r, g, b, pixel;</span></span>
<span class="line"><span>        // 读原始文件        BufferedImage srcImage = ImageIO.read(new File(base + src));</span></span>
<span class="line"><span>        // 修改后的文件        BufferedImage destImage = new BufferedImage(srcImage.getWidth(), srcImage.getHeight(), srcImage.getType());</span></span>
<span class="line"><span>        for (int i=0; i&lt;srcImage.getWidth(); i++) {</span></span>
<span class="line"><span>            for (int j=0; j&lt;srcImage.getHeight(); j++) {                color = srcImage.getRGB(i, j);                r = (color &gt;&gt; 16) &amp; 0xff;                g = (color &gt;&gt; 8) &amp; 0xff;                b = color &amp; 0xff;                pixel = colorToRGB(255, 0xff - r, 0xff - g, 0xff - b);                destImage.setRGB(i, j, pixel);            }        }</span></span>
<span class="line"><span>        // 反射文件的名字        String revertFileName =  src.substring(0, src.lastIndexOf(&quot;.&quot;)) + &quot;-revert.png&quot;;</span></span>
<span class="line"><span>        // 转换后的图片写文件        ImageIO.write(destImage, &quot;png&quot;, new File(base + revertFileName));</span></span>
<span class="line"><span>        return revertFileName;    }</span></span>
<span class="line"><span>    /**     * 取黑白图片的特征     * @param base     * @param fileName     * @return     * @throws Exception     */    public static INDArray getGrayImageFeatures(String base, String fileName) throws Exception {        log.info(&quot;start getImageFeatures [{}]&quot;, base + fileName);</span></span>
<span class="line"><span>        // 和训练模型时一样的设置        ImageRecordReader imageRecordReader = new ImageRecordReader(RESIZE_HEIGHT, RESIZE_WIDTH, 1);</span></span>
<span class="line"><span>        FileSplit fileSplit = new FileSplit(new File(base + fileName),                NativeImageLoader.ALLOWED_FORMATS);</span></span>
<span class="line"><span>        imageRecordReader.initialize(fileSplit);</span></span>
<span class="line"><span>        DataSetIterator dataSetIterator = new RecordReaderDataSetIterator(imageRecordReader, 1);        dataSetIterator.setPreProcessor(new ImagePreProcessingScaler(0, 1));</span></span>
<span class="line"><span>        // 取特征        return dataSetIterator.next().getFeatures();    }</span></span>
<span class="line"><span>    /**     * 批量清理文件     * @param base      处理文件的目录     * @param fileNames 待清理文件集合     */    public static void clear(String base, String...fileNames) {        for (String fileName : fileNames) {</span></span>
<span class="line"><span>            if (null==fileName) {                continue;            }</span></span>
<span class="line"><span>            File file = new File(base + fileName);</span></span>
<span class="line"><span>            if (file.exists()) {                file.delete();            }        }    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="demoapplication-java" tabindex="-1"><a class="header-anchor" href="#demoapplication-java"><span>DemoApplication.java</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>package com.et.dl4j;</span></span>
<span class="line"><span>import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;</span></span>
<span class="line"><span>@SpringBootApplicationpublic class DemoApplication {</span></span>
<span class="line"><span>   public static void main(String[] args) {      SpringApplication.run(DemoApplication.class, args);   }}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上只是一些关键代码，所有代码请参见下面代码仓库</p><h3 id="代码仓库" tabindex="-1"><a class="header-anchor" href="#代码仓库"><span>代码仓库</span></a></h3><ul><li>https://github.com/Harries/springboot-demo</li></ul><h2 id="_4-测试" tabindex="-1"><a class="header-anchor" href="#_4-测试"><span>4.测试</span></a></h2><p>启动Spring Boot应用，上传图片测试</p><ul><li>如果用户输入的是黑底白字的图片，只需要将上述流程中的反色处理去掉即可</li><li>为白底黑字图片提供专用接口predict-with-white-background</li><li>为黑底白字图片提供专用接口predict-with-black-background</li></ul><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1724082435445-4.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h2 id="_5-引用" tabindex="-1"><a class="header-anchor" href="#_5-引用"><span>5.引用</span></a></h2><ul><li>https://mp.weixin.qq.com/s?__biz=MzAxMjY5NDU2Ng==&amp;mid=2651868994&amp;idx=1&amp;sn=999c5750bb2af204ac23e05868639e74&amp;chksm=80490a0bb73e831d632169b5ef8697b3d19cb9b97bfc56bafae0eca57df90967504e418632ac&amp;mpshare=1&amp;scene=23&amp;srcid=0816fCUWsmWkXtK7EgACD2b2&amp;sharer_shareinfo=8afd5c20b6d220669de479627126f918&amp;sharer_shareinfo_first=8afd5c20b6d220669de479627126f918#rd</li><li>https://mgubaidullin.github.io/deeplearning4j-docs/cn/quickstart</li><li>https://blog.csdn.net/boling_cavalry/article/details/118239403</li><li>http://www.liuhaihua.cn/archives/710793.html</li></ul>`,64)),a(s,{colorful:"",service:"email,qq,qzone,qrcode,weibo,telegram,twitter"})])}const h=t(c,[["render",g],["__file","Spring Boot集成DeepLearning4j实现图片数字识别.html.vue"]]),b=JSON.parse('{"path":"/dev/Spring%20Boot%E9%9B%86%E6%88%90DeepLearning4j%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB.html","title":"Spring Boot集成DeepLearning4j实现图片数字识别","lang":"zh-CN","frontmatter":{"title":"Spring Boot集成DeepLearning4j实现图片数字识别","excerpt":null,"description":"Spring Boot集成DeepLearning4j实现图片数字识别","date":"2024-08-19T00:00:00.000Z","category":"Java","tag":"Java","author":"xlc520","article":true,"timeline":true,"icon":"java","head":[["meta",{"property":"og:url","content":"https://blog.ciberviler.top/dev/Spring%20Boot%E9%9B%86%E6%88%90DeepLearning4j%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB.html"}],["meta",{"property":"og:site_name","content":"StudyNote - 丰富的知识笔记库"}],["meta",{"property":"og:title","content":"Spring Boot集成DeepLearning4j实现图片数字识别"}],["meta",{"property":"og:description","content":"Spring Boot集成DeepLearning4j实现图片数字识别"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1724082435445-1.webp"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-07T06:25:40.000Z"}],["meta",{"property":"article:author","content":"xlc520"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2024-08-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-07T06:25:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring Boot集成DeepLearning4j实现图片数字识别\\",\\"image\\":[\\"https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1724082435445-1.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1724082435445-2.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1724082435445-3.webp\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1724082435445-4.webp\\"],\\"datePublished\\":\\"2024-08-19T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-07T06:25:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xlc520\\"}]}"]]},"headers":[{"level":2,"title":"1.什么是DeepLearning4j？","slug":"_1-什么是deeplearning4j","link":"#_1-什么是deeplearning4j","children":[{"level":3,"title":"Deeplearning4j的功能","slug":"deeplearning4j的功能","link":"#deeplearning4j的功能","children":[]},{"level":3,"title":"Deeplearning4j的组件","slug":"deeplearning4j的组件","link":"#deeplearning4j的组件","children":[]}]},{"level":2,"title":"2.训练模型","slug":"_2-训练模型","link":"#_2-训练模型","children":[{"level":3,"title":"训练和测试数据集下载","slug":"训练和测试数据集下载","link":"#训练和测试数据集下载","children":[]},{"level":3,"title":"MNIST简介","slug":"mnist简介","link":"#mnist简介","children":[]},{"level":3,"title":"数据集简介","slug":"数据集简介","link":"#数据集简介","children":[]},{"level":3,"title":"模型训练","slug":"模型训练","link":"#模型训练","children":[]}]},{"level":2,"title":"3.编写模型预测接口","slug":"_3-编写模型预测接口","link":"#_3-编写模型预测接口","children":[{"level":3,"title":"pom.xml","slug":"pom-xml","link":"#pom-xml","children":[]},{"level":3,"title":"cotroller","slug":"cotroller","link":"#cotroller","children":[]},{"level":3,"title":"service","slug":"service","link":"#service","children":[]},{"level":3,"title":"application.properties","slug":"application-properties","link":"#application-properties","children":[]},{"level":3,"title":"工具类","slug":"工具类","link":"#工具类","children":[]},{"level":3,"title":"DemoApplication.java","slug":"demoapplication-java","link":"#demoapplication-java","children":[]},{"level":3,"title":"代码仓库","slug":"代码仓库","link":"#代码仓库","children":[]}]},{"level":2,"title":"4.测试","slug":"_4-测试","link":"#_4-测试","children":[]},{"level":2,"title":"5.引用","slug":"_5-引用","link":"#_5-引用","children":[]}],"git":{"createdTime":1725690340000,"updatedTime":1725690340000,"contributors":[{"name":"xlc","email":"2215400217@qq.com","commits":1}]},"readingTime":{"minutes":13.44,"words":4033},"filePathRelative":"dev/Spring Boot集成DeepLearning4j实现图片数字识别.md","localizedDate":"2024年8月19日","excerpt":""}');export{h as comp,b as data};
