import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as p,b as n,n as d,g as c,r as e,a as r}from"./app-DWXdHMII.js";const o={};function u(v,s){const i=e("VPBanner"),a=e("Share");return t(),p("div",null,[n(i,d(c({title:"ESLint 配置",content:"ESLint 是一款强大的工具，它能够实时检测并修复代码中的错误，确保你的代码风格一致、质量高，减少潜在的 bug",logo:null,color:"var(--banner-text)",background:"rgba(217, 244, 208, 0.5)",actions:[{text:"ESLint 配置",link:"/dev/ESLint 配置"}]})),null,16),s[0]||(s[0]=r(`<h1 id="eslint-配置" tabindex="-1"><a class="header-anchor" href="#eslint-配置"><span>ESLint 配置</span></a></h1><p>在前端开发中，代码质量和一致性至关重要。<strong>「ESLint」</strong> 是帮助你提升代码质量的关键工具，尤其是在使用 <strong>「Vue」</strong> 和 <strong>「React」</strong> 进行开发时，合理配置和使用 ESLint 能够大幅提升开发效率和代码质量。但是，你知道如何在 <strong>「VSCode」</strong> 中无缝集成 ESLint，并让它自动为你提示和修复代码问题吗？如果还不清楚，赶紧学习，否则你可能已经落后了！</p><p>目前您可能还用不到这篇文章，不过可以先收藏起来。希望将来它能为您提供所需的帮助！也欢迎在评论区分享你的问题或见解。</p><h2 id="简单说一下-eslint-是做什么的" tabindex="-1"><a class="header-anchor" href="#简单说一下-eslint-是做什么的"><span>~ 简单说一下 ESLint 是做什么的 ~</span></a></h2><p>ESLint 是一款强大的工具，它能够实时检测并修复代码中的错误，确保你的代码风格一致、质量高，减少潜在的 bug。无论你是一个人开发还是团队协作，通过 ESLint，你可以：</p><ol><li><strong>「实时提示」</strong>：在你编写代码的同时，ESLint 插件会及时指出语法错误和风格问题，让你第一时间修正。</li><li><strong>「自动修复」</strong>：配置自动修复配置后，ESLint 会在你保存文件时自动修复常见错误，如缩进、引号类型等，省时省力。</li><li><strong>「统一风格」</strong>：通过 ESLint 配置，你和团队可以遵循一致的编码风格，提高代码的可读性和维护性。</li><li><strong>「减少错误」</strong>：ESLint 能帮助你捕获未定义变量、未使用变量等潜在错误，降低 bug 发生的概率。</li></ol><p>遵循 ESLint 规则能确保你的代码始终符合最佳实践，为项目的长期维护和功能扩展打好坚实基础。</p><h2 id="🔥🔥只需5步-搞定eslint集成" tabindex="-1"><a class="header-anchor" href="#🔥🔥只需5步-搞定eslint集成"><span>🔥🔥只需5步，搞定ESLint集成</span></a></h2><h3 id="_1-初始化-vue-3-项目-以-vue-3-示例" tabindex="-1"><a class="header-anchor" href="#_1-初始化-vue-3-项目-以-vue-3-示例"><span>1. 初始化 Vue 3 项目（以 Vue 3 示例）</span></a></h3><p>如果还没有 Vue 3 项目，可以通过 Vue CLI 来创建：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>npm install -g @vue/cli</span></span>
<span class="line"><span>vue create my-vue3-project</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>在创建过程中，可以选择默认配置或自定义配置。</p><h3 id="_2-安装-eslint" tabindex="-1"><a class="header-anchor" href="#_2-安装-eslint"><span>2. 安装 ESLint</span></a></h3><p>进入项目目录，安装 ESLint 及相关插件（node 1）：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>cd my-vue3-project</span></span>
<span class="line"><span>npm install eslint eslint-plugin-vue --save-dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：如果你的 <code>eslint</code> 版本 <code>&gt;9.0.0</code>，那么 node 为（<code>^18.18.0</code>、<code>^20.9.0</code> 或 <code>&gt;=21.1.0</code>）。我的 <code>eslint</code> 版本是 <code>9.8.0</code>，<code>node</code> 版本是 <code>v18.17.1</code>。</p><h3 id="_3-初始化-eslint-配置" tabindex="-1"><a class="header-anchor" href="#_3-初始化-eslint-配置"><span>3. 初始化 ESLint 配置</span></a></h3><p>使用以下命令初始化 ESLint 配置文件：（这里操作可能会有问题，请查看常见问题处理）</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>npx eslint --init</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在初始化过程中，ESLint 会问你一些问题来帮助生成适合你项目的配置文件。下面是一个示例的交互过程：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>How would you like to use ESLint? …  您希望如何使用ESLint…</span></span>
<span class="line"><span>  To check syntax only  仅检查语法</span></span>
<span class="line"><span>❯ To check syntax and find problems  检查语法并发现问题</span></span>
<span class="line"><span>  To check syntax, find problems, and enforce code style 检查语法、发现问题并强制执行代码样式</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就这样，一步一步选择适合你项目的所需的配置。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>✔ How would you like to use ESLint? · problems</span></span>
<span class="line"><span>✔ What type of modules does your project use? · esm</span></span>
<span class="line"><span>✔ Which framework does your project use? · vue</span></span>
<span class="line"><span>✔ Does your project use TypeScript? · No / Yes</span></span>
<span class="line"><span>✔ Where does your code run? · browser</span></span>
<span class="line"><span>✔ What format do you want your config file to be in? · JavaScript</span></span>
<span class="line"><span>The config that you&#39;ve selected requires the following dependencies:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>eslint-plugin-vue@latest @typescript-eslint/eslint-plugin@latest @typescript-eslint/parser@latest</span></span>
<span class="line"><span>? Would you like to install them now with npm? › No / Yes</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将生成一个 <code>eslint.config.mjs</code> 文件（小于 v9.0.0 版本会生成<code>.eslintrc.js</code>），包含初始配置。不过这不重要，因为它们的本质都是一样的。下面是我配置 Vue3 项目时，eslint（v9.8.0）自动生成的配置（扁平配置格式）:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// eslint.config.mjs</span></span>
<span class="line"><span>import globals from &quot;globals&quot;; // 常见全局变量的库（如 window、document 等）</span></span>
<span class="line"><span>import pluginJs from &quot;@eslint/js&quot;; // ESLint 官方提供的 JavaScript 规则插件</span></span>
<span class="line"><span>import tseslint from &quot;typescript-eslint&quot;; // TypeScript ESLint 插件，允许解析和检查 TypeScript 代码</span></span>
<span class="line"><span>import pluginVue from &quot;eslint-plugin-vue&quot;; // Vue.js 的 ESLint 插件，用于解析和检查 Vue 文件</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export default [</span></span>
<span class="line"><span>  { </span></span>
<span class="line"><span>      files: [&quot;**/*.{js,mjs,cjs,ts,vue}&quot;] </span></span>
<span class="line"><span>  }, // 指定 ESLint 要检查的文件类型，包括 JS、MJS、CJS、TS 和 Vue 文件</span></span>
<span class="line"><span>  { </span></span>
<span class="line"><span>      languageOptions: { globals: globals.browser } </span></span>
<span class="line"><span>  }, // 为浏览器环境设置全局变量选项，允许代码中使用这些全局变量而不会触发 ESLint 警告</span></span>
<span class="line"><span>  pluginJs.configs.recommended, // 使用 ESLint 官方推荐的 JavaScript 规则配置</span></span>
<span class="line"><span>  ...tseslint.configs.recommended, // 使用 TypeScript ESLint 推荐的规则配置</span></span>
<span class="line"><span>  ...pluginVue.configs[&quot;flat/essential&quot;], // 使用 Vue.js 插件提供的基本规则配置</span></span>
<span class="line"><span>  { </span></span>
<span class="line"><span>      files: [&quot;**/*.vue&quot;], // 针对 Vue 文件做特殊配置</span></span>
<span class="line"><span>      languageOptions: { </span></span>
<span class="line"><span>          parserOptions: { parser: tseslint.parser }</span></span>
<span class="line"><span>      } // 指定 TypeScript ESLint 解析器来解析 Vue 文件中的 \`&lt;script&gt;\` 块</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>];</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-配置-eslint" tabindex="-1"><a class="header-anchor" href="#_4-配置-eslint"><span>4. 配置 ESLint</span></a></h3><p>然后我又在 <code>eslint.config.mjs</code> 文件中添加特定的 ESLint 配置（一般项目够用了）。如果项添加更丰富的配置，见官网 ESLint 配置或者中文网 ESLint 配置。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>import globals from &quot;globals&quot;;</span></span>
<span class="line"><span>import pluginJs from &quot;@eslint/js&quot;;</span></span>
<span class="line"><span>import pluginVue from &quot;eslint-plugin-vue&quot;;</span></span>
<span class="line"><span>import standard from &quot;eslint-config-standard&quot;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export default [</span></span>
<span class="line"><span>  // 指定文件匹配模式</span></span>
<span class="line"><span>  {</span></span>
<span class="line"><span>    files: [&quot;**/*.{js,mjs,cjs,ts,vue}&quot;],</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  // 指定全局变量和环境</span></span>
<span class="line"><span>  {</span></span>
<span class="line"><span>    languageOptions: {</span></span>
<span class="line"><span>      globals: globals.browser,</span></span>
<span class="line"><span>      ecmaVersion: 12, // 使用最新的 ECMAScript 语法</span></span>
<span class="line"><span>      sourceType: &quot;module&quot;, // 代码是 ECMAScript 模块</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  // 使用的扩展配置</span></span>
<span class="line"><span>  pluginJs.configs.recommended,</span></span>
<span class="line"><span>  pluginVue.configs[&quot;flat/essential&quot;],</span></span>
<span class="line"><span>  standard,</span></span>
<span class="line"><span>  // 自定义规则</span></span>
<span class="line"><span>  {</span></span>
<span class="line"><span>    rules: {</span></span>
<span class="line"><span>      indent: [&quot;error&quot;, 2], // 缩进使用 2 个空格</span></span>
<span class="line"><span>      &quot;linebreak-style&quot;: [&quot;error&quot;, &quot;unix&quot;], // 使用 Unix 风格的换行符</span></span>
<span class="line"><span>      quotes: [&quot;error&quot;, &quot;single&quot;], // 使用单引号</span></span>
<span class="line"><span>      semi: [&quot;error&quot;, &quot;never&quot;], // 语句末尾不加分号</span></span>
<span class="line"><span>      &quot;no-console&quot;: process.env.NODE_ENV === &quot;production&quot; ? &quot;warn&quot; : &quot;off&quot;, // 生产环境中警告 console 使用，开发环境中关闭规则</span></span>
<span class="line"><span>      &quot;no-debugger&quot;: process.env.NODE_ENV === &quot;production&quot; ? &quot;warn&quot; : &quot;off&quot;, // 生产环境中警告 debugger 使用，开发环境中关闭规则</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>];</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，这里也是可以通过环境判断是否执行某些配置。</p><h3 id="_5-执行-eslint-检查" tabindex="-1"><a class="header-anchor" href="#_5-执行-eslint-检查"><span>5. 执行 ESLint 检查</span></a></h3><p>你已经生成了 <code>eslint.config.mjs</code> 文件，这是 ESLint 的配置文件，定义了代码检查规则和文件类型。</p><p>在你的 <code>package.json</code> 文件中，添加以下脚本，以便在本地开发或构建时运行 ESLint：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;scripts&quot;: {</span></span>
<span class="line"><span>    &quot;lint&quot;: &quot;eslint . --ext .js,.mjs,.cjs,.ts,.vue&quot;,</span></span>
<span class="line"><span>    &quot;lint:fix&quot;: &quot;eslint . --ext .js,.mjs,.cjs,.ts,.vue --fix&quot;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>lint</code>: 这个脚本会检查当前项目根目录及其子目录中的所有文件，使用 <code>.js</code>, <code>.mjs</code>, <code>.cjs</code>, <code>.ts</code>, <code>.vue</code> 扩展名。</li><li><code>lint:fix</code>: 这个脚本会检查并尝试自动修复可修复的问题。</li></ul><p>你还可以将 ESLint 集成到你的构建过程中。更新 <code>package.json</code> 文件中的 <code>scripts</code> 部分，以便在构建之前运行 ESLint：</p><p>现在，你可以通过以下命令来检查和修复代码：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>npm run lint</span></span>
<span class="line"><span>npm run lint:fix</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：ESLint 的 <code>--fix</code> 选项只能自动修复那些被标记为“可自动修复”的规则错误，例如代码格式化、简单的语法修正等。但对于一些复杂的规则，<code>--fix</code> 可能无法处理，您需要手动修复这些问题。</p><p>思考：我们不能在每次编码后都去触发命令，从而通过eslint校验代码。那么有没有简单快捷的方法呢？</p><p>我们希望在本地运行时，部署打包时，都能运行eslint，而不是去触发npm run lint，怎么处理？</p><h2 id="更深入的集成-开发、打包时自动检查和修复" tabindex="-1"><a class="header-anchor" href="#更深入的集成-开发、打包时自动检查和修复"><span>更深入的集成（开发、打包时自动检查和修复）</span></a></h2><p>详细介绍如何在 Vite、Webpack 中集成 ESLint，并在 CI/CD 流程中保持代码的高质量。同时，我们还将讨论如何在本地开发环境中，持续运行 ESLint 进行代码检查。</p><h3 id="vite-集成" tabindex="-1"><a class="header-anchor" href="#vite-集成"><span>Vite 集成</span></a></h3><p>在 Vite 项目中，我们可以使用 <code>vite-plugin-eslint</code> 插件，这样不仅可以在开发过程中进行代码检查，还可以在打包时进行验证。</p><p>首先，安装插件：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>npm install vite-plugin-eslint --save-dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后在 <code>vite.config.js</code> 中进行配置：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>import { defineConfig } from &#39;vite&#39;;</span></span>
<span class="line"><span>import vue from &#39;@vitejs/plugin-vue&#39;;</span></span>
<span class="line"><span>import eslintPlugin from &#39;vite-plugin-eslint&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export default defineConfig({</span></span>
<span class="line"><span>    plugins: [</span></span>
<span class="line"><span>        vue(),</span></span>
<span class="line"><span>        eslintPlugin({</span></span>
<span class="line"><span>            // 可以在这里传入自定义配置</span></span>
<span class="line"><span>            // 默认会读取项目中的 .eslintrc.js 文件</span></span>
<span class="line"><span>        })</span></span>
<span class="line"><span>    ]</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你也可以直接配置插件的选项：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>eslintPlugin({</span></span>
<span class="line"><span>    include: [&#39;src/**/*.js&#39;, &#39;src/**/*.vue&#39;, &#39;src/**/*.ts&#39;],  // 指定要检查的文件和目录。</span></span>
<span class="line"><span>    exclude: [&#39;node_modules/**&#39;, &#39;dist/**&#39;], // 排除不需要检查的文件和目录。</span></span>
<span class="line"><span>    fix: true,  // 在保存文件时自动修复 ESLint 问题。</span></span>
<span class="line"><span>    cache: false // 禁用 ESLint 缓存，以便每次都执行完整检查。</span></span>
<span class="line"><span>})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：千万不要小瞧这个<code>include</code>、<code>exclude</code>，这两个配置可以帮助我们再老项目中，检查和自动修复分批进行。</p><p>通过这种方式，你不仅能在开发阶段发现并修复代码问题，还能在打包时确保代码的质量。</p><h3 id="webpack-集成" tabindex="-1"><a class="header-anchor" href="#webpack-集成"><span>Webpack 集成</span></a></h3><p>在 Webpack 项目中，可以使用 <code>eslint-webpack-plugin</code> 插件。这能够让 ESLint 在每次构建时检查代码，并根据需要自动修复问题。</p><p>首先，安装插件：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>npm install eslint-webpack-plugin --save-dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>接着在 <code>webpack.config.js</code> 中配置：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>const ESLintPlugin = require(&#39;eslint-webpack-plugin&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>module.exports = {</span></span>
<span class="line"><span>    // 其他 Webpack 配置</span></span>
<span class="line"><span>    plugins: [</span></span>
<span class="line"><span>        new ESLintPlugin({</span></span>
<span class="line"><span>            extensions: [&#39;js&#39;, &#39;vue&#39;, &#39;ts&#39;], // 指定要检查的文件类型</span></span>
<span class="line"><span>            fix: true, // 启用自动修复功能</span></span>
<span class="line"><span>            cache: true, // 启用缓存，提高检查性能</span></span>
<span class="line"><span>            exclude: &#39;node_modules&#39;, // 排除的目录</span></span>
<span class="line"><span>            failOnError: true, // 如果有错误则使构建失败</span></span>
<span class="line"><span>        })</span></span>
<span class="line"><span>    ]</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过这种方式，无论是开发还是生产环境的构建，都能确保代码质量不会下降。</p><h3 id="ci-cd-集成" tabindex="-1"><a class="header-anchor" href="#ci-cd-集成"><span>CI/CD 集成</span></a></h3><p>在持续集成/持续交付（CI/CD）流程中，集成 ESLint 是确保代码质量的重要一环。以下是如何在 GitHub Actions 和 GitLab CI 中集成 ESLint：</p><ul><li><strong>「GitHub Actions」</strong>:</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>name: CI</span></span>
<span class="line"><span></span></span>
<span class="line"><span>on: [push, pull_request]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>jobs:</span></span>
<span class="line"><span>  lint:</span></span>
<span class="line"><span>    name: Lint Code Base</span></span>
<span class="line"><span>    runs-on: ubuntu-latest</span></span>
<span class="line"><span>    steps:</span></span>
<span class="line"><span>      - uses: actions/checkout@v3</span></span>
<span class="line"><span>      - name: Install Dependencies</span></span>
<span class="line"><span>        run: npm install</span></span>
<span class="line"><span>      - name: Run ESLint</span></span>
<span class="line"><span>        run: npm run lint</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>「GitLab CI」</strong>:</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>stages:</span></span>
<span class="line"><span>  - lint</span></span>
<span class="line"><span></span></span>
<span class="line"><span>eslint:</span></span>
<span class="line"><span>  stage: lint</span></span>
<span class="line"><span>  script:</span></span>
<span class="line"><span>    - npm install</span></span>
<span class="line"><span>    - npm run lint</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过在 CI/CD 流程中集成 ESLint，可以在每次提交或合并请求时自动检查代码，确保代码符合团队的编码标准。</p><h2 id="使用-git-hooks-代码库的处理" tabindex="-1"><a class="header-anchor" href="#使用-git-hooks-代码库的处理"><span>使用 Git Hooks（代码库的处理）</span></a></h2><p>为了防止不符合标准的代码进入代码库，可以通过 Git Hooks 在提交代码时自动运行 ESLint。使用 <code>husky</code> 和 <code>lint-staged</code> 工具，你可以轻松实现这一点。</p><h3 id="安装-husky-和-lint-staged" tabindex="-1"><a class="header-anchor" href="#安装-husky-和-lint-staged"><span>安装 <code>husky</code> 和 <code>lint-staged</code></span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>npm install husky lint-staged --save-dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="配置-package-json" tabindex="-1"><a class="header-anchor" href="#配置-package-json"><span>配置 <code>package.json</code></span></a></h3><p>在 <code>package.json</code> 中添加以下配置：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;husky&quot;: {</span></span>
<span class="line"><span>    &quot;hooks&quot;: {</span></span>
<span class="line"><span>      &quot;pre-commit&quot;: &quot;lint-staged&quot;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  &quot;lint-staged&quot;: {</span></span>
<span class="line"><span>    &quot;*.{js,mjs,cjs,ts,vue}&quot;: &quot;eslint --fix&quot;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，每次提交代码时，<code>lint-staged</code> 会运行 ESLint 并自动修复可修复的问题。</p><p>同志们，到这里关于eslint自动化在项目的运行就实现。但是我们可以会遇到一些问题，请参考下面处理！</p><h2 id="常见问题处理" tabindex="-1"><a class="header-anchor" href="#常见问题处理"><span>常见问题处理</span></a></h2><h3 id="_1、you-can-also-run-this-command-directly-using-npm-init-eslint-config" tabindex="-1"><a class="header-anchor" href="#_1、you-can-also-run-this-command-directly-using-npm-init-eslint-config"><span>1、You can also run this command directly using &#39;npm init @eslint/config&#39;.</span></a></h3><p>执行 <code>npx eslint --init</code> 时，出现问题。这个问题是你的项目中初始化一个 ESLint 配置，但是你遇到了一个错误。错误信息表明存在与 npm 会话相关的问题，可能是因为一个可选依赖项安装失败。</p><p>检查下 <code>node</code> 版本，建议使用 <code>node 16+</code>，我用的是<code>v16.14.2</code>。</p><h3 id="_2、eslint-版本不一致" tabindex="-1"><a class="header-anchor" href="#_2、eslint-版本不一致"><span>2、eslint 版本不一致</span></a></h3><p>如果你是新项目，那么按照上面的配置来，很少出现问题。但是如果你是在老项目上重新加eslint，我的建议是非必要不加。</p><p>但是如果需要加的话，建议你先完成“执行Eslint检查”，然后触发npm run lint，看下有哪些文件、代码出现问题。而且你可能刚出现以下问题：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[plugin:vite-plugin-eslint] Failed to load plugin &#39;@typescript-eslint&#39; declared in &#39;.eslintrc.js&#39;: Class extends value undefined is not a constructor or null</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>有时候，<code>@typescript-eslint</code> 插件的版本较旧可能与较新的 ESLint 版本不兼容。以下是解决此问题的一些步骤：</p><p>1、更新 <code>@typescript-eslint</code> 插件。尝试将 <code>@typescript-eslint</code> 插件更新到最新版本。使用以下命令更新：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>npm install @typescript-eslint/eslint-plugin@latest @typescript-eslint/parser@latest --save-dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol><li>确保 <code>vite-plugin-eslint</code> 插件是最新的。</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>npm install vite-plugin-eslint@latest --save-dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>3、清除缓存并重新安装依赖。删除 <code>node_modules</code> 和 <code>package-lock.json</code>，然后重新安装所有依赖：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>rm -rf node_modules package-lock.json</span></span>
<span class="line"><span>npm install</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>手动运行 ESLint 检查。确保 ESLint 本身可以正常运行。在项目目录中，使用以下命令运行 ESLint：</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>npx eslint src --ext .js,.ts,.vue</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果以上步骤没有解决问题，可以参考 ESLint、<code>@typescript-eslint</code> 和 <code>vite-plugin-eslint</code> 的官方文档和 GitHub 问题跟踪器，看看是否有类似问题的解决方案。</p><h3 id="_3、invalid-option-ext-perhaps-you-meant-c-you-re-using-eslint-config-js-some-command-line-flags-are-no-longer-available" tabindex="-1"><a class="header-anchor" href="#_3、invalid-option-ext-perhaps-you-meant-c-you-re-using-eslint-config-js-some-command-line-flags-are-no-longer-available"><span>3、Invalid option &#39;--ext&#39; - perhaps you meant &#39;-c&#39;?You&#39;re using eslint.config.js, some command line flags are no longer available.</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&gt; eslint . --ext .js,.mjs,.cjs,.ts,.vue</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Invalid option &#39;--ext&#39; - perhaps you meant &#39;-c&#39;?</span></span>
<span class="line"><span>You&#39;re using eslint.config.js, some command line flags are no longer available. Please see https://eslint.org/docs/latest/use/command-line-interface for details.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在使用 <code>eslint.config.mjs</code> 配置文件时，ESLint 的命令行选项有所不同。<code>--ext</code> 选项在使用新的 <code>eslint.config.*</code> 文件时不再可用，因为文件扩展名可以直接在配置文件中指定。</p><p>已经在 <code>eslint.config.mjs</code> 文件中指定了匹配模式为 <code>**/*.{js,mjs,cjs,ts,vue}</code>，这会告诉 ESLint 自动处理这些扩展名的文件，因此无需在命令行中指定 <code>--ext</code>。</p><p><strong>「使用 <code>eslint</code> 命令直接运行：」</strong></p><p>直接使用一下命令：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>eslint .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果您需要进一步自定义检查的目录或文件，可以在命令行中指定目录或文件路径，而无需使用 <code>--ext</code> 选项。例如：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>eslint src/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_4、configerror-config-unnamed-key-rules-key-constructor-super-structuredclone-is-not-defined" tabindex="-1"><a class="header-anchor" href="#_4、configerror-config-unnamed-key-rules-key-constructor-super-structuredclone-is-not-defined"><span>4、ConfigError: Config (unnamed): Key &quot;rules&quot;: Key &quot;constructor-super&quot;: structuredClone is not defined</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&gt; eslint .</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>Oops! Something went wrong! :(</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ESLint: 9.8.0</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ConfigError: Config (unnamed): Key &quot;rules&quot;: Key &quot;constructor-super&quot;: structuredClone is not defined</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相比上面那种费时的配置处理，下面这种方式，不失为最简单的方式之一，直接跳过打包工具的配置，由开发工具来进行ESLint的检查、修复。</p><h2 id="🔥🔥借助编辑器和-ide-一直在项目中配置失败怎么办" tabindex="-1"><a class="header-anchor" href="#🔥🔥借助编辑器和-ide-一直在项目中配置失败怎么办"><span>🔥🔥借助编辑器和 IDE（一直在项目中配置失败怎么办？）</span></a></h2><p>我们集成 ESLint 到编辑器或 IDE，这是非常快捷简单的操作。</p><p>大多数现代编辑器和 IDE（如 VSCode、WebStorm、Sublime Text 等）都支持 ESLint 插件。通过安装 ESLint 插件，可以实现以下功能：</p><ul><li><strong>「实时检查」</strong>：在你编写代码时，编辑器会自动运行 ESLint，并在代码中标记出不符合规则的地方。</li><li><strong>「自动修复」</strong>：在保存文件时，编辑器可以自动运行 ESLint 的 <code>--fix</code> 选项，自动修复简单的问题。</li></ul><h3 id="_1、安装-ide-中的-eslint-插件" tabindex="-1"><a class="header-anchor" href="#_1、安装-ide-中的-eslint-插件"><span>1、安装 IDE 中的 ESLint 插件</span></a></h3><ol><li>打开 VS Code: 打开你的 Vue 3 项目。</li><li>进入扩展市场: 点击左侧活动栏中的“扩展”图标。</li><li>搜索 ESLint: 在搜索框中输入 “ESLint”。</li><li>安装插件: 找到 ESLint 插件后，然后点击“安装”。</li></ol><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1724082375864-1.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h3 id="_2-配置项目目录-vscode-settings-json" tabindex="-1"><a class="header-anchor" href="#_2-配置项目目录-vscode-settings-json"><span>2. 配置项目目录 .vscode/settings.json</span></a></h3><p>为了让 ESLint 插件在保存文件时自动检查和修复代码问题，你需要在项目根目录下的 <code>.vscode/settings.json</code> 文件中创建或更新以下配置：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>    &quot;editor.codeActionsOnSave&quot;: {</span></span>
<span class="line"><span>        &quot;source.fixAll.eslint&quot;: true</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    &quot;eslint.validate&quot;: [</span></span>
<span class="line"><span>        &quot;javascript&quot;,</span></span>
<span class="line"><span>        &quot;javascriptreact&quot;,</span></span>
<span class="line"><span>        &quot;vue&quot;</span></span>
<span class="line"><span>    ]</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>「<code>editor.codeActionsOnSave</code>」</strong>: 这个配置项确保在保存文件时，VS Code 会自动应用所有 ESLint 规则进行修复。</li><li><strong>「<code>eslint.validate</code>」</strong>: 这个配置项指定哪些文件类型将由 ESLint 插件进行验证。在这里，我们添加了 JavaScript、JavaScript React 和 Vue 文件。</li></ul><p>是不是很简单，但是这个前提是需要新入职的员工在IDE先安装插件，可能有的刚入行的老师不熟练，所以这个有点微瑕。但是这个不失为是一个简单快捷的代码规范方式。</p><h2 id="来看看-实际应用效果" tabindex="-1"><a class="header-anchor" href="#来看看-实际应用效果"><span>来看看，实际应用效果</span></a></h2><p>假设你在 VS Code 中编辑一个 Vue 组件文件 <code>HelloWorld.vue</code>，并且 ESLint 配置要求使用单引号，但你使用了双引号：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;template&gt;</span></span>
<span class="line"><span>  &lt;div class=&quot;hello&quot;&gt;Hello, World!&lt;/div&gt;</span></span>
<span class="line"><span>&lt;/template&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;script&gt;</span></span>
<span class="line"><span>export default {</span></span>
<span class="line"><span>  name: &quot;HelloWorld&quot;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>&lt;/script&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果 ESLint 配置要求使用单引号，并且你在 VS Code 中保存文件时，ESLint 将会自动将双引号修复为单引号：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;template&gt;</span></span>
<span class="line"><span>  &lt;div class=&#39;hello&#39;&gt;Hello, World!&lt;/div&gt;</span></span>
<span class="line"><span>&lt;/template&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;script&gt;</span></span>
<span class="line"><span>export default {</span></span>
<span class="line"><span>  name: &#39;HelloWorld&#39;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>&lt;/script&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>通过项目集成 ESLint，你可以实时检测和修复代码问题，确保代码质量的一致性。这有助于保持代码的一致性和可读性。而我们也可以通过在开发工具 VS Code 中集成 ESLint，这两者不仅可以实时获得代码提示，而且还能在保存时自动修复问题，从而提高开发效率和代码质量。</p>`,124)),n(a,{colorful:"",service:"email,qq,qzone,qrcode,weibo,telegram,twitter"})])}const g=l(o,[["render",u],["__file","ESLint 配置.html.vue"]]),b=JSON.parse(`{"path":"/dev/ESLint%20%E9%85%8D%E7%BD%AE.html","title":"ESLint 配置","lang":"zh-CN","frontmatter":{"title":"ESLint 配置","excerpt":null,"description":"ESLint 配置","date":"2024-08-18T00:00:00.000Z","category":"Java","tag":"Java","author":"xlc520","article":true,"timeline":true,"icon":"java","head":[["meta",{"property":"og:url","content":"https://blog.ciberviler.top/dev/ESLint%20%E9%85%8D%E7%BD%AE.html"}],["meta",{"property":"og:site_name","content":"StudyNote - 丰富的知识笔记库"}],["meta",{"property":"og:title","content":"ESLint 配置"}],["meta",{"property":"og:description","content":"ESLint 配置"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1724082375864-1.webp"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-07T06:25:32.000Z"}],["meta",{"property":"article:author","content":"xlc520"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2024-08-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-07T06:25:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ESLint 配置\\",\\"image\\":[\\"https://bitbucket.org/xlc520/blogasset/raw/main/images/2024/640-1724082375864-1.webp\\"],\\"datePublished\\":\\"2024-08-18T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-07T06:25:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xlc520\\"}]}"]]},"headers":[{"level":2,"title":"~ 简单说一下 ESLint 是做什么的 ~","slug":"简单说一下-eslint-是做什么的","link":"#简单说一下-eslint-是做什么的","children":[]},{"level":2,"title":"🔥🔥只需5步，搞定ESLint集成","slug":"🔥🔥只需5步-搞定eslint集成","link":"#🔥🔥只需5步-搞定eslint集成","children":[{"level":3,"title":"1. 初始化 Vue 3 项目（以 Vue 3 示例）","slug":"_1-初始化-vue-3-项目-以-vue-3-示例","link":"#_1-初始化-vue-3-项目-以-vue-3-示例","children":[]},{"level":3,"title":"2. 安装 ESLint","slug":"_2-安装-eslint","link":"#_2-安装-eslint","children":[]},{"level":3,"title":"3. 初始化 ESLint 配置","slug":"_3-初始化-eslint-配置","link":"#_3-初始化-eslint-配置","children":[]},{"level":3,"title":"4. 配置 ESLint","slug":"_4-配置-eslint","link":"#_4-配置-eslint","children":[]},{"level":3,"title":"5. 执行 ESLint 检查","slug":"_5-执行-eslint-检查","link":"#_5-执行-eslint-检查","children":[]}]},{"level":2,"title":"更深入的集成（开发、打包时自动检查和修复）","slug":"更深入的集成-开发、打包时自动检查和修复","link":"#更深入的集成-开发、打包时自动检查和修复","children":[{"level":3,"title":"Vite 集成","slug":"vite-集成","link":"#vite-集成","children":[]},{"level":3,"title":"Webpack 集成","slug":"webpack-集成","link":"#webpack-集成","children":[]},{"level":3,"title":"CI/CD 集成","slug":"ci-cd-集成","link":"#ci-cd-集成","children":[]}]},{"level":2,"title":"使用 Git Hooks（代码库的处理）","slug":"使用-git-hooks-代码库的处理","link":"#使用-git-hooks-代码库的处理","children":[{"level":3,"title":"安装 husky 和 lint-staged","slug":"安装-husky-和-lint-staged","link":"#安装-husky-和-lint-staged","children":[]},{"level":3,"title":"配置 package.json","slug":"配置-package-json","link":"#配置-package-json","children":[]}]},{"level":2,"title":"常见问题处理","slug":"常见问题处理","link":"#常见问题处理","children":[{"level":3,"title":"1、You can also run this command directly using 'npm init @eslint/config'.","slug":"_1、you-can-also-run-this-command-directly-using-npm-init-eslint-config","link":"#_1、you-can-also-run-this-command-directly-using-npm-init-eslint-config","children":[]},{"level":3,"title":"2、eslint 版本不一致","slug":"_2、eslint-版本不一致","link":"#_2、eslint-版本不一致","children":[]},{"level":3,"title":"3、Invalid option '--ext' - perhaps you meant '-c'?You're using eslint.config.js, some command line flags are no longer available.","slug":"_3、invalid-option-ext-perhaps-you-meant-c-you-re-using-eslint-config-js-some-command-line-flags-are-no-longer-available","link":"#_3、invalid-option-ext-perhaps-you-meant-c-you-re-using-eslint-config-js-some-command-line-flags-are-no-longer-available","children":[]},{"level":3,"title":"4、ConfigError: Config (unnamed): Key \\"rules\\": Key \\"constructor-super\\": structuredClone is not defined","slug":"_4、configerror-config-unnamed-key-rules-key-constructor-super-structuredclone-is-not-defined","link":"#_4、configerror-config-unnamed-key-rules-key-constructor-super-structuredclone-is-not-defined","children":[]}]},{"level":2,"title":"🔥🔥借助编辑器和 IDE（一直在项目中配置失败怎么办？）","slug":"🔥🔥借助编辑器和-ide-一直在项目中配置失败怎么办","link":"#🔥🔥借助编辑器和-ide-一直在项目中配置失败怎么办","children":[{"level":3,"title":"1、安装 IDE 中的 ESLint 插件","slug":"_1、安装-ide-中的-eslint-插件","link":"#_1、安装-ide-中的-eslint-插件","children":[]},{"level":3,"title":"2. 配置项目目录 .vscode/settings.json","slug":"_2-配置项目目录-vscode-settings-json","link":"#_2-配置项目目录-vscode-settings-json","children":[]}]},{"level":2,"title":"来看看，实际应用效果","slug":"来看看-实际应用效果","link":"#来看看-实际应用效果","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1725690332000,"updatedTime":1725690332000,"contributors":[{"name":"xlc","email":"2215400217@qq.com","commits":1}]},"readingTime":{"minutes":13.66,"words":4098},"filePathRelative":"dev/ESLint 配置.md","localizedDate":"2024年8月18日","excerpt":""}`);export{g as comp,b as data};
