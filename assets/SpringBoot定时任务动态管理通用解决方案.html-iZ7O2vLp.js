import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o,c as l,b as s,d as n,e,a as t}from"./app-CMd4NNER.js";const i={},u=t(`<h1 id="springboot-定时任务动态管理通用解决方案" tabindex="-1"><a class="header-anchor" href="#springboot-定时任务动态管理通用解决方案"><span>SpringBoot 定时任务动态管理通用解决方案</span></a></h1><h2 id="一、功能说明" tabindex="-1"><a class="header-anchor" href="#一、功能说明"><span>一、功能说明</span></a></h2><p>SpringBoot 的定时任务的加强工具，实现对 SpringBoot 原生的定时任务进行动态管理,完全兼容原生@Scheduled 注解,无需对原本的定时任务进行修改</p><h2 id="二、快速使用" tabindex="-1"><a class="header-anchor" href="#二、快速使用"><span>二、快速使用</span></a></h2><p>具体的功能已经封装成 SpringBoot-starter 即插即用</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.guoyixing<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-super-scheduled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),k={href:"https://gitee.com/qiaodaimadewangcai/super-scheduled",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/guoyixing/super-scheduled/",target:"_blank",rel:"noopener noreferrer"},r=t(`<h2 id="三、实现原理" tabindex="-1"><a class="header-anchor" href="#三、实现原理"><span>三、实现原理</span></a></h2><h3 id="_1、动态管理实现" tabindex="-1"><a class="header-anchor" href="#_1、动态管理实现"><span>1、动态管理实现</span></a></h3><h4 id="_1-配置管理介绍" tabindex="-1"><a class="header-anchor" href="#_1-配置管理介绍"><span>(1) 配置管理介绍</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">&quot;superScheduledConfig&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperScheduledConfig</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 执行定时任务的线程池
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">ThreadPoolTaskScheduler</span> taskScheduler<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 定时任务名称与定时任务回调钩子  的关联关系容器
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ScheduledFuture</span><span class="token punctuation">&gt;</span></span> nameToScheduledFuture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 定时任务名称与定时任务需要执行的逻辑  的关联关系容器
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> nameToRunnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 定时任务名称与定时任务的源信息  的关联关系容器
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ScheduledSource</span><span class="token punctuation">&gt;</span></span> nameToScheduledSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">/* 普通的get/sets省略 */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-使用后处理器拦截-springboot-原本的定时任务" tabindex="-1"><a class="header-anchor" href="#_2-使用后处理器拦截-springboot-原本的定时任务"><span>(2) 使用后处理器拦截 SpringBoot 原本的定时任务</span></a></h4><p>1、实现 ApplicationContextAware 接口拿到 SpringBoot 的上下文 2、实现 BeanPostProcessor 接口，将这个类标记为后处理器，后处理器会在每个 bean 实例化之后执行 3、使用@DependsOn 注解强制依赖 SuperScheduledConfig 类，让 SpringBoot 实例化 SuperScheduledPostProcessor 类之前先实例化 SuperScheduledConfig 类 4、主要实现逻辑在 postProcessAfterInitialization()方法中</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/image-20220524212320260.png" alt="image-20220524212320260" tabindex="0" loading="lazy"><figcaption>image-20220524212320260</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@DependsOn</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;superScheduledConfig&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Order</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperScheduledPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span><span class="token punctuation">,</span> <span class="token class-name">ApplicationContextAware</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">Log</span> logger <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 实例化bean之前的操作
     * <span class="token keyword">@param</span> <span class="token parameter">bean</span> bean实例
     * <span class="token keyword">@param</span> <span class="token parameter">beanName</span> bean的Name
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 实例化bean之后的操作
     * <span class="token keyword">@param</span> <span class="token parameter">bean</span> bean实例
     * <span class="token keyword">@param</span> <span class="token parameter">beanName</span> bean的Name
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span>
                                                 <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token comment">//1.获取配置管理器</span>
        <span class="token class-name">SuperScheduledConfig</span> superScheduledConfig <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">SuperScheduledConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//2.获取当前实例化完成的bean的所有方法</span>
        <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//循环处理对每个方法逐一处理</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>methods<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token comment">//3.尝试在该方法上获取@Scheduled注解（SpringBoot的定时任务注解）</span>
                <span class="token class-name">Scheduled</span> annotation <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Scheduled</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//如果无法获取到@Scheduled注解，就跳过这个方法</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>annotation <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">//4.创建定时任务的源属性</span>
                <span class="token comment">//创建定时任务的源属性（用来记录定时任务的配置，初始化的时候记录的是注解上原本的属性）</span>
                <span class="token class-name">ScheduledSource</span> scheduledSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScheduledSource</span><span class="token punctuation">(</span>annotation<span class="token punctuation">,</span> method<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//对注解上获取到源属性中的属性进行检测</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>scheduledSource<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SuperScheduledException</span><span class="token punctuation">(</span><span class="token string">&quot;在&quot;</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">&quot;Bean中&quot;</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;方法的注解参数错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">//生成定时任务的名称（id），使用beanName+“.”+方法名</span>
                <span class="token class-name">String</span> name <span class="token operator">=</span> beanName <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//将以key-value的形式，将源数据存入配置管理器中，key：定时任务的名称 value：源数据</span>
                superScheduledConfig<span class="token punctuation">.</span><span class="token function">addScheduledSource</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> scheduledSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                 <span class="token comment">//5.将原本SpringBoot的定时任务取消掉</span>
                    <span class="token function">clearOriginalScheduled</span><span class="token punctuation">(</span>annotation<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SuperScheduledException</span><span class="token punctuation">(</span><span class="token string">&quot;在关闭原始方法&quot;</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;时出现错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//最后bean保持原有返回</span>
        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 修改注解原先的属性
     * <span class="token keyword">@param</span> <span class="token parameter">annotation</span> 注解实例对象
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">clearOriginalScheduled</span><span class="token punctuation">(</span><span class="token class-name">Scheduled</span> annotation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token function">changeAnnotationValue</span><span class="token punctuation">(</span>annotation<span class="token punctuation">,</span> <span class="token string">&quot;cron&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Scheduled</span><span class="token punctuation">.</span><span class="token constant">CRON_DISABLED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">changeAnnotationValue</span><span class="token punctuation">(</span>annotation<span class="token punctuation">,</span> <span class="token string">&quot;fixedDelay&quot;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">changeAnnotationValue</span><span class="token punctuation">(</span>annotation<span class="token punctuation">,</span> <span class="token string">&quot;fixedDelayString&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">changeAnnotationValue</span><span class="token punctuation">(</span>annotation<span class="token punctuation">,</span> <span class="token string">&quot;fixedRate&quot;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">changeAnnotationValue</span><span class="token punctuation">(</span>annotation<span class="token punctuation">,</span> <span class="token string">&quot;fixedRateString&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">changeAnnotationValue</span><span class="token punctuation">(</span>annotation<span class="token punctuation">,</span> <span class="token string">&quot;initialDelay&quot;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">changeAnnotationValue</span><span class="token punctuation">(</span>annotation<span class="token punctuation">,</span> <span class="token string">&quot;initialDelayString&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token doc-comment comment">/**
     * 获取SpringBoot的上下文
     * <span class="token keyword">@param</span> <span class="token parameter">applicationContext</span> SpringBoot的上下文
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext <span class="token operator">=</span> applicationContext<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-使用-applicationrunner-初始化自定义的定时任务运行器" tabindex="-1"><a class="header-anchor" href="#_3-使用-applicationrunner-初始化自定义的定时任务运行器"><span>(3) 使用 ApplicationRunner 初始化自定义的定时任务运行器</span></a></h4><p>1、实现 ApplicationContextAware 接口拿到 SpringBoot 的上下文 2、使用@DependsOn 注解强制依赖 threadPoolTaskScheduler 类 3、实现 ApplicationRunner 接口，在所有 bean 初始化结束之后，运行自定义逻辑 4、主要实现逻辑在 run()方法中</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/image-20220524212339560.png" alt="image-20220524212339560" tabindex="0" loading="lazy"><figcaption>image-20220524212339560</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@DependsOn</span><span class="token punctuation">(</span><span class="token string">&quot;threadPoolTaskScheduler&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperScheduledApplicationRunner</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationRunner</span><span class="token punctuation">,</span> <span class="token class-name">ApplicationContextAware</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">Log</span> logger <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">DateTimeFormatter</span> df <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">;</span>
 
 <span class="token doc-comment comment">/**
     * 定时任务配置管理器
     */</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">SuperScheduledConfig</span> superScheduledConfig<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 定时任务执行线程
     */</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">ThreadPoolTaskScheduler</span> threadPoolTaskScheduler<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ApplicationArguments</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment">//1.定时任务配置管理器中缓存  定时任务执行线程</span>
        superScheduledConfig<span class="token punctuation">.</span><span class="token function">setTaskScheduler</span><span class="token punctuation">(</span>threadPoolTaskScheduler<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2.获取所有定时任务源数据</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ScheduledSource</span><span class="token punctuation">&gt;</span></span> nameToScheduledSource <span class="token operator">=</span> superScheduledConfig<span class="token punctuation">.</span><span class="token function">getNameToScheduledSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//逐一处理定时任务</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> name <span class="token operator">:</span> nameToScheduledSource<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//3.获取定时任务源数据</span>
            <span class="token class-name">ScheduledSource</span> scheduledSource <span class="token operator">=</span> nameToScheduledSource<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//4.获取所有增强类</span>
            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> baseStrengthenBeanNames <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span><span class="token class-name">BaseStrengthen</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//5.创建执行控制器</span>
            <span class="token class-name">SuperScheduledRunnable</span> runnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperScheduledRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//配置执行控制器</span>
            runnable<span class="token punctuation">.</span><span class="token function">setMethod</span><span class="token punctuation">(</span>scheduledSource<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            runnable<span class="token punctuation">.</span><span class="token function">setBean</span><span class="token punctuation">(</span>scheduledSource<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//6.逐一处理增强类（增强器实现原理后面具体分析）</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">&gt;</span></span> points <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>baseStrengthenBeanNames<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> baseStrengthenBeanName <span class="token operator">:</span> baseStrengthenBeanNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token comment">//7.将增强器代理成point</span>
                <span class="token class-name">Object</span> baseStrengthenBean <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>baseStrengthenBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//创建代理</span>
                <span class="token class-name">Point</span> proxy <span class="token operator">=</span> <span class="token class-name">ProxyUtils</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">Point</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RunnableBaseInterceptor</span><span class="token punctuation">(</span>baseStrengthenBean<span class="token punctuation">,</span> runnable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                proxy<span class="token punctuation">.</span><span class="token function">setSuperScheduledName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//8.所有的points连成起来</span>
                points<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
   <span class="token comment">//将point形成调用链</span>
            runnable<span class="token punctuation">.</span><span class="token function">setChain</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Chain</span><span class="token punctuation">(</span>points<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//将执行逻辑封装并缓存到定时任务配置管理器中</span>
            superScheduledConfig<span class="token punctuation">.</span><span class="token function">addRunnable</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> runnable<span class="token operator">::</span><span class="token function">invoke</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
             <span class="token comment">//8.启动定时任务</span>
                <span class="token class-name">ScheduledFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> schedule <span class="token operator">=</span> <span class="token class-name">ScheduledFutureFactory</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>threadPoolTaskScheduler
                        <span class="token punctuation">,</span> scheduledSource<span class="token punctuation">,</span> runnable<span class="token operator">::</span><span class="token function">invoke</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//将线程回调钩子存到任务配置管理器中</span>
                superScheduledConfig<span class="token punctuation">.</span><span class="token function">addScheduledFuture</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> schedule<span class="token punctuation">)</span><span class="token punctuation">;</span>
                logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;任务&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;已经启动...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SuperScheduledException</span><span class="token punctuation">(</span><span class="token string">&quot;任务&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;启动失败，错误信息：&quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getLocalizedMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext <span class="token operator">=</span> applicationContext<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-进行动态管理" tabindex="-1"><a class="header-anchor" href="#_4-进行动态管理"><span>(4) 进行动态管理</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperScheduledManager</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">Log</span> logger <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">DateTimeFormatter</span> df <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">SuperScheduledConfig</span> superScheduledConfig<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 修改Scheduled的执行周期
     *
     * <span class="token keyword">@param</span> <span class="token parameter">name</span> scheduled的名称
     * <span class="token keyword">@param</span> <span class="token parameter">cron</span> cron表达式
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setScheduledCron</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> cron<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//终止原先的任务</span>
        <span class="token function">cancelScheduled</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//创建新的任务</span>
        <span class="token class-name">ScheduledSource</span> scheduledSource <span class="token operator">=</span> superScheduledConfig<span class="token punctuation">.</span><span class="token function">getScheduledSource</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        scheduledSource<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scheduledSource<span class="token punctuation">.</span><span class="token function">setCron</span><span class="token punctuation">(</span>cron<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">addScheduled</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> scheduledSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 修改Scheduled的fixedDelay
     *
     * <span class="token keyword">@param</span> <span class="token parameter">name</span>       scheduled的名称
     * <span class="token keyword">@param</span> <span class="token parameter">fixedDelay</span> 上一次执行完毕时间点之后多长时间再执行
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setScheduledFixedDelay</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Long</span> fixedDelay<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//终止原先的任务</span>
        <span class="token function">cancelScheduled</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//创建新的任务</span>
        <span class="token class-name">ScheduledSource</span> scheduledSource <span class="token operator">=</span> superScheduledConfig<span class="token punctuation">.</span><span class="token function">getScheduledSource</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        scheduledSource<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scheduledSource<span class="token punctuation">.</span><span class="token function">setFixedDelay</span><span class="token punctuation">(</span>fixedDelay<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">addScheduled</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> scheduledSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 修改Scheduled的fixedRate
     *
     * <span class="token keyword">@param</span> <span class="token parameter">name</span>      scheduled的名称
     * <span class="token keyword">@param</span> <span class="token parameter">fixedRate</span> 上一次开始执行之后多长时间再执行
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setScheduledFixedRate</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Long</span> fixedRate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//终止原先的任务</span>
        <span class="token function">cancelScheduled</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//创建新的任务</span>
        <span class="token class-name">ScheduledSource</span> scheduledSource <span class="token operator">=</span> superScheduledConfig<span class="token punctuation">.</span><span class="token function">getScheduledSource</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        scheduledSource<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scheduledSource<span class="token punctuation">.</span><span class="token function">setFixedRate</span><span class="token punctuation">(</span>fixedRate<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">addScheduled</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> scheduledSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 查询所有启动的Scheduled
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getRunScheduledName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> names <span class="token operator">=</span> superScheduledConfig<span class="token punctuation">.</span><span class="token function">getNameToScheduledFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 查询所有的Scheduled
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAllSuperScheduledName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> names <span class="token operator">=</span> superScheduledConfig<span class="token punctuation">.</span><span class="token function">getNameToRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 终止Scheduled
     *
     * <span class="token keyword">@param</span> <span class="token parameter">name</span> scheduled的名称
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cancelScheduled</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ScheduledFuture</span> scheduledFuture <span class="token operator">=</span> superScheduledConfig<span class="token punctuation">.</span><span class="token function">getScheduledFuture</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        scheduledFuture<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        superScheduledConfig<span class="token punctuation">.</span><span class="token function">removeScheduledFuture</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;任务&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;已经终止...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 启动Scheduled
     *
     * <span class="token keyword">@param</span> <span class="token parameter">name</span>            scheduled的名称
     * <span class="token keyword">@param</span> <span class="token parameter">scheduledSource</span> 定时任务的源信息
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addScheduled</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">ScheduledSource</span> scheduledSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getRunScheduledName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SuperScheduledException</span><span class="token punctuation">(</span><span class="token string">&quot;定时任务&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;已经被启动过了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>scheduledSource<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SuperScheduledException</span><span class="token punctuation">(</span><span class="token string">&quot;定时任务&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;源数据内容错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        scheduledSource<span class="token punctuation">.</span><span class="token function">refreshType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Runnable</span> runnable <span class="token operator">=</span> superScheduledConfig<span class="token punctuation">.</span><span class="token function">getRunnable</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ThreadPoolTaskScheduler</span> taskScheduler <span class="token operator">=</span> superScheduledConfig<span class="token punctuation">.</span><span class="token function">getTaskScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token class-name">ScheduledFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> schedule <span class="token operator">=</span> <span class="token class-name">ScheduledFutureFactory</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>taskScheduler<span class="token punctuation">,</span> scheduledSource<span class="token punctuation">,</span> runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;任务&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;已经启动...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        superScheduledConfig<span class="token punctuation">.</span><span class="token function">addScheduledSource</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> scheduledSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
        superScheduledConfig<span class="token punctuation">.</span><span class="token function">addScheduledFuture</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> schedule<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 以cron类型启动Scheduled
     *
     * <span class="token keyword">@param</span> <span class="token parameter">name</span> scheduled的名称
     * <span class="token keyword">@param</span> <span class="token parameter">cron</span> cron表达式
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCronScheduled</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> cron<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ScheduledSource</span> scheduledSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScheduledSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scheduledSource<span class="token punctuation">.</span><span class="token function">setCron</span><span class="token punctuation">(</span>cron<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">addScheduled</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> scheduledSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 以fixedDelay类型启动Scheduled
     *
     * <span class="token keyword">@param</span> <span class="token parameter">name</span>         scheduled的名称
     * <span class="token keyword">@param</span> <span class="token parameter">fixedDelay</span>   上一次执行完毕时间点之后多长时间再执行
     * <span class="token keyword">@param</span> <span class="token parameter">initialDelay</span> 第一次执行的延迟时间
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFixedDelayScheduled</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Long</span> fixedDelay<span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> initialDelay<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ScheduledSource</span> scheduledSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScheduledSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scheduledSource<span class="token punctuation">.</span><span class="token function">setFixedDelay</span><span class="token punctuation">(</span>fixedDelay<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialDelay <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> initialDelay<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            scheduledSource<span class="token punctuation">.</span><span class="token function">setInitialDelay</span><span class="token punctuation">(</span>initialDelay<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>initialDelay <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> initialDelay<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SuperScheduledException</span><span class="token punctuation">(</span><span class="token string">&quot;第一次执行的延迟时间只能传入一个参数&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token function">addScheduled</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> scheduledSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 以fixedRate类型启动Scheduled
     *
     * <span class="token keyword">@param</span> <span class="token parameter">name</span>         scheduled的名称
     * <span class="token keyword">@param</span> <span class="token parameter">fixedRate</span>    上一次开始执行之后多长时间再执行
     * <span class="token keyword">@param</span> <span class="token parameter">initialDelay</span> 第一次执行的延迟时间
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFixedRateScheduled</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Long</span> fixedRate<span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> initialDelay<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ScheduledSource</span> scheduledSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScheduledSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scheduledSource<span class="token punctuation">.</span><span class="token function">setFixedRate</span><span class="token punctuation">(</span>fixedRate<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialDelay <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> initialDelay<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            scheduledSource<span class="token punctuation">.</span><span class="token function">setInitialDelay</span><span class="token punctuation">(</span>initialDelay<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>initialDelay <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> initialDelay<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SuperScheduledException</span><span class="token punctuation">(</span><span class="token string">&quot;第一次执行的延迟时间只能传入一个参数&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token function">addScheduled</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> scheduledSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 手动执行一次任务
     *
     * <span class="token keyword">@param</span> <span class="token parameter">name</span> scheduled的名称
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">runScheduled</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Runnable</span> runnable <span class="token operator">=</span> superScheduledConfig<span class="token punctuation">.</span><span class="token function">getRunnable</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        runnable<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、增强接口实现" tabindex="-1"><a class="header-anchor" href="#_2、增强接口实现"><span>2、增强接口实现</span></a></h3><p>增强器实现的整体思路与 SpringAop 的思路一致，实现没有 Aop 复杂</p><h4 id="_1-增强接口" tabindex="-1"><a class="header-anchor" href="#_1-增强接口"><span>(1) 增强接口</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token class-name">Ordered</span><span class="token punctuation">.</span><span class="token constant">HIGHEST_PRECEDENCE</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BaseStrengthen</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 前置强化方法
     *
     * <span class="token keyword">@param</span> <span class="token parameter">bean</span>   bean实例（或者是被代理的bean）
     * <span class="token keyword">@param</span> <span class="token parameter">method</span> 执行的方法对象
     * <span class="token keyword">@param</span> <span class="token parameter">args</span>   方法参数
     */</span>
    <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 后置强化方法
     * 出现异常不会执行
     * 如果未出现异常，在afterFinally方法之后执行
     *
     * <span class="token keyword">@param</span> <span class="token parameter">bean</span>   bean实例（或者是被代理的bean）
     * <span class="token keyword">@param</span> <span class="token parameter">method</span> 执行的方法对象
     * <span class="token keyword">@param</span> <span class="token parameter">args</span>   方法参数
     */</span>
    <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 异常强化方法
     *
     * <span class="token keyword">@param</span> <span class="token parameter">bean</span>   bean实例（或者是被代理的bean）
     * <span class="token keyword">@param</span> <span class="token parameter">method</span> 执行的方法对象
     * <span class="token keyword">@param</span> <span class="token parameter">args</span>   方法参数
     */</span>
    <span class="token keyword">void</span> <span class="token function">exception</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * Finally强化方法，出现异常也会执行
     *
     * <span class="token keyword">@param</span> <span class="token parameter">bean</span>   bean实例（或者是被代理的bean）
     * <span class="token keyword">@param</span> <span class="token parameter">method</span> 执行的方法对象
     * <span class="token keyword">@param</span> <span class="token parameter">args</span>   方法参数
     */</span>
    <span class="token keyword">void</span> <span class="token function">afterFinally</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-代理抽象类" tabindex="-1"><a class="header-anchor" href="#_2-代理抽象类"><span>(2) 代理抽象类</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 定时任务名
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> superScheduledName<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 抽象的执行方法，使用代理实现
     * <span class="token keyword">@param</span> <span class="token parameter">runnable</span> 定时任务执行器
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">SuperScheduledRunnable</span> runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">/* 普通的get/sets省略 */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-调用链类" tabindex="-1"><a class="header-anchor" href="#_3-调用链类"><span>(3) 调用链类</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Chain</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 索引自增1
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">incIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">++</span>index<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 索引还原
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">resetIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-cglib-动态代理实现" tabindex="-1"><a class="header-anchor" href="#_4-cglib-动态代理实现"><span>(4) cglib 动态代理实现</span></a></h4><p>使用 cglib 代理增强器，将增强器全部代理成调用链节点 Point</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RunnableBaseInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 定时任务执行器
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">SuperScheduledRunnable</span> runnable<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 定时任务增强类
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">BaseStrengthen</span> strengthen<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token class-name">Object</span> result<span class="token punctuation">;</span>
        <span class="token comment">//如果执行的是invoke()方法</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;invoke&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token comment">//前置强化方法</span>
            strengthen<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
             <span class="token comment">//调用执行器中的invoke()方法</span>
                result <span class="token operator">=</span> runnable<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token comment">//异常强化方法</span>
                strengthen<span class="token punctuation">.</span><span class="token function">exception</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SuperScheduledException</span><span class="token punctuation">(</span>strengthen<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;中强化执行时发生错误&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
             <span class="token comment">//Finally强化方法，出现异常也会执行</span>
                strengthen<span class="token punctuation">.</span><span class="token function">afterFinally</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//后置强化方法</span>
            strengthen<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
         <span class="token comment">//直接执行方法</span>
            result <span class="token operator">=</span> methodProxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">RunnableBaseInterceptor</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">,</span> <span class="token class-name">SuperScheduledRunnable</span> runnable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>runnable <span class="token operator">=</span> runnable<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">BaseStrengthen</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>strengthen <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">BaseStrengthen</span><span class="token punctuation">)</span> object<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SuperScheduledException</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;对象不是BaseStrengthen类型&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">RunnableBaseInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-定时任务执行器实现" tabindex="-1"><a class="header-anchor" href="#_5-定时任务执行器实现"><span>(5) 定时任务执行器实现</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperScheduledRunnable</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 原始的方法
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Method</span> method<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 方法所在的bean
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Object</span> bean<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 增强器的调用链
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Chain</span> chain<span class="token punctuation">;</span>


    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Object</span> result<span class="token punctuation">;</span>
        <span class="token comment">//索引自增1</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>chain<span class="token punctuation">.</span><span class="token function">incIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> chain<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//调用链中的增强方法已经全部执行结束</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">//调用链索引初始化</span>
                chain<span class="token punctuation">.</span><span class="token function">resetIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//增强器全部执行完毕，执行原本的方法</span>
                result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> <span class="token operator">|</span> <span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SuperScheduledException</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getLocalizedMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">//获取被代理后的方法增强器</span>
            <span class="token class-name">Point</span> point <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>chain<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//执行增强器代理</span>
            <span class="token comment">//增强器代理中，会回调方法执行器，形成调用链，逐一运行调用链中的增强器</span>
            result <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">/* 普通的get/sets省略 */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-增强器代理逻辑" tabindex="-1"><a class="header-anchor" href="#_6-增强器代理逻辑"><span>(6) 增强器代理逻辑</span></a></h4><p>com.gyx.superscheduled.core.SuperScheduledApplicationRunner 类中的代码片段</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//创建执行控制器</span>
<span class="token class-name">SuperScheduledRunnable</span> runnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperScheduledRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
runnable<span class="token punctuation">.</span><span class="token function">setMethod</span><span class="token punctuation">(</span>scheduledSource<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
runnable<span class="token punctuation">.</span><span class="token function">setBean</span><span class="token punctuation">(</span>scheduledSource<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//用来存放 增强器的代理对象</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">&gt;</span></span> points <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>baseStrengthenBeanNames<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//循环所有的增强器的beanName</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> baseStrengthenBeanName <span class="token operator">:</span> baseStrengthenBeanNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token comment">//获取增强器的bean对象</span>
    <span class="token class-name">Object</span> baseStrengthenBean <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>baseStrengthenBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//将增强器代理成Point节点</span>
    <span class="token class-name">Point</span> proxy <span class="token operator">=</span> <span class="token class-name">ProxyUtils</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">Point</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RunnableBaseInterceptor</span><span class="token punctuation">(</span>baseStrengthenBean<span class="token punctuation">,</span> runnable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    proxy<span class="token punctuation">.</span><span class="token function">setSuperScheduledName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//增强器的代理对象缓存到list中</span>
    points<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//将增强器代理实例的集合生成调用链</span>
<span class="token comment">//执行控制器中设置调用链</span>
runnable<span class="token punctuation">.</span><span class="token function">setChain</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Chain</span><span class="token punctuation">(</span>points<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30);function m(v,b){const a=c("ExternalLinkIcon");return o(),l("div",null,[u,s("p",null,[n("使用方法和源码： 码云："),s("a",k,[n("https://gitee.com/qiaodaimadewangcai/super-scheduled"),e(a)]),n(" github："),s("a",d,[n("https://github.com/guoyixing/super-scheduled"),e(a)])]),r])}const S=p(i,[["render",m],["__file","SpringBoot定时任务动态管理通用解决方案.html.vue"]]),y=JSON.parse('{"path":"/dev/SpringBoot%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%8A%A8%E6%80%81%E7%AE%A1%E7%90%86%E9%80%9A%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html","title":"SpringBoot定时任务动态管理通用解决方案","lang":"zh-CN","frontmatter":{"author":"xlc520","title":"SpringBoot定时任务动态管理通用解决方案","excerpt":null,"description":"SpringBoot 定时任务动态管理通用解决方案 一、功能说明 SpringBoot 的定时任务的加强工具，实现对 SpringBoot 原生的定时任务进行动态管理,完全兼容原生@Scheduled 注解,无需对原本的定时任务进行修改 二、快速使用 具体的功能已经封装成 SpringBoot-starter 即插即用 使用方法和源码： 码云：http...","date":"2022-05-25T00:00:00.000Z","category":"Java","tag":"Java","article":true,"timeline":true,"icon":"java","head":[["meta",{"property":"og:url","content":"https://blog.ciberviler.top/dev/SpringBoot%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%8A%A8%E6%80%81%E7%AE%A1%E7%90%86%E9%80%9A%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html"}],["meta",{"property":"og:site_name","content":"StudyNote"}],["meta",{"property":"og:title","content":"SpringBoot定时任务动态管理通用解决方案"}],["meta",{"property":"og:description","content":"SpringBoot 定时任务动态管理通用解决方案 一、功能说明 SpringBoot 的定时任务的加强工具，实现对 SpringBoot 原生的定时任务进行动态管理,完全兼容原生@Scheduled 注解,无需对原本的定时任务进行修改 二、快速使用 具体的功能已经封装成 SpringBoot-starter 即插即用 使用方法和源码： 码云：http..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://bitbucket.org/xlc520/blogasset/raw/main/images3/image-20220524212320260.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-27T13:32:36.000Z"}],["meta",{"property":"article:author","content":"xlc520"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2022-05-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-27T13:32:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringBoot定时任务动态管理通用解决方案\\",\\"image\\":[\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/image-20220524212320260.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/image-20220524212339560.png\\"],\\"datePublished\\":\\"2022-05-25T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-27T13:32:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xlc520\\"}]}"]]},"headers":[{"level":2,"title":"一、功能说明","slug":"一、功能说明","link":"#一、功能说明","children":[]},{"level":2,"title":"二、快速使用","slug":"二、快速使用","link":"#二、快速使用","children":[]},{"level":2,"title":"三、实现原理","slug":"三、实现原理","link":"#三、实现原理","children":[{"level":3,"title":"1、动态管理实现","slug":"_1、动态管理实现","link":"#_1、动态管理实现","children":[]},{"level":3,"title":"2、增强接口实现","slug":"_2、增强接口实现","link":"#_2、增强接口实现","children":[]}]}],"git":{"createdTime":1647698494000,"updatedTime":1714224756000,"contributors":[{"name":"xlc520","email":"2215400217@qq.com","commits":6},{"name":"xlc","email":"2215400217@qq.com","commits":2}]},"readingTime":{"minutes":9.58,"words":2874},"filePathRelative":"dev/SpringBoot定时任务动态管理通用解决方案.md","localizedDate":"2022年5月25日","autoDesc":true}');export{S as comp,y as data};
