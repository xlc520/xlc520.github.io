const n=JSON.parse('{"key":"v-60d5c536","path":"/dev/Java8%E5%A4%9A%E7%BA%BF%E7%A8%8BCompletableFuture.html","title":"Java8多线程CompletableFuture","lang":"zh-CN","frontmatter":{"author":"xlc520","title":"Java8多线程CompletableFuture","description":"Java8多线程CompletableFuture 日常开发中，我们都会用到线程池，一般会用execute()和submit()方法提交任务。但是当你用过CompletableFuture之后，就会发现以前的线程池处理任务有多难用，功能有多简陋，CompletableFuture又是多么简洁优雅。 要知道CompletableFuture已经随着Java8发布7年了，还没有过它就有点说不过去了。 今天5分钟带你深入浅出CompletableFuture实用教程。 1. 使用线程池处理任务 /** * @author yideng * @apiNote 线程池使用示例 */ public class ThreadDemo { public static void main(String[] args) { // 1. 创建线程池 ExecutorService executorService = Executors.newFixedThreadPool(3); List&lt;Integer&gt; list = Arrays.asList(1, 2, 3); List&lt;Future&lt;String&gt;&gt; futures = new ArrayList&lt;&gt;(); for (Integer key : list) { // 2. 提交任务 Future&lt;String&gt; future = executorService.submit(() -&gt; { // 睡眠一秒，模仿处理过程 Thread.sleep(1000L); return \\"结果\\" + key; }); futures.add(future); } // 3. 获取结果 for (Future&lt;String&gt; future : futures) { try { String result = future.get(); System.out.println(result); } catch (Exception e) { e.printStackTrace(); } } executorService.shutdown(); } }","date":"2022-09-03T00:00:00.000Z","category":"Java","tag":"Java","article":true,"timeline":true,"icon":"java","head":[["meta",{"property":"og:url","content":"https://blog.ciberviler.top/dev/Java8%E5%A4%9A%E7%BA%BF%E7%A8%8BCompletableFuture.html"}],["meta",{"property":"og:site_name","content":"StudyNote"}],["meta",{"property":"og:title","content":"Java8多线程CompletableFuture"}],["meta",{"property":"og:description","content":"Java8多线程CompletableFuture 日常开发中，我们都会用到线程池，一般会用execute()和submit()方法提交任务。但是当你用过CompletableFuture之后，就会发现以前的线程池处理任务有多难用，功能有多简陋，CompletableFuture又是多么简洁优雅。 要知道CompletableFuture已经随着Java8发布7年了，还没有过它就有点说不过去了。 今天5分钟带你深入浅出CompletableFuture实用教程。 1. 使用线程池处理任务 /** * @author yideng * @apiNote 线程池使用示例 */ public class ThreadDemo { public static void main(String[] args) { // 1. 创建线程池 ExecutorService executorService = Executors.newFixedThreadPool(3); List&lt;Integer&gt; list = Arrays.asList(1, 2, 3); List&lt;Future&lt;String&gt;&gt; futures = new ArrayList&lt;&gt;(); for (Integer key : list) { // 2. 提交任务 Future&lt;String&gt; future = executorService.submit(() -&gt; { // 睡眠一秒，模仿处理过程 Thread.sleep(1000L); return \\"结果\\" + key; }); futures.add(future); } // 3. 获取结果 for (Future&lt;String&gt; future : futures) { try { String result = future.get(); System.out.println(result); } catch (Exception e) { e.printStackTrace(); } } executorService.shutdown(); } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-15T09:41:05.000Z"}],["meta",{"property":"article:author","content":"xlc520"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2022-09-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-15T09:41:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java8多线程CompletableFuture\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-09-03T00:00:00.000Z\\",\\"dateModified\\":\\"2023-03-15T09:41:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xlc520\\"}]}"]]},"headers":[{"level":2,"title":"1. 使用线程池处理任务","slug":"_1-使用线程池处理任务","link":"#_1-使用线程池处理任务","children":[]},{"level":2,"title":"2. 使用CompletableFuture重构任务处理","slug":"_2-使用completablefuture重构任务处理","link":"#_2-使用completablefuture重构任务处理","children":[]},{"level":2,"title":"3. CompletableFuture更多妙用","slug":"_3-completablefuture更多妙用","link":"#_3-completablefuture更多妙用","children":[{"level":3,"title":"3.1 等待所有任务执行完成","slug":"_3-1-等待所有任务执行完成","link":"#_3-1-等待所有任务执行完成","children":[]},{"level":3,"title":"3.2 任何一个任务处理完成就返回","slug":"_3-2-任何一个任务处理完成就返回","link":"#_3-2-任何一个任务处理完成就返回","children":[]},{"level":3,"title":"3.3 一个线程执行完成，交给另一个线程接着执行","slug":"_3-3-一个线程执行完成-交给另一个线程接着执行","link":"#_3-3-一个线程执行完成-交给另一个线程接着执行","children":[]}]},{"level":2,"title":"4. CompletableFuture常用API","slug":"_4-completablefuture常用api","link":"#_4-completablefuture常用api","children":[{"level":3,"title":"4.1 CompletableFuture常用API说明","slug":"_4-1-completablefuture常用api说明","link":"#_4-1-completablefuture常用api说明","children":[]},{"level":3,"title":"4. CompletableFuture常用API使用示例","slug":"_4-completablefuture常用api使用示例","link":"#_4-completablefuture常用api使用示例","children":[]},{"level":3,"title":"4.1 then、handle方法使用示例","slug":"_4-1-then、handle方法使用示例","link":"#_4-1-then、handle方法使用示例","children":[]},{"level":3,"title":"4.2 complete方法使用示例","slug":"_4-2-complete方法使用示例","link":"#_4-2-complete方法使用示例","children":[]},{"level":3,"title":"4.3 either方法使用示例","slug":"_4-3-either方法使用示例","link":"#_4-3-either方法使用示例","children":[]}]}],"git":{"createdTime":1668948234000,"updatedTime":1678873265000,"contributors":[{"name":"xlc520","email":"2215400217@qq.com","commits":2}]},"readingTime":{"minutes":8.13,"words":2438},"filePathRelative":"dev/Java8多线程CompletableFuture.md","localizedDate":"2022年9月3日","excerpt":"<h1> Java8多线程CompletableFuture</h1>\\n<p>日常开发中，我们都会用到线程池，一般会用execute()和submit()方法提交任务。但是当你用过CompletableFuture之后，就会发现以前的线程池处理任务有多难用，功能有多简陋，CompletableFuture又是多么简洁优雅。</p>\\n<p>要知道CompletableFuture已经随着Java8发布7年了，还没有过它就有点说不过去了。<br>\\n今天5分钟带你深入浅出CompletableFuture实用教程。</p>\\n<h2> 1. 使用线程池处理任务</h2>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code>    <span class=\\"token doc-comment comment\\">/**\\n     * <span class=\\"token keyword\\">@author</span> yideng\\n     * <span class=\\"token keyword\\">@apiNote</span> 线程池使用示例\\n     */</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">ThreadDemo</span> <span class=\\"token punctuation\\">{</span>\\n    \\n        <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> args<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token comment\\">// 1. 创建线程池</span>\\n            <span class=\\"token class-name\\">ExecutorService</span> executorService <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Executors</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">newFixedThreadPool</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            \\n            <span class=\\"token class-name\\">List</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">&gt;</span></span> list <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Arrays</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">asList</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\">List</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Future</span><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">&gt;</span><span class=\\"token punctuation\\">&gt;</span></span> futures <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ArrayList</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Integer</span> key <span class=\\"token operator\\">:</span> list<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token comment\\">// 2. 提交任务</span>\\n                <span class=\\"token class-name\\">Future</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">&gt;</span></span> future <span class=\\"token operator\\">=</span> executorService<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">submit</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-&gt;</span> <span class=\\"token punctuation\\">{</span>\\n                    <span class=\\"token comment\\">// 睡眠一秒，模仿处理过程</span>\\n                    <span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">sleep</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1000L</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    <span class=\\"token keyword\\">return</span> <span class=\\"token string\\">\\"结果\\"</span> <span class=\\"token operator\\">+</span> key<span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                futures<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span>future<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n    \\n            <span class=\\"token comment\\">// 3. 获取结果</span>\\n            <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Future</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">&gt;</span></span> future <span class=\\"token operator\\">:</span> futures<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n                    <span class=\\"token class-name\\">String</span> result <span class=\\"token operator\\">=</span> future<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>result<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Exception</span> e<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                    e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">printStackTrace</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token punctuation\\">}</span>\\n            executorService<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">shutdown</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    \\n    <span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
