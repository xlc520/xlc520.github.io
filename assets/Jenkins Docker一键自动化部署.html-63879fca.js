import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o as s,c as o,b as e,d as a,e as r,a as n}from"./app-41defce9.js";const c={},l=n(`<h1 id="jenkins-docker一键自动化部署" tabindex="-1"><a class="header-anchor" href="#jenkins-docker一键自动化部署" aria-hidden="true">#</a> Jenkins Docker一键自动化部署</h1><ul><li>环境：CentOS7 + Git (Gitee)</li><li>实现步骤：在 Docker 安装 Jenkins，配置 Jenkins 基本信息，利用 Dockerfile 和 Shell 脚本实现项目自动拉取打包并运行。</li></ul><h2 id="一、安装-docker" tabindex="-1"><a class="header-anchor" href="#一、安装-docker" aria-hidden="true">#</a> <strong>一、安装 Docker</strong></h2><p>安装社区版本 Docker CE</p><h3 id="_1-确保-yum-包更新到最新" tabindex="-1"><a class="header-anchor" href="#_1-确保-yum-包更新到最新" aria-hidden="true">#</a> <strong>1. 确保 yum 包更新到最新</strong></h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yum update
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-卸载旧版本-如果安装过旧版本的话" tabindex="-1"><a class="header-anchor" href="#_2-卸载旧版本-如果安装过旧版本的话" aria-hidden="true">#</a> <strong>2. 卸载旧版本（如果安装过旧版本的话）</strong></h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yum remove docker  docker-common docker-selinux docker-engine
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-安装需要的软件包" tabindex="-1"><a class="header-anchor" href="#_3-安装需要的软件包" aria-hidden="true">#</a> <strong>3. 安装需要的软件包</strong></h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yum install -y yum-utils device-mapper-persistent-data lvm2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-设置-yum-源" tabindex="-1"><a class="header-anchor" href="#_4-设置-yum-源" aria-hidden="true">#</a> <strong>4. 设置 yum 源</strong></h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-安装-docker" tabindex="-1"><a class="header-anchor" href="#_5-安装-docker" aria-hidden="true">#</a> <strong>5. 安装 Docker</strong></h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yum install docker-ce  #由于repo中默认只开启stable仓库，故这里安装的是最新稳定版17.12.0yum install &lt;自己的版本&gt;  # 例如：sudo yum install docker-ce-17.12.0.ce

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-启动并设置开机启动" tabindex="-1"><a class="header-anchor" href="#_6-启动并设置开机启动" aria-hidden="true">#</a> <strong>6. 启动并设置开机启动</strong></h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>systemctl start dockersystemctl enable docker

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-验证安装是否成功" tabindex="-1"><a class="header-anchor" href="#_7-验证安装是否成功" aria-hidden="true">#</a> <strong>7. 验证安装是否成功</strong></h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker version

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、安装-jenkins" tabindex="-1"><a class="header-anchor" href="#二、安装-jenkins" aria-hidden="true">#</a> <strong>二、安装 Jenkins</strong></h2>`,19),h={href:"https://www.jenkins.io/zh/",target:"_blank",rel:"noopener noreferrer"},g=n(`<h3 id="_1-安装-jenkins" tabindex="-1"><a class="header-anchor" href="#_1-安装-jenkins" aria-hidden="true">#</a> <strong>1. 安装 Jenkins</strong></h3><p>Docker 安装一切都是那么简单。注意检查 8080 是否已经占用，如果占用请修改端口。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker run --name jenkins -u root --rm -d -p 8080:8080 -p 50000:50000 -v /var/jenkins_home:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock jenkinsci/blueocean
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果没改端口号的话，安装完成后访问地址：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://{部署Jenkins所在服务IP}:8080
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此处会有几分钟的等待时间。</p><h3 id="_2-初始化-jenkins" tabindex="-1"><a class="header-anchor" href="#_2-初始化-jenkins" aria-hidden="true">#</a> <strong>2. 初始化 Jenkins</strong></h3>`,7),u={href:"https://www.jenkins.io/zh/doc",target:"_blank",rel:"noopener noreferrer"},p=n(`<h4 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h4><h4 id="_2-1-解锁-jenkins" tabindex="-1"><a class="header-anchor" href="#_2-1-解锁-jenkins" aria-hidden="true">#</a> <strong>2.1 解锁 Jenkins</strong></h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 进入Jenkins容器docker exec -it {Jenkins容器名} bash  # 例如 docker exec -it jenkins bash
# 查看密码cat /var/lib/jenkins/secrets/initialAdminPassword
# 复制密码到输入框里面
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://static.linch.eu.org/blogImage/640-1667833096704-0.png" alt="Jenkins+Docker" tabindex="0" loading="lazy"><figcaption>Jenkins+Docker</figcaption></figure><h4 id="_2-2-安装插件" tabindex="-1"><a class="header-anchor" href="#_2-2-安装插件" aria-hidden="true">#</a> <strong>2.2 安装插件</strong></h4><p>选择第一项：<strong>安装推荐的插件</strong>。</p><figure><img src="https://static.linch.eu.org/blogImage/640-1667833096704-1.png" alt="Jenkins+Docker" tabindex="0" loading="lazy"><figcaption>Jenkins+Docker</figcaption></figure><h4 id="_2-3-创建管理员用户" tabindex="-1"><a class="header-anchor" href="#_2-3-创建管理员用户" aria-hidden="true">#</a> <strong>2.3 创建管理员用户</strong></h4><p>此账户信息一定要记住哦。</p><h2 id="三、系统配置" tabindex="-1"><a class="header-anchor" href="#三、系统配置" aria-hidden="true">#</a> <strong>三、系统配置</strong></h2><h3 id="_1-安装需要插件" tabindex="-1"><a class="header-anchor" href="#_1-安装需要插件" aria-hidden="true">#</a> <strong>1. 安装需要插件</strong></h3><p>进入【首页】–【系统管理】–【插件管理】–【可选插件】。搜索以下需要安装的插件，点击安装即可。</p><figure><img src="https://static.linch.eu.org/blogImage/640-1667833096704-2.png" alt="Jenkins+Docker" tabindex="0" loading="lazy"><figcaption>Jenkins+Docker</figcaption></figure><ul><li>安装 Maven Integration</li><li>安装 Publish Over SSH（如果不需要远程推送，不用安装）</li><li>如果使用 Gitee 码云，安装插件Gitee（自带 Git 不用单独安装）</li></ul><h3 id="_2-配置-maven" tabindex="-1"><a class="header-anchor" href="#_2-配置-maven" aria-hidden="true">#</a> <strong>2. 配置 Maven</strong></h3><p>进入【首页】–【系统管理】–【全局配置】，拉到页面最下方 maven–maven 安装。</p><figure><img src="https://static.linch.eu.org/blogImage/640-1667833096704-3.png" alt="Jenkins+Docker" tabindex="0" loading="lazy"><figcaption>Jenkins+Docker</figcaption></figure><h2 id="-1" tabindex="-1"><a class="header-anchor" href="#-1" aria-hidden="true">#</a></h2><h2 id="四、创建任务" tabindex="-1"><a class="header-anchor" href="#四、创建任务" aria-hidden="true">#</a> <strong>四、创建任务</strong></h2><h3 id="_1-新建任务" tabindex="-1"><a class="header-anchor" href="#_1-新建任务" aria-hidden="true">#</a> <strong>1. 新建任务</strong></h3><p>点击【新建任务】，输入任务名称，点击构建一个自由风格的软件项目。</p><figure><img src="https://static.linch.eu.org/blogImage/640-1667833096704-4.png" alt="Jenkins+Docker" tabindex="0" loading="lazy"><figcaption>Jenkins+Docker</figcaption></figure><h3 id="-2" tabindex="-1"><a class="header-anchor" href="#-2" aria-hidden="true">#</a></h3><h3 id="_2-源码管理" tabindex="-1"><a class="header-anchor" href="#_2-源码管理" aria-hidden="true">#</a> <strong>2. 源码管理</strong></h3><p>点击源码管理】–【Git】，输入仓库地址，添加凭证，选择好凭证即可。</p><figure><img src="https://static.linch.eu.org/blogImage/640-1667833096704-5.png" alt="Jenkins+Docker" tabindex="0" loading="lazy"><figcaption>Jenkins+Docker</figcaption></figure><figure><img src="https://static.linch.eu.org/blogImage/640-1667833096705-6.png" alt="Jenkins+Docker" tabindex="0" loading="lazy"><figcaption>Jenkins+Docker</figcaption></figure><h3 id="-3" tabindex="-1"><a class="header-anchor" href="#-3" aria-hidden="true">#</a></h3><h3 id="_3-构建触发器" tabindex="-1"><a class="header-anchor" href="#_3-构建触发器" aria-hidden="true">#</a> <strong>3. 构建触发器</strong></h3><p>点击【构建触发器】–【构建】–【增加构建步骤】–【调用顶层 Maven 目标】–【「填写配置」】–【保存】。</p><figure><img src="https://static.linch.eu.org/blogImage/640-1667833096705-7.png" alt="Jenkins+Docker" tabindex="0" loading="lazy"><figcaption>Jenkins+Docker</figcaption></figure><p>此处命令只是 install，看是否能生成 jar 包。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>clean install -Dmaven.test.skip=true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://static.linch.eu.org/blogImage/640-1667833096705-8.png" alt="Jenkins+Docker" tabindex="0" loading="lazy"><figcaption>Jenkins+Docker</figcaption></figure><h3 id="_4-保存" tabindex="-1"><a class="header-anchor" href="#_4-保存" aria-hidden="true">#</a> <strong>4. 保存</strong></h3><p>点击【保存】按钮即可。</p><h2 id="五、测试" tabindex="-1"><a class="header-anchor" href="#五、测试" aria-hidden="true">#</a> <strong>五、测试</strong></h2><p>该功能测试是否能正常打包。</p><h3 id="_1-构建" tabindex="-1"><a class="header-anchor" href="#_1-构建" aria-hidden="true">#</a> <strong>1. 构建</strong></h3><p>点击构建按钮。</p><figure><img src="https://static.linch.eu.org/blogImage/640-1667833096706-9.png" alt="Jenkins+Docker" tabindex="0" loading="lazy"><figcaption>Jenkins+Docker</figcaption></figure><h3 id="-4" tabindex="-1"><a class="header-anchor" href="#-4" aria-hidden="true">#</a></h3><h3 id="_2-查看日志" tabindex="-1"><a class="header-anchor" href="#_2-查看日志" aria-hidden="true">#</a> <strong>2. 查看日志</strong></h3><p>点击正在构建的任务，或者点击任务名称进入详情页面，查看控制台输出。看是否能成功打成 jar 包。</p><p>该处日志第一次可能下载依赖 jar 包失败，再次点击构建即可成功。</p><figure><img src="https://static.linch.eu.org/blogImage/640-1667833096706-9.png" alt="Jenkins+Docker" tabindex="0" loading="lazy"><figcaption>Jenkins+Docker</figcaption></figure><figure><img src="https://static.linch.eu.org/blogImage/640-1667833096706-10.png" alt="Jenkins+Docker" tabindex="0" loading="lazy"><figcaption>Jenkins+Docker</figcaption></figure><figure><img src="https://static.linch.eu.org/blogImage/640-1667833096706-11.png" alt="Jenkins+Docker" tabindex="0" loading="lazy"><figcaption>Jenkins+Docker</figcaption></figure><h3 id="-5" tabindex="-1"><a class="header-anchor" href="#-5" aria-hidden="true">#</a></h3><h3 id="_3-查看项目位置" tabindex="-1"><a class="header-anchor" href="#_3-查看项目位置" aria-hidden="true">#</a> <strong>3. 查看项目位置</strong></h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>cd /var/jenkins_home/workspacell # 即可查看是否存在
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="六、运行项目" tabindex="-1"><a class="header-anchor" href="#六、运行项目" aria-hidden="true">#</a> <strong>六、运行项目</strong></h2><p>因为项目和 Jenkins 在同一台服务器，所以我们用 Shell 脚本运行项目，原理既是通过 Dockerfile 打包镜像，然后 docker 运行即可。</p><h3 id="_1-dockerfile" tabindex="-1"><a class="header-anchor" href="#_1-dockerfile" aria-hidden="true">#</a> <strong>1. Dockerfile</strong></h3><p>在 Spring Boot 项目根目录新建一个名为 Dockerfile 的文件，注意没有后缀名。</p><p>其内容如下：（大致就是使用 JDK 8，把 jar 包添加到 docker 然后运行 prd 配置文件。详细可以查看其他教程）</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>FROM jdk:8VOLUME /tmpADD target/zx-order-0.0.1-SNAPSHOT.jar app.jarEXPOSE 8888ENTRYPOINT [&quot;java&quot;,&quot;-Djava.security.egd=file:/dev/./urandom&quot;,&quot;-jar&quot;,&quot;/app.jar&quot;,&quot;--spring.profiles.active=prd&quot;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="-6" tabindex="-1"><a class="header-anchor" href="#-6" aria-hidden="true">#</a></h3><h3 id="_2-修改-jenkins-任务配置" tabindex="-1"><a class="header-anchor" href="#_2-修改-jenkins-任务配置" aria-hidden="true">#</a> <strong>2. 修改 Jenkins 任务配置</strong></h3><figure><img src="https://static.linch.eu.org/blogImage/640-1667833096706-12.png" alt="Jenkins+Docker" tabindex="0" loading="lazy"><figcaption>Jenkins+Docker</figcaption></figure><p>配置如下：</p><figure><img src="https://static.linch.eu.org/blogImage/640-1667833096707-13.png" alt="Jenkins+Docker" tabindex="0" loading="lazy"><figcaption>Jenkins+Docker</figcaption></figure><p>&quot;-t&quot; 指定新镜像名，&quot;.&quot; 表示 Dockfile 在当前路径。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>cd /var/jenkins_home/workspace/zx-order-apidocker stop zx-order || truedocker rm zx-order || truedocker rmi zx-order || truedocker build -t zx-order .docker run -d -p 8888:8888 --name zx-order zx-order:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>备注：<br> \\1. 上图用了 docker logs -f 是为了方便看日志，真实环境不要用，因为会一直等待日志，构建任务会失败；<br> \\2. 加 &quot;|| true&quot; 是如果命令执行失败也会继续实行，为了防止第一次没有该镜像报错；</p><h3 id="_3-保存-点击保存即可" tabindex="-1"><a class="header-anchor" href="#_3-保存-点击保存即可" aria-hidden="true">#</a> 3. 保存：点击保存即可；</h3><h3 id="_4-构建-查看-jenkins-控制台输出-输出如下-证明成功" tabindex="-1"><a class="header-anchor" href="#_4-构建-查看-jenkins-控制台输出-输出如下-证明成功" aria-hidden="true">#</a> 4. 构建：查看 Jenkins 控制台输出，输出如下，证明成功；</h3><figure><img src="https://static.linch.eu.org/blogImage/640-1667833096707-14.png" alt="Jenkins+Docker" tabindex="0" loading="lazy"><figcaption>Jenkins+Docker</figcaption></figure><h3 id="_5-验证" tabindex="-1"><a class="header-anchor" href="#_5-验证" aria-hidden="true">#</a> 5. 验证</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker ps # 查看是否有自己的容器docker logs # 自己的容器名，查看日志是否正确# 打开浏览器访问项目

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,70);function k(m,b){const i=d("ExternalLinkIcon");return s(),o("div",null,[l,e("p",null,[a("Jenkins 中文官网："),e("a",h,[a("https://www.jenkins.io/zh/"),r(i)])]),g,e("p",null,[a("详情见官网教程："),e("a",u,[a("https://www.jenkins.io/zh/doc"),r(i)])]),p])}const f=t(c,[["render",k],["__file","Jenkins Docker一键自动化部署.html.vue"]]);export{f as default};
