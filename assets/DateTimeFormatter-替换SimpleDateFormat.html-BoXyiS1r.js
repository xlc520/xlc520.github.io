import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,a as t}from"./app-BkZy1zYI.js";const e={},p=t(`<h1 id="datetimeformatter-替换-simpledateformat" tabindex="-1"><a class="header-anchor" href="#datetimeformatter-替换-simpledateformat"><span>DateTimeFormatter-替换 SimpleDateFormat</span></a></h1><p>我们先来看看 SImpleDateFormat 类的部分源码，如图 1 所示。</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/20210502205438290.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>图 1</p><p>接着再来看看 DateTimeFormatter 类的部分源码，如 图 2 所示。</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/20210502205459779.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>图 2</p><p>由上可知，与 SimpleDateFormat 不同的是，DateTimeFormatter 不但是不变对象，它还是线程安全的。线程的概念我们会在后面涉及到。</p><p>现在我们只需要记住：因为<strong>SimpleDateFormat 不是线程安全的</strong>，使用的时候，只能在方法内部创建新的局部变量。而* <em>DateTimeFormatter 可以只创建一个实例，到处引用</em>*。</p><p>接下来，我们来说一说 DateTimeFormatter 类的常用方法</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//创建一个格式化程序使用指定的模式</span>
<span class="token keyword">static</span> <span class="token class-name">DateTimeFormatter</span> <span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token class-name">String</span> pattern<span class="token punctuation">)</span> 
  
<span class="token comment">//创建一个格式化程序使用指定的模式和现场。</span>
<span class="token keyword">static</span> <span class="token class-name">DateTimeFormatter</span> <span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token class-name">String</span> pattern<span class="token punctuation">,</span> <span class="token class-name">Locale</span> locale<span class="token punctuation">)</span> 
 
<span class="token comment">//使用此格式化程序格式的日期时间对象</span>
<span class="token class-name">String</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">TemporalAccessor</span> temporal<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，TemporalAccessor 是一个接口，其实现类有 LocalDate、LocalTime、LocalDateTime、ZonedDateTime 等……</p><p>所以我们在使用 format 方法时，一般传入其实现类的实例化对象即可。</p><p>接下来我们举几个例子。</p><p>范例 1：创建 DateTimeFormatter</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">edu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>test07</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDateTime</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>format<span class="token punctuation">.</span></span><span class="token class-name">DateTimeFormatter</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateTimeFormatterTestDemo01</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//自定义输出格式</span>
        <span class="token class-name">DateTimeFormatter</span> dtf <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy/MM/dd HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dtf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;===================================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//自定义格式解析</span>
        <span class="token class-name">LocalDateTime</span> localDateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;2001/07/27 22:22:22&quot;</span><span class="token punctuation">,</span> dtf<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
结果：
2021/04/02 23:14:46
===================================
2001-07-27T22:22:22
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由上可知，<strong>DateTimeFormatter 类格式化字符串的使用方式与 SImpleDateFormat 一样</strong>。</p><p>此外，另一种创建 DateTimeFormatter 的方法是，传入格式化字符串的同时，同时指定<strong>Locale</strong>。</p><p>范例 2：按照 Locale 默认习惯格式化</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">edu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>test07</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">ZonedDateTime</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>format<span class="token punctuation">.</span></span><span class="token class-name">DateTimeFormatter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Locale</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateTimeFormatterTestDemo02</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ZonedDateTime</span> zonedDateTime <span class="token operator">=</span> <span class="token class-name">ZonedDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>zonedDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;==============================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">DateTimeFormatter</span> formatter01 <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ZZZZ&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>formatter01<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>zonedDateTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;==============================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">DateTimeFormatter</span> formatter02 <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy MMM dd EE:HH:mm&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">CHINA</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>formatter02<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>zonedDateTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;==============================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">DateTimeFormatter</span> formatter03 <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">&quot;E, MMMM/dd/yyyy HH:mm&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">US</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>formatter03<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>zonedDateTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
结果：
2021-04-02T23:27:59.326+08:00[Asia/Shanghai]
==============================
2021-04-02T23:27:GMT+08:00
==============================
2021 四月 02 星期五:23:27
==============================
Fri, April/02/2021 23:27
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行本程序，分别以默认方式、中国地区和美国地区对当前时间进行显示，结果如上所述。</p><p>在格式化字符串中，如果需要输出固定字符，可以用’xxx’表示。</p><p>当我们直接调用&quot;System.out.println()&quot; 对一个 ZonedDateTime 或者 LocalDateTime 实例进行打印的时候，实际上，调用的是它们的 toString()方法，<strong>默认的 toString() 方法显示的字符串就是按照 ISO 8601 格式显示的</strong>，我们可以通过 DateTimeFormatter 预定义的几个静态变量来引用。</p><p>范例 3：过 DateTimeFormatter 预定义静态变量</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">edu<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>test07</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDateTime</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>format<span class="token punctuation">.</span></span><span class="token class-name">DateTimeFormatter</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateTimeFormatterTestDemo03</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">LocalDateTime</span> localDateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token constant">ISO_DATE</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token constant">ISO_DATE_TIME</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
结果：
2021-04-02T23:38:11.707
2021-04-02
2021-04-02T23:38:11.707
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结：对 ZonedDateTime 或 LocalDateTime 进行格式化，需要使用 DateTimeFormatter 类，DateTimeFormatter 可以通过格式化字符串和 Locale 对日期和时间进行定制输出。</p>`,26),o=[p];function c(i,l){return a(),s("div",null,o)}const r=n(e,[["render",c],["__file","DateTimeFormatter-替换SimpleDateFormat.html.vue"]]),k=JSON.parse('{"path":"/dev/DateTimeFormatter-%E6%9B%BF%E6%8D%A2SimpleDateFormat.html","title":"DateTimeFormatter-替换SimpleDateFormat","lang":"zh-CN","frontmatter":{"author":"xlc520","title":"DateTimeFormatter-替换SimpleDateFormat","excerpt":null,"description":"DateTimeFormatter-替换 SimpleDateFormat 我们先来看看 SImpleDateFormat 类的部分源码，如图 1 所示。 imgimg 图 1 接着再来看看 DateTimeFormatter 类的部分源码，如 图 2 所示。 imgimg 图 2 由上可知，与 SimpleDateFormat 不同的是，DateTi...","date":"2022-08-12T00:00:00.000Z","category":"Java","tag":"Java","article":true,"timeline":true,"icon":"java","head":[["meta",{"property":"og:url","content":"https://blog.ciberviler.top/dev/DateTimeFormatter-%E6%9B%BF%E6%8D%A2SimpleDateFormat.html"}],["meta",{"property":"og:site_name","content":"StudyNote - 丰富的知识笔记库"}],["meta",{"property":"og:title","content":"DateTimeFormatter-替换SimpleDateFormat"}],["meta",{"property":"og:description","content":"DateTimeFormatter-替换 SimpleDateFormat 我们先来看看 SImpleDateFormat 类的部分源码，如图 1 所示。 imgimg 图 1 接着再来看看 DateTimeFormatter 类的部分源码，如 图 2 所示。 imgimg 图 2 由上可知，与 SimpleDateFormat 不同的是，DateTi..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://bitbucket.org/xlc520/blogasset/raw/main/images3/20210502205438290.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-27T13:32:36.000Z"}],["meta",{"property":"article:author","content":"xlc520"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2022-08-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-27T13:32:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"DateTimeFormatter-替换SimpleDateFormat\\",\\"image\\":[\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/20210502205438290.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/20210502205459779.png\\"],\\"datePublished\\":\\"2022-08-12T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-27T13:32:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xlc520\\"}]}"]]},"headers":[],"git":{"createdTime":1659939095000,"updatedTime":1714224756000,"contributors":[{"name":"xlc520","email":"2215400217@qq.com","commits":6},{"name":"xlc","email":"2215400217@qq.com","commits":2}]},"readingTime":{"minutes":2.59,"words":777},"filePathRelative":"dev/DateTimeFormatter-替换SimpleDateFormat.md","localizedDate":"2022年8月12日","autoDesc":true}');export{r as comp,k as data};
