const n=JSON.parse('{"key":"v-685b81d4","path":"/dev/%E6%90%9E%E5%AE%9ASpringBoot%E6%8E%A5%E5%8F%A3%E6%81%B6%E6%84%8F%E5%88%B7%E6%96%B0%E5%92%8C%E6%9A%B4%E5%8A%9B%E8%AF%B7%E6%B1%82.html","title":"搞定 SpringBoot 接口恶意刷新和暴力请求","lang":"zh-CN","frontmatter":{"author":"xlc520","title":"搞定 SpringBoot 接口恶意刷新和暴力请求","description":"搞定 SpringBoot 接口恶意刷新和暴力请求 在实际项目使用中，必须要考虑服务的安全性，当服务部署到互联网以后，就要考虑服务被恶意请求和暴力攻击的情况，下面的教程，通过intercept和redis针对url+ip在一定时间内访问的次数来将ip禁用，可以根据自己的需求进行相应的修改，来打打自己的目的； 首先工程为springboot框架搭建，不再详细叙述。 首先创建一个自定义的拦截器类，也是最核心的代码： /** * @package: com.technicalinterest.group.interceptor * @className: IpUrlLimitInterceptor * @description: ip+url重复请求现在拦截器 * @author: Shuyu.Wang * @since: 0.1 **/ @Slf4j public class IpUrlLimitInterceptor implements HandlerInterceptor { private RedisUtil getRedisUtil() { return SpringContextUtil.getBean(RedisUtil.class); } private static final String LOCK_IP_URL_KEY=\\"lock_ip_\\"; private static final String IP_URL_REQ_TIME=\\"ip_url_times_\\"; private static final long LIMIT_TIMES=5; private static final int IP_LOCK_TIME=60; @Override public boolean preHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o) throws Exception { log.info(\\"request请求地址uri={},ip={}\\", httpServletRequest.getRequestURI(), IpAdrressUtil.getIpAdrress(httpServletRequest)); if (ipIsLock(IpAdrressUtil.getIpAdrress(httpServletRequest))){ log.info(\\"ip访问被禁止={}\\",IpAdrressUtil.getIpAdrress(httpServletRequest)); ApiResult result = new ApiResult(ResultEnum.LOCK_IP); returnJson(httpServletResponse, JSON.toJSONString(result)); return false; } if(!addRequestTime(IpAdrressUtil.getIpAdrress(httpServletRequest),httpServletRequest.getRequestURI())){ ApiResult result = new ApiResult(ResultEnum.LOCK_IP); returnJson(httpServletResponse, JSON.toJSONString(result)); return false; } return true; } @Override public void postHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView) throws Exception { } @Override public void afterCompletion(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e) throws Exception { } /** * @Description: 判断ip是否被禁用 * @author: shuyu.wang * @date: 2019-10-12 13:08 * @param ip * @return java.lang.Boolean */ private Boolean ipIsLock(String ip){ RedisUtil redisUtil=getRedisUtil(); if(redisUtil.hasKey(LOCK_IP_URL_KEY+ip)){ return true; } return false; } /** * @Description: 记录请求次数 * @author: shuyu.wang * @date: 2019-10-12 17:18 * @param ip * @param uri * @return java.lang.Boolean */ private Boolean addRequestTime(String ip,String uri){ String key=IP_URL_REQ_TIME+ip+uri; RedisUtil redisUtil=getRedisUtil(); if (redisUtil.hasKey(key)){ long time=redisUtil.incr(key,(long)1); if (time&gt;=LIMIT_TIMES){ redisUtil.getLock(LOCK_IP_URL_KEY+ip,ip,IP_LOCK_TIME); return false; } }else { redisUtil.getLock(key,(long)1,1); } return true; } private void returnJson(HttpServletResponse response, String json) throws Exception { PrintWriter writer = null; response.setCharacterEncoding(\\"UTF-8\\"); response.setContentType(\\"text/json; charset=utf-8\\"); try { writer = response.getWriter(); writer.print(json); } catch (IOException e) { log.error(\\"LoginInterceptor response error ---&gt; {}\\", e.getMessage(), e); } finally { if (writer != null) { writer.close(); } } } }","date":"2022-06-05T00:00:00.000Z","category":"Java","tag":"Java","article":true,"timeline":true,"icon":"java","head":[["meta",{"property":"og:url","content":"https://blog.ciberviler.top/dev/%E6%90%9E%E5%AE%9ASpringBoot%E6%8E%A5%E5%8F%A3%E6%81%B6%E6%84%8F%E5%88%B7%E6%96%B0%E5%92%8C%E6%9A%B4%E5%8A%9B%E8%AF%B7%E6%B1%82.html"}],["meta",{"property":"og:site_name","content":"StudyNote"}],["meta",{"property":"og:title","content":"搞定 SpringBoot 接口恶意刷新和暴力请求"}],["meta",{"property":"og:description","content":"搞定 SpringBoot 接口恶意刷新和暴力请求 在实际项目使用中，必须要考虑服务的安全性，当服务部署到互联网以后，就要考虑服务被恶意请求和暴力攻击的情况，下面的教程，通过intercept和redis针对url+ip在一定时间内访问的次数来将ip禁用，可以根据自己的需求进行相应的修改，来打打自己的目的； 首先工程为springboot框架搭建，不再详细叙述。 首先创建一个自定义的拦截器类，也是最核心的代码： /** * @package: com.technicalinterest.group.interceptor * @className: IpUrlLimitInterceptor * @description: ip+url重复请求现在拦截器 * @author: Shuyu.Wang * @since: 0.1 **/ @Slf4j public class IpUrlLimitInterceptor implements HandlerInterceptor { private RedisUtil getRedisUtil() { return SpringContextUtil.getBean(RedisUtil.class); } private static final String LOCK_IP_URL_KEY=\\"lock_ip_\\"; private static final String IP_URL_REQ_TIME=\\"ip_url_times_\\"; private static final long LIMIT_TIMES=5; private static final int IP_LOCK_TIME=60; @Override public boolean preHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o) throws Exception { log.info(\\"request请求地址uri={},ip={}\\", httpServletRequest.getRequestURI(), IpAdrressUtil.getIpAdrress(httpServletRequest)); if (ipIsLock(IpAdrressUtil.getIpAdrress(httpServletRequest))){ log.info(\\"ip访问被禁止={}\\",IpAdrressUtil.getIpAdrress(httpServletRequest)); ApiResult result = new ApiResult(ResultEnum.LOCK_IP); returnJson(httpServletResponse, JSON.toJSONString(result)); return false; } if(!addRequestTime(IpAdrressUtil.getIpAdrress(httpServletRequest),httpServletRequest.getRequestURI())){ ApiResult result = new ApiResult(ResultEnum.LOCK_IP); returnJson(httpServletResponse, JSON.toJSONString(result)); return false; } return true; } @Override public void postHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView) throws Exception { } @Override public void afterCompletion(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e) throws Exception { } /** * @Description: 判断ip是否被禁用 * @author: shuyu.wang * @date: 2019-10-12 13:08 * @param ip * @return java.lang.Boolean */ private Boolean ipIsLock(String ip){ RedisUtil redisUtil=getRedisUtil(); if(redisUtil.hasKey(LOCK_IP_URL_KEY+ip)){ return true; } return false; } /** * @Description: 记录请求次数 * @author: shuyu.wang * @date: 2019-10-12 17:18 * @param ip * @param uri * @return java.lang.Boolean */ private Boolean addRequestTime(String ip,String uri){ String key=IP_URL_REQ_TIME+ip+uri; RedisUtil redisUtil=getRedisUtil(); if (redisUtil.hasKey(key)){ long time=redisUtil.incr(key,(long)1); if (time&gt;=LIMIT_TIMES){ redisUtil.getLock(LOCK_IP_URL_KEY+ip,ip,IP_LOCK_TIME); return false; } }else { redisUtil.getLock(key,(long)1,1); } return true; } private void returnJson(HttpServletResponse response, String json) throws Exception { PrintWriter writer = null; response.setCharacterEncoding(\\"UTF-8\\"); response.setContentType(\\"text/json; charset=utf-8\\"); try { writer = response.getWriter(); writer.print(json); } catch (IOException e) { log.error(\\"LoginInterceptor response error ---&gt; {}\\", e.getMessage(), e); } finally { if (writer != null) { writer.close(); } } } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-15T09:41:05.000Z"}],["meta",{"property":"article:author","content":"xlc520"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2022-06-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-15T09:41:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"搞定 SpringBoot 接口恶意刷新和暴力请求\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-06-05T00:00:00.000Z\\",\\"dateModified\\":\\"2023-03-15T09:41:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xlc520\\"}]}"]]},"headers":[],"git":{"createdTime":1668948234000,"updatedTime":1678873265000,"contributors":[{"name":"xlc520","email":"2215400217@qq.com","commits":2}]},"readingTime":{"minutes":2.82,"words":845},"filePathRelative":"dev/搞定SpringBoot接口恶意刷新和暴力请求.md","localizedDate":"2022年6月5日","excerpt":"<h1> 搞定 SpringBoot 接口恶意刷新和暴力请求</h1>\\n<p>在实际项目使用中，必须要考虑服务的安全性，当服务部署到互联网以后，就要考虑服务被恶意请求和暴力攻击的情况，下面的教程，通过<code>intercept</code>和<code>redis</code>针对<code>url+ip</code>在一定时间内访问的次数来将ip禁用，可以根据自己的需求进行相应的修改，来打打自己的目的；</p>\\n<p>首先工程为springboot框架搭建，不再详细叙述。</p>\\n<p>首先创建一个自定义的拦截器类，也是最核心的代码：</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token doc-comment comment\\">/**\\n * <span class=\\"token keyword\\">@package</span>: com.technicalinterest.group.interceptor\\n * <span class=\\"token keyword\\">@className</span>: IpUrlLimitInterceptor\\n * <span class=\\"token keyword\\">@description</span>: ip+url重复请求现在拦截器\\n * <span class=\\"token keyword\\">@author</span>: Shuyu.Wang\\n * <span class=\\"token keyword\\">@since</span>: 0.1\\n **/</span>\\n<span class=\\"token annotation punctuation\\">@Slf4j</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">IpUrlLimitInterceptor</span> <span class=\\"token keyword\\">implements</span> <span class=\\"token class-name\\">HandlerInterceptor</span> <span class=\\"token punctuation\\">{</span>\\n \\n \\n <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">RedisUtil</span> <span class=\\"token function\\">getRedisUtil</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">return</span>  <span class=\\"token class-name\\">SpringContextUtil</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getBean</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">RedisUtil</span><span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">class</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n <span class=\\"token punctuation\\">}</span>\\n \\n <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">final</span> <span class=\\"token class-name\\">String</span> <span class=\\"token constant\\">LOCK_IP_URL_KEY</span><span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"lock_ip_\\"</span><span class=\\"token punctuation\\">;</span>\\n \\n <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">final</span> <span class=\\"token class-name\\">String</span> <span class=\\"token constant\\">IP_URL_REQ_TIME</span><span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"ip_url_times_\\"</span><span class=\\"token punctuation\\">;</span>\\n \\n <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">long</span> <span class=\\"token constant\\">LIMIT_TIMES</span><span class=\\"token operator\\">=</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">;</span>\\n \\n <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">int</span> <span class=\\"token constant\\">IP_LOCK_TIME</span><span class=\\"token operator\\">=</span><span class=\\"token number\\">60</span><span class=\\"token punctuation\\">;</span>\\n \\n <span class=\\"token annotation punctuation\\">@Override</span>\\n <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">preHandle</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">HttpServletRequest</span> httpServletRequest<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">HttpServletResponse</span> httpServletResponse<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Object</span> o<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">Exception</span> <span class=\\"token punctuation\\">{</span>\\n  log<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">info</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"request请求地址uri={},ip={}\\"</span><span class=\\"token punctuation\\">,</span> httpServletRequest<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getRequestURI</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">IpAdrressUtil</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getIpAdrress</span><span class=\\"token punctuation\\">(</span>httpServletRequest<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token function\\">ipIsLock</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">IpAdrressUtil</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getIpAdrress</span><span class=\\"token punctuation\\">(</span>httpServletRequest<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n   log<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">info</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"ip访问被禁止={}\\"</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">IpAdrressUtil</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getIpAdrress</span><span class=\\"token punctuation\\">(</span>httpServletRequest<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n   <span class=\\"token class-name\\">ApiResult</span> result <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ApiResult</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">ResultEnum</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">LOCK_IP</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n   <span class=\\"token function\\">returnJson</span><span class=\\"token punctuation\\">(</span>httpServletResponse<span class=\\"token punctuation\\">,</span> <span class=\\"token constant\\">JSON</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toJSONString</span><span class=\\"token punctuation\\">(</span>result<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n   <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span><span class=\\"token function\\">addRequestTime</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">IpAdrressUtil</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getIpAdrress</span><span class=\\"token punctuation\\">(</span>httpServletRequest<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>httpServletRequest<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getRequestURI</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n   <span class=\\"token class-name\\">ApiResult</span> result <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ApiResult</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">ResultEnum</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">LOCK_IP</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n   <span class=\\"token function\\">returnJson</span><span class=\\"token punctuation\\">(</span>httpServletResponse<span class=\\"token punctuation\\">,</span> <span class=\\"token constant\\">JSON</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toJSONString</span><span class=\\"token punctuation\\">(</span>result<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n   <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n <span class=\\"token punctuation\\">}</span>\\n \\n <span class=\\"token annotation punctuation\\">@Override</span>\\n <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">postHandle</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">HttpServletRequest</span> httpServletRequest<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">HttpServletResponse</span> httpServletResponse<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Object</span> o<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">ModelAndView</span> modelAndView<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">Exception</span> <span class=\\"token punctuation\\">{</span>\\n \\n <span class=\\"token punctuation\\">}</span>\\n \\n <span class=\\"token annotation punctuation\\">@Override</span>\\n <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">afterCompletion</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">HttpServletRequest</span> httpServletRequest<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">HttpServletResponse</span> httpServletResponse<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Object</span> o<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Exception</span> e<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">Exception</span> <span class=\\"token punctuation\\">{</span>\\n \\n <span class=\\"token punctuation\\">}</span>\\n \\n <span class=\\"token doc-comment comment\\">/**\\n  * @Description: 判断ip是否被禁用\\n  * <span class=\\"token keyword\\">@author</span>: shuyu.wang\\n  * <span class=\\"token keyword\\">@date</span>: 2019-10-12 13:08\\n  * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">ip</span>\\n  * <span class=\\"token keyword\\">@return</span> java.lang.Boolean\\n  */</span>\\n <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">Boolean</span> <span class=\\"token function\\">ipIsLock</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> ip<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token class-name\\">RedisUtil</span> redisUtil<span class=\\"token operator\\">=</span><span class=\\"token function\\">getRedisUtil</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>redisUtil<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">hasKey</span><span class=\\"token punctuation\\">(</span><span class=\\"token constant\\">LOCK_IP_URL_KEY</span><span class=\\"token operator\\">+</span>ip<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n   <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n <span class=\\"token punctuation\\">}</span>\\n <span class=\\"token doc-comment comment\\">/**\\n  * @Description: 记录请求次数\\n  * <span class=\\"token keyword\\">@author</span>: shuyu.wang\\n  * <span class=\\"token keyword\\">@date</span>: 2019-10-12 17:18\\n  * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">ip</span>\\n  * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">uri</span>\\n  * <span class=\\"token keyword\\">@return</span> java.lang.Boolean\\n  */</span>\\n <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">Boolean</span> <span class=\\"token function\\">addRequestTime</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> ip<span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">String</span> uri<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token class-name\\">String</span> key<span class=\\"token operator\\">=</span><span class=\\"token constant\\">IP_URL_REQ_TIME</span><span class=\\"token operator\\">+</span>ip<span class=\\"token operator\\">+</span>uri<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token class-name\\">RedisUtil</span> redisUtil<span class=\\"token operator\\">=</span><span class=\\"token function\\">getRedisUtil</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>redisUtil<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">hasKey</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n   <span class=\\"token keyword\\">long</span> time<span class=\\"token operator\\">=</span>redisUtil<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">incr</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">,</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">long</span><span class=\\"token punctuation\\">)</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n   <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>time<span class=\\"token operator\\">&gt;=</span><span class=\\"token constant\\">LIMIT_TIMES</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    redisUtil<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getLock</span><span class=\\"token punctuation\\">(</span><span class=\\"token constant\\">LOCK_IP_URL_KEY</span><span class=\\"token operator\\">+</span>ip<span class=\\"token punctuation\\">,</span>ip<span class=\\"token punctuation\\">,</span><span class=\\"token constant\\">IP_LOCK_TIME</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n   <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n   redisUtil<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getLock</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">,</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">long</span><span class=\\"token punctuation\\">)</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n <span class=\\"token punctuation\\">}</span>\\n \\n <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">returnJson</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">HttpServletResponse</span> response<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">String</span> json<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">Exception</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token class-name\\">PrintWriter</span> writer <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n  response<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setCharacterEncoding</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"UTF-8\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  response<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setContentType</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"text/json; charset=utf-8\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n   writer <span class=\\"token operator\\">=</span> response<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getWriter</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n   writer<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">print</span><span class=\\"token punctuation\\">(</span>json<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">IOException</span> e<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n   log<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">error</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"LoginInterceptor response error ---&gt; {}\\"</span><span class=\\"token punctuation\\">,</span> e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getMessage</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> e<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">finally</span> <span class=\\"token punctuation\\">{</span>\\n   <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>writer <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    writer<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">close</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n   <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span>\\n <span class=\\"token punctuation\\">}</span>\\n \\n \\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
