import{_ as c}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as m,o as n,c as s,b as i,d as a,e as t,a as o}from"./app-aq8PVJpR.js";const l={},d=o('<h1 id="github-auto-commit" tabindex="-1"><a class="header-anchor" href="#github-auto-commit"><span>GitHub-Auto-Commit</span></a></h1><blockquote><p>一个用于Git自动commit的VSCode插件，它可以用来补充之前忘记提交commit，帮助你把首页的绿色格子填满。</p></blockquote><h3 id="使用效果" tabindex="-1"><a class="header-anchor" href="#使用效果"><span>使用效果</span></a></h3><ol><li>使用本插件来控制commit次数.</li><li>如下图，你甚至可以规划一下<code>commit</code>次数，然后画出图形, 天空才是你的极限。</li></ol><figure><img src="https://fastly.jsdelivr.net/gh/xlc520/MyImage@main/MdImg/5245297-2c357937f3122b08.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="功能特性" tabindex="-1"><a class="header-anchor" href="#功能特性"><span>功能特性</span></a></h3>',6),r=i("li",null,[i("strong",null,"选择多个日期范围"),a("：一次操作即可提交不同日期"),i("code",null,"commit")],-1),h=i("strong",null,"控制每个日期的commit次数",-1),p={href:"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2FOBKoro1%2FautoCommit%2Fwiki%2F%E4%BD%BF%E7%94%A8%E9%A1%BB%E7%9F%A5%23commit%E6%AC%A1%E6%95%B0%E4%B8%8E%E9%A2%9C%E8%89%B2",target:"_blank",rel:"noopener noreferrer"},g=o("<li><strong>随机commit次数</strong>：随机commit次数让我们的提交看起来更加逼真。</li><li><strong>取消commit</strong>: 用于在<code>commit</code>期间取消并回滚到未提交版本</li><li>超过100次提交，将强制考虑10秒是否要取消commit。</li><li>插件成功运行后，将自动保存配置参数，无须每次都要一通操作。</li><li>提交完善的日志: 清晰的了解插件的运行情况</li><li>后台运行，不影响编码、浏览网页等。</li><li>运行超快，如下图187次commit，20秒搞定。</li><li>还有超多细节优化。</li>",8),f=i("h3",{id:"仓库地址",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#仓库地址"},[i("span",null,"仓库地址:")])],-1),u={href:"https://github.com/OBKoro1/autoCommit",target:"_blank",rel:"noopener noreferrer"},b=o('<h4 id="自动commit演示" tabindex="-1"><a class="header-anchor" href="#自动commit演示"><span>自动commit演示：</span></a></h4><figure><img src="https://fastly.jsdelivr.net/gh/xlc520/MyImage@main/MdImg/image-20220111141608365.png" alt="image-20220111141608365" tabindex="0" loading="lazy"><figcaption>image-20220111141608365</figcaption></figure><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h3><p>在 Vscode 扩展商店中搜索<code>Auto Commit</code>,点击安装即可。</p><h3 id="插件入口" tabindex="-1"><a class="header-anchor" href="#插件入口"><span>插件入口</span></a></h3><ol><li>使用快捷键打开VSCode的命令面板。 <ul><li><code>mac</code>: <code>command + p</code> window: <code>ctrl + p</code></li></ul></li><li>输入<code>&gt; auto commit</code>将会看到如下图所示的命令选项，然后用鼠标点击或者回车都可启动插件。 <ul><li>实际上可以输入下方选项的任何一段文字，都可以匹配到插件命令选项。</li></ul></li></ol><figure><img src="https://fastly.jsdelivr.net/gh/xlc520/MyImage@main/MdImg/5245297-832f45c19fdca38e.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>image</p><h3 id="使用须知" tabindex="-1"><a class="header-anchor" href="#使用须知"><span>使用须知</span></a></h3><h2 id="git相关" tabindex="-1"><a class="header-anchor" href="#git相关"><span>Git相关</span></a></h2><p>需要有一个项目让插件提交commit，可以使用公开项目但更推荐创建一个私有项目</p><h4 id="创建私有项目来提交commit" tabindex="-1"><a class="header-anchor" href="#创建私有项目来提交commit"><span>创建私有项目来提交commit</span></a></h4><p><strong>私有项目的优势</strong>:</p><ol><li><p>隐藏项目，别人看不到。</p><p>PS： 公开的项目，如果后面要删除的话，会将commit也清除掉。</p></li><li><p>相对应的你的提交记录别人也看不到，只能看到类似下面这句话。</p><p><code>3 contributions in private repositories</code>: 提交了三个commit到私有仓库。</p></li><li><p><strong>要打开私有仓库贡献可见 ，别人才能看到私有仓库的commit</strong> ,否则只能自己看到:</p></li></ol><figure><img src="https://fastly.jsdelivr.net/gh/xlc520/MyImage@main/MdImg/5245297-4b6984da51d815cd.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="确保能够正常提交" tabindex="-1"><a class="header-anchor" href="#确保能够正常提交"><span>确保能够正常提交</span></a></h4><ol><li><p>clone github项目到本地。</p></li><li><p>确保能够正常提交。</p><p>先进行一次提交确保能够正常提交，防止因为merge/release等问题导致提交失败。</p></li></ol><h4 id="需要提交到master分支上" tabindex="-1"><a class="header-anchor" href="#需要提交到master分支上"><span><strong>需要提交到<code>master</code>分支上</strong></span></a></h4><p>如果提交到其他分支，提交记录不会显示在绿色的格子里面，合并分支之后 才会显示在绿色格子里面。</p><h4 id="提交以前和未来的commit" tabindex="-1"><a class="header-anchor" href="#提交以前和未来的commit"><span>提交以前和未来的commit</span></a></h4><p>在19年12月我创建了一个测试账号：koroTest，经过测试：</p><ol><li>成功提交17年的10月份的commit。</li><li>现在2020年1月份，成功提交了2020年2月份的commit。</li><li>具体能提交最早和最晚的日期没有测试过，有兴趣的可以试试~</li></ol><h4 id="commit次数与颜色" tabindex="-1"><a class="header-anchor" href="#commit次数与颜色"><span>commit次数与颜色</span></a></h4><p>我用这个工具测试一下了一个不同日期commit1~30次的颜色变化：</p><p>一天1-7次commit颜色为<code>#c6e48b</code> 一天8-14次commit颜色为<code>#7bc96f</code> 一天15-20次commit颜色为<code>#239a3b</code> 一天21-63次commit颜色为<code>#196127</code></p><p>后面的没有再测试了，应该最深的颜色就是<code>#196127</code>。</p><figure><img src="https://fastly.jsdelivr.net/gh/xlc520/MyImage@main/MdImg/5245297-73427fb0f18ccfa8.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>commit颜色</p><h2 id="插件运行机制相关" tabindex="-1"><a class="header-anchor" href="#插件运行机制相关"><span>插件运行机制相关</span></a></h2><h4 id="随机commit次数" tabindex="-1"><a class="header-anchor" href="#随机commit次数"><span>随机commit次数</span></a></h4><p>默认开启，默认为1~10随机，时间范围内默认每个日期随机commit几次，如果单个时间段设置了<code>commit</code>次数将使用设置的次数。</p><p>PS： 最小值为2，即每个日期随机commi 1/2次。</p><h4 id="默认commit次数" tabindex="-1"><a class="header-anchor" href="#默认commit次数"><span>默认commit次数</span></a></h4><p>关闭随机commit次数，就会使用默认commit次数，如果单个时间段设置了<code>commit</code>次数将使用设置的次数。</p><h4 id="设置多个时间段、每个时间段可以设置不同的提交次数" tabindex="-1"><a class="header-anchor" href="#设置多个时间段、每个时间段可以设置不同的提交次数"><span>设置多个时间段、每个时间段可以设置不同的提交次数</span></a></h4><p>如下图：</p><ol><li><strong>插件可以添加多次日期范围</strong>。</li><li><strong>每个日期范围都能控制具体的commit次数</strong>。</li><li>每个日期范围和commit次数通过index来配对。</li><li>同一个日期，后面出现的将会覆盖前面的：<code>commit</code>次数将会使用后面日期设置。</li><li>对应的日期范围，不设置commit次数，那么将会使用随机<code>commit</code>次数/默认<code>commit</code>次数。</li></ol><p>如下图所示的配置(日期覆盖情况)，最后的结果是：</p><p>12/01~12/06 使用默认commit次数，每天将会提交一次 12/07~12/08 每天提交三次 12/09~12/19 每天提交四次</p><figure><img src="https://fastly.jsdelivr.net/gh/xlc520/MyImage@main/MdImg/5245297-5d9be61e7da96d62.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>image</p><h4 id="commit次数的最大值" tabindex="-1"><a class="header-anchor" href="#commit次数的最大值"><span>commit次数的最大值</span></a></h4><p>所有计数器的最大值设定为30。</p><h4 id="默认修改项目根目录的commit-md文件" tabindex="-1"><a class="header-anchor" href="#默认修改项目根目录的commit-md文件"><span>默认修改项目根目录的<code>commit.md</code>文件</span></a></h4><p>插件将默认重写项目根目录的<code>commit.md</code>文件，如果文件不存在将会自动创建。</p><p>插件提供了一个配置项让你可以修改commit信息将要存储的文件。</p><h4 id="commit信息" tabindex="-1"><a class="header-anchor" href="#commit信息"><span>commit信息</span></a></h4><p>每次提交需要有一个commit信息，插件默认是<code>autoCommit</code>, 你可以在界面修改它。</p><h4 id="运行日志" tabindex="-1"><a class="header-anchor" href="#运行日志"><span>运行日志</span></a></h4><p>插件运行日志，是倒序展示的，如果提交量比较大，支持在运行期间清空日志。</p><h3 id="开始commit" tabindex="-1"><a class="header-anchor" href="#开始commit"><span>开始commit</span></a></h3><p>当配置好选项之后就可以<strong>点击开始commit</strong>按钮来提交commit。</p><p>建议一开始为了避免误操作，先测试一下：commit量不要过大。</p><p>PS： 请在一个网络状况良好的地方运行，否则会导致<code>push</code>失败。</p><h3 id="取消commit" tabindex="-1"><a class="header-anchor" href="#取消commit"><span>取消commit</span></a></h3><ol><li>该按钮是为了避免用户误操作，用于在插件commit期间终止自动<code>commit</code>。</li><li>一旦插件日志出现<code>提交中...</code>，就不可取消。</li><li>如果commit次数超过100，插件将会强制等待10S让你考虑是否需要取消commit。</li></ol><h4 id="保存配置和后台运行" tabindex="-1"><a class="header-anchor" href="#保存配置和后台运行"><span>保存配置和后台运行</span></a></h4><ol><li>插件在运行成功一次之后，会自动保存你的配置参数，在你下次通过命令打开插件的时候，会自动初始配置参数。</li><li>插件是可以挂在后台运行，不影响你编码、浏览网页之类的。</li></ol><h3 id="插件声明" tabindex="-1"><a class="header-anchor" href="#插件声明"><span>插件声明</span></a></h3><p><a href="%5Bhttps://github.com/OBKoro1/autoCommit%5D(https://github.com/OBKoro1/autoCommit)">autoCommit</a>是本人兴之所至创建的个人项目，仅用于学习交流，禁止任何人商用以及用于非法之途。</p><p>插件如构成侵权，请通过邮件联系我。</p><h3 id="头部注释插件" tabindex="-1"><a class="header-anchor" href="#头部注释插件"><span>头部注释插件</span></a></h3><p>本人还开源了另外一个VSCode插件:koroFileHeader，目前该插件已经有1000+ Star了，欢迎安装使用。</p><ol><li>它是用于生成文件头部注释，帮助我们养成良好的编码习惯，规范整个团队风格。</li><li>插件支持所有主流语言,功能强大，灵活方便，文档齐全，食用简单！</li></ol>',64);function x(_,y){const e=m("ExternalLinkIcon");return n(),s("div",null,[d,i("ol",null,[r,i("li",null,[h,a(": 可以用它来控制绿色格子的颜色，了解"),i("a",p,[a("commit次数与颜色"),t(e)])]),g]),f,i("p",null,[i("a",u,[a("https://github.com/OBKoro1/autoCommit"),t(e)])]),b])}const I=c(l,[["render",x],["__file","GitHub-Auto-Commit.html.vue"]]);export{I as default};
