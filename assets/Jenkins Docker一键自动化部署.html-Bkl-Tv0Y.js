import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as r,c,b as e,d as a,e as s,a as n}from"./app-BxuroukW.js";const o={},d=n(`<h1 id="jenkins-docker-一键自动化部署" tabindex="-1"><a class="header-anchor" href="#jenkins-docker-一键自动化部署"><span>Jenkins Docker 一键自动化部署</span></a></h1><ul><li>环境：CentOS7 + Git (Gitee)</li><li>实现步骤：在 Docker 安装 Jenkins，配置 Jenkins 基本信息，利用 Dockerfile 和 Shell 脚本实现项目自动拉取打包并运行。</li></ul><h2 id="一、安装-docker" tabindex="-1"><a class="header-anchor" href="#一、安装-docker"><span><strong>一、安装 Docker</strong></span></a></h2><p>安装社区版本 Docker CE</p><h3 id="_1-确保-yum-包更新到最新" tabindex="-1"><a class="header-anchor" href="#_1-确保-yum-包更新到最新"><span><strong>1. 确保 yum 包更新到最新</strong></span></a></h3><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>yum update
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-卸载旧版本-如果安装过旧版本的话" tabindex="-1"><a class="header-anchor" href="#_2-卸载旧版本-如果安装过旧版本的话"><span><strong>2. 卸载旧版本（如果安装过旧版本的话）</strong></span></a></h3><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>yum remove docker  docker-common docker-selinux docker-engine
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-安装需要的软件包" tabindex="-1"><a class="header-anchor" href="#_3-安装需要的软件包"><span><strong>3. 安装需要的软件包</strong></span></a></h3><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>yum install -y yum-utils device-mapper-persistent-data lvm2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-设置-yum-源" tabindex="-1"><a class="header-anchor" href="#_4-设置-yum-源"><span><strong>4. 设置 yum 源</strong></span></a></h3><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-安装-docker" tabindex="-1"><a class="header-anchor" href="#_5-安装-docker"><span><strong>5. 安装 Docker</strong></span></a></h3><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>yum install docker-ce  #由于repo中默认只开启stable仓库，故这里安装的是最新稳定版17.12.0yum install &lt;自己的版本&gt;  # 例如：sudo yum install docker-ce-17.12.0.ce

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-启动并设置开机启动" tabindex="-1"><a class="header-anchor" href="#_6-启动并设置开机启动"><span><strong>6. 启动并设置开机启动</strong></span></a></h3><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>systemctl start dockersystemctl enable docker

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-验证安装是否成功" tabindex="-1"><a class="header-anchor" href="#_7-验证安装是否成功"><span><strong>7. 验证安装是否成功</strong></span></a></h3><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>docker version

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、安装-jenkins" tabindex="-1"><a class="header-anchor" href="#二、安装-jenkins"><span><strong>二、安装 Jenkins</strong></span></a></h2>`,19),g={href:"https://www.jenkins.io/zh/",target:"_blank",rel:"noopener noreferrer"},p=n(`<h3 id="_1-安装-jenkins" tabindex="-1"><a class="header-anchor" href="#_1-安装-jenkins"><span><strong>1. 安装 Jenkins</strong></span></a></h3><p>Docker 安装一切都是那么简单。注意检查 8080 是否已经占用，如果占用请修改端口。</p><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>docker run --name jenkins -u root --rm -d -p 8080:8080 -p 50000:50000 -v /var/jenkins_home:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock jenkinsci/blueocean
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果没改端口号的话，安装完成后访问地址：</p><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>http://{部署Jenkins所在服务IP}:8080
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此处会有几分钟的等待时间。</p><h3 id="_2-初始化-jenkins" tabindex="-1"><a class="header-anchor" href="#_2-初始化-jenkins"><span><strong>2. 初始化 Jenkins</strong></span></a></h3>`,7),h={href:"https://www.jenkins.io/zh/doc",target:"_blank",rel:"noopener noreferrer"},k=n(`<h4 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h4><h4 id="_2-1-解锁-jenkins" tabindex="-1"><a class="header-anchor" href="#_2-1-解锁-jenkins"><span><strong>2.1 解锁 Jenkins</strong></span></a></h4><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code># 进入Jenkins容器docker exec -it {Jenkins容器名} bash  # 例如 docker exec -it jenkins bash
# 查看密码cat /var/lib/jenkins/secrets/initialAdminPassword
# 复制密码到输入框里面
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1667833096704-0.png" alt="Jenkins+Docker" tabindex="0" loading="lazy"><figcaption>Jenkins+Docker</figcaption></figure><h4 id="_2-2-安装插件" tabindex="-1"><a class="header-anchor" href="#_2-2-安装插件"><span><strong>2.2 安装插件</strong></span></a></h4><p>选择第一项：<strong>安装推荐的插件</strong>。</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1667833096704-1.png" alt="Jenkins+Docker" tabindex="0" loading="lazy"><figcaption>Jenkins+Docker</figcaption></figure><h4 id="_2-3-创建管理员用户" tabindex="-1"><a class="header-anchor" href="#_2-3-创建管理员用户"><span><strong>2.3 创建管理员用户</strong></span></a></h4><p>此账户信息一定要记住哦。</p><h2 id="三、系统配置" tabindex="-1"><a class="header-anchor" href="#三、系统配置"><span><strong>三、系统配置</strong></span></a></h2><h3 id="_1-安装需要插件" tabindex="-1"><a class="header-anchor" href="#_1-安装需要插件"><span><strong>1. 安装需要插件</strong></span></a></h3><p>进入【首页】–【系统管理】–【插件管理】–【可选插件】。搜索以下需要安装的插件，点击安装即可。</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1667833096704-2.png" alt="Jenkins+Docker" tabindex="0" loading="lazy"><figcaption>Jenkins+Docker</figcaption></figure><ul><li>安装 Maven Integration</li><li>安装 Publish Over SSH（如果不需要远程推送，不用安装）</li><li>如果使用 Gitee 码云，安装插件 Gitee（自带 Git 不用单独安装）</li></ul><h3 id="_2-配置-maven" tabindex="-1"><a class="header-anchor" href="#_2-配置-maven"><span><strong>2. 配置 Maven</strong></span></a></h3><p>进入【首页】–【系统管理】–【全局配置】，拉到页面最下方 maven–maven 安装。</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1667833096704-3.png" alt="Jenkins+Docker" tabindex="0" loading="lazy"><figcaption>Jenkins+Docker</figcaption></figure><h2 id="-1" tabindex="-1"><a class="header-anchor" href="#-1"><span></span></a></h2><h2 id="四、创建任务" tabindex="-1"><a class="header-anchor" href="#四、创建任务"><span><strong>四、创建任务</strong></span></a></h2><h3 id="_1-新建任务" tabindex="-1"><a class="header-anchor" href="#_1-新建任务"><span><strong>1. 新建任务</strong></span></a></h3><p>点击【新建任务】，输入任务名称，点击构建一个自由风格的软件项目。</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1667833096704-4.png" alt="Jenkins+Docker" tabindex="0" loading="lazy"><figcaption>Jenkins+Docker</figcaption></figure><h3 id="-2" tabindex="-1"><a class="header-anchor" href="#-2"><span></span></a></h3><h3 id="_2-源码管理" tabindex="-1"><a class="header-anchor" href="#_2-源码管理"><span><strong>2. 源码管理</strong></span></a></h3><p>点击源码管理】–【Git】，输入仓库地址，添加凭证，选择好凭证即可。</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1667833096704-5.png" alt="Jenkins+Docker" tabindex="0" loading="lazy"><figcaption>Jenkins+Docker</figcaption></figure><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1667833096705-6.png" alt="Jenkins+Docker" tabindex="0" loading="lazy"><figcaption>Jenkins+Docker</figcaption></figure><h3 id="-3" tabindex="-1"><a class="header-anchor" href="#-3"><span></span></a></h3><h3 id="_3-构建触发器" tabindex="-1"><a class="header-anchor" href="#_3-构建触发器"><span><strong>3. 构建触发器</strong></span></a></h3><p>点击【构建触发器】–【构建】–【增加构建步骤】–【调用顶层 Maven 目标】–【「填写配置」】–【保存】。</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1667833096705-7.png" alt="Jenkins+Docker" tabindex="0" loading="lazy"><figcaption>Jenkins+Docker</figcaption></figure><p>此处命令只是 install，看是否能生成 jar 包。</p><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>clean install -Dmaven.test.skip=true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1667833096705-8.png" alt="Jenkins+Docker" tabindex="0" loading="lazy"><figcaption>Jenkins+Docker</figcaption></figure><h3 id="_4-保存" tabindex="-1"><a class="header-anchor" href="#_4-保存"><span><strong>4. 保存</strong></span></a></h3><p>点击【保存】按钮即可。</p><h2 id="五、测试" tabindex="-1"><a class="header-anchor" href="#五、测试"><span><strong>五、测试</strong></span></a></h2><p>该功能测试是否能正常打包。</p><h3 id="_1-构建" tabindex="-1"><a class="header-anchor" href="#_1-构建"><span><strong>1. 构建</strong></span></a></h3><p>点击构建按钮。</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1667833096706-9.png" alt="Jenkins+Docker" tabindex="0" loading="lazy"><figcaption>Jenkins+Docker</figcaption></figure><h3 id="-4" tabindex="-1"><a class="header-anchor" href="#-4"><span></span></a></h3><h3 id="_2-查看日志" tabindex="-1"><a class="header-anchor" href="#_2-查看日志"><span><strong>2. 查看日志</strong></span></a></h3><p>点击正在构建的任务，或者点击任务名称进入详情页面，查看控制台输出。看是否能成功打成 jar 包。</p><p>该处日志第一次可能下载依赖 jar 包失败，再次点击构建即可成功。</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1667833096706-9.png" alt="Jenkins+Docker" tabindex="0" loading="lazy"><figcaption>Jenkins+Docker</figcaption></figure><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1667833096706-10.png" alt="Jenkins+Docker" tabindex="0" loading="lazy"><figcaption>Jenkins+Docker</figcaption></figure><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1667833096706-11.png" alt="Jenkins+Docker" tabindex="0" loading="lazy"><figcaption>Jenkins+Docker</figcaption></figure><h3 id="-5" tabindex="-1"><a class="header-anchor" href="#-5"><span></span></a></h3><h3 id="_3-查看项目位置" tabindex="-1"><a class="header-anchor" href="#_3-查看项目位置"><span><strong>3. 查看项目位置</strong></span></a></h3><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>cd /var/jenkins_home/workspacell # 即可查看是否存在
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="六、运行项目" tabindex="-1"><a class="header-anchor" href="#六、运行项目"><span><strong>六、运行项目</strong></span></a></h2><p>因为项目和 Jenkins 在同一台服务器，所以我们用 Shell 脚本运行项目，原理既是通过 Dockerfile 打包镜像，然后 docker 运行即可。</p><h3 id="_1-dockerfile" tabindex="-1"><a class="header-anchor" href="#_1-dockerfile"><span><strong>1. Dockerfile</strong></span></a></h3><p>在 Spring Boot 项目根目录新建一个名为 Dockerfile 的文件，注意没有后缀名。</p><p>其内容如下：（大致就是使用 JDK 8，把 jar 包添加到 docker 然后运行 prd 配置文件。详细可以查看其他教程）</p><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>FROM jdk:8VOLUME /tmpADD target/zx-order-0.0.1-SNAPSHOT.jar app.jarEXPOSE 8888ENTRYPOINT [&quot;java&quot;,&quot;-Djava.security.egd=file:/dev/./urandom&quot;,&quot;-jar&quot;,&quot;/app.jar&quot;,&quot;--spring.profiles.active=prd&quot;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="-6" tabindex="-1"><a class="header-anchor" href="#-6"><span></span></a></h3><h3 id="_2-修改-jenkins-任务配置" tabindex="-1"><a class="header-anchor" href="#_2-修改-jenkins-任务配置"><span><strong>2. 修改 Jenkins 任务配置</strong></span></a></h3><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1667833096706-12.png" alt="Jenkins+Docker" tabindex="0" loading="lazy"><figcaption>Jenkins+Docker</figcaption></figure><p>配置如下：</p><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1667833096707-13.png" alt="Jenkins+Docker" tabindex="0" loading="lazy"><figcaption>Jenkins+Docker</figcaption></figure><p>&quot;-t&quot; 指定新镜像名，&quot;.&quot; 表示 Dockfile 在当前路径。</p><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>cd /var/jenkins_home/workspace/zx-order-apidocker stop zx-order || truedocker rm zx-order || truedocker rmi zx-order || truedocker build -t zx-order .docker run -d -p 8888:8888 --name zx-order zx-order:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>备注： \\1. 上图用了 docker logs -f 是为了方便看日志，真实环境不要用，因为会一直等待日志，构建任务会失败； \\2. 加 &quot;|| true&quot; 是如果命令执行失败也会继续实行，为了防止第一次没有该镜像报错；</p><h3 id="_3-保存-点击保存即可" tabindex="-1"><a class="header-anchor" href="#_3-保存-点击保存即可"><span>3. 保存：点击保存即可</span></a></h3><h3 id="_4-构建-查看-jenkins-控制台输出-输出如下-证明成功" tabindex="-1"><a class="header-anchor" href="#_4-构建-查看-jenkins-控制台输出-输出如下-证明成功"><span>4. 构建：查看 Jenkins 控制台输出，输出如下，证明成功</span></a></h3><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1667833096707-14.png" alt="Jenkins+Docker" tabindex="0" loading="lazy"><figcaption>Jenkins+Docker</figcaption></figure><h3 id="_5-验证" tabindex="-1"><a class="header-anchor" href="#_5-验证"><span>5. 验证</span></a></h3><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>docker ps # 查看是否有自己的容器docker logs # 自己的容器名，查看日志是否正确# 打开浏览器访问项目

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,70);function u(m,b){const i=l("ExternalLinkIcon");return r(),c("div",null,[d,e("p",null,[a("Jenkins 中文官网："),e("a",g,[a("https://www.jenkins.io/zh/"),s(i)])]),p,e("p",null,[a("详情见官网教程："),e("a",h,[a("https://www.jenkins.io/zh/doc"),s(i)])]),k])}const f=t(o,[["render",u],["__file","Jenkins Docker一键自动化部署.html.vue"]]),x=JSON.parse('{"path":"/dev/Jenkins%20Docker%E4%B8%80%E9%94%AE%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2.html","title":"Jenkins Docker一键自动化部署","lang":"zh-CN","frontmatter":{"author":"xlc520","title":"Jenkins Docker一键自动化部署","excerpt":null,"description":"Jenkins Docker 一键自动化部署 环境：CentOS7 + Git (Gitee) 实现步骤：在 Docker 安装 Jenkins，配置 Jenkins 基本信息，利用 Dockerfile 和 Shell 脚本实现项目自动拉取打包并运行。 一、安装 Docker 安装社区版本 Docker CE 1. 确保 yum 包更新到最新 2. ...","date":"2022-11-09T00:00:00.000Z","category":"Java","tag":["Java","Jenkins","Docker"],"article":true,"timeline":true,"icon":"java","head":[["meta",{"property":"og:url","content":"https://blog.ciberviler.top/dev/Jenkins%20Docker%E4%B8%80%E9%94%AE%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2.html"}],["meta",{"property":"og:site_name","content":"StudyNote - 丰富的知识笔记库"}],["meta",{"property":"og:title","content":"Jenkins Docker一键自动化部署"}],["meta",{"property":"og:description","content":"Jenkins Docker 一键自动化部署 环境：CentOS7 + Git (Gitee) 实现步骤：在 Docker 安装 Jenkins，配置 Jenkins 基本信息，利用 Dockerfile 和 Shell 脚本实现项目自动拉取打包并运行。 一、安装 Docker 安装社区版本 Docker CE 1. 确保 yum 包更新到最新 2. ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1667833096704-0.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-27T13:32:36.000Z"}],["meta",{"property":"article:author","content":"xlc520"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Jenkins"}],["meta",{"property":"article:tag","content":"Docker"}],["meta",{"property":"article:published_time","content":"2022-11-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-27T13:32:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Jenkins Docker一键自动化部署\\",\\"image\\":[\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1667833096704-0.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1667833096704-1.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1667833096704-2.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1667833096704-3.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1667833096704-4.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1667833096704-5.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1667833096705-6.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1667833096705-7.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1667833096705-8.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1667833096706-9.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1667833096706-9.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1667833096706-10.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1667833096706-11.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1667833096706-12.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1667833096707-13.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1667833096707-14.png\\"],\\"datePublished\\":\\"2022-11-09T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-27T13:32:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xlc520\\"}]}"]]},"headers":[{"level":2,"title":"一、安装 Docker","slug":"一、安装-docker","link":"#一、安装-docker","children":[{"level":3,"title":"1. 确保 yum 包更新到最新","slug":"_1-确保-yum-包更新到最新","link":"#_1-确保-yum-包更新到最新","children":[]},{"level":3,"title":"2. 卸载旧版本（如果安装过旧版本的话）","slug":"_2-卸载旧版本-如果安装过旧版本的话","link":"#_2-卸载旧版本-如果安装过旧版本的话","children":[]},{"level":3,"title":"3. 安装需要的软件包","slug":"_3-安装需要的软件包","link":"#_3-安装需要的软件包","children":[]},{"level":3,"title":"4. 设置 yum 源","slug":"_4-设置-yum-源","link":"#_4-设置-yum-源","children":[]},{"level":3,"title":"5. 安装 Docker","slug":"_5-安装-docker","link":"#_5-安装-docker","children":[]},{"level":3,"title":"6. 启动并设置开机启动","slug":"_6-启动并设置开机启动","link":"#_6-启动并设置开机启动","children":[]},{"level":3,"title":"7. 验证安装是否成功","slug":"_7-验证安装是否成功","link":"#_7-验证安装是否成功","children":[]}]},{"level":2,"title":"二、安装 Jenkins","slug":"二、安装-jenkins","link":"#二、安装-jenkins","children":[{"level":3,"title":"1. 安装 Jenkins","slug":"_1-安装-jenkins","link":"#_1-安装-jenkins","children":[]},{"level":3,"title":"2. 初始化 Jenkins","slug":"_2-初始化-jenkins","link":"#_2-初始化-jenkins","children":[]}]},{"level":2,"title":"三、系统配置","slug":"三、系统配置","link":"#三、系统配置","children":[{"level":3,"title":"1. 安装需要插件","slug":"_1-安装需要插件","link":"#_1-安装需要插件","children":[]},{"level":3,"title":"2. 配置 Maven","slug":"_2-配置-maven","link":"#_2-配置-maven","children":[]}]},{"level":2,"title":"","slug":"-1","link":"#-1","children":[]},{"level":2,"title":"四、创建任务","slug":"四、创建任务","link":"#四、创建任务","children":[{"level":3,"title":"1. 新建任务","slug":"_1-新建任务","link":"#_1-新建任务","children":[]},{"level":3,"title":"","slug":"-2","link":"#-2","children":[]},{"level":3,"title":"2. 源码管理","slug":"_2-源码管理","link":"#_2-源码管理","children":[]},{"level":3,"title":"","slug":"-3","link":"#-3","children":[]},{"level":3,"title":"3. 构建触发器","slug":"_3-构建触发器","link":"#_3-构建触发器","children":[]},{"level":3,"title":"4. 保存","slug":"_4-保存","link":"#_4-保存","children":[]}]},{"level":2,"title":"五、测试","slug":"五、测试","link":"#五、测试","children":[{"level":3,"title":"1. 构建","slug":"_1-构建","link":"#_1-构建","children":[]},{"level":3,"title":"","slug":"-4","link":"#-4","children":[]},{"level":3,"title":"2. 查看日志","slug":"_2-查看日志","link":"#_2-查看日志","children":[]},{"level":3,"title":"","slug":"-5","link":"#-5","children":[]},{"level":3,"title":"3. 查看项目位置","slug":"_3-查看项目位置","link":"#_3-查看项目位置","children":[]}]},{"level":2,"title":"六、运行项目","slug":"六、运行项目","link":"#六、运行项目","children":[{"level":3,"title":"1. Dockerfile","slug":"_1-dockerfile","link":"#_1-dockerfile","children":[]},{"level":3,"title":"","slug":"-6","link":"#-6","children":[]},{"level":3,"title":"2. 修改 Jenkins 任务配置","slug":"_2-修改-jenkins-任务配置","link":"#_2-修改-jenkins-任务配置","children":[]},{"level":3,"title":"3. 保存：点击保存即可","slug":"_3-保存-点击保存即可","link":"#_3-保存-点击保存即可","children":[]},{"level":3,"title":"4. 构建：查看 Jenkins 控制台输出，输出如下，证明成功","slug":"_4-构建-查看-jenkins-控制台输出-输出如下-证明成功","link":"#_4-构建-查看-jenkins-控制台输出-输出如下-证明成功","children":[]},{"level":3,"title":"5. 验证","slug":"_5-验证","link":"#_5-验证","children":[]}]}],"git":{"createdTime":1667833425000,"updatedTime":1714224756000,"contributors":[{"name":"xlc520","email":"2215400217@qq.com","commits":3},{"name":"xlc","email":"2215400217@qq.com","commits":2}]},"readingTime":{"minutes":4.11,"words":1234},"filePathRelative":"dev/Jenkins Docker一键自动化部署.md","localizedDate":"2022年11月9日","autoDesc":true}');export{f as comp,x as data};
