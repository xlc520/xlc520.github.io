const a=JSON.parse('{"key":"v-5ff33ffc","path":"/dev/Java%E4%B8%ADComparable%E5%92%8CComparator.html","title":"Java中Comparable和Comparator","lang":"zh-CN","frontmatter":{"author":"xlc520","title":"Java中Comparable和Comparator","description":"Java中Comparable和Comparator Comparable和Comparator都是接口，可以用于对集合元素进行排序。 然而，Comparable和Comparator接口之间有许多不同之处，如下所示： Comparable Comparator 1) Comparable提供单一的排序顺序。换句话说，我们可以根据单个元素（例如id、name和price）对集合进行排序。 Comparator提供多个排序顺序。换句话说，我们可以根据多个元素（例如id、name和price等）对集合进行排序。 2) Comparable影响原始类，即实际类被修改。 Comparator不影响原始类，即实际类不被修改。 3) Comparable提供compareTo()方法来排序元素。 Comparator提供compare()方法来排序元素。 4) Comparable位于java.lang包中。 Comparator位于java.util包中。 5) 我们可以使用Collections.sort(List)方法对Comparable类型的列表元素进行排序。 我们可以使用Collections.sort(List, Comparator)方法对Comparator类型的列表元素进行排序。","date":"2023-10-16T00:00:00.000Z","category":"Java","tag":"Java","article":true,"timeline":true,"icon":"java","head":[["meta",{"property":"og:url","content":"https://blog.ciberviler.top/dev/Java%E4%B8%ADComparable%E5%92%8CComparator.html"}],["meta",{"property":"og:site_name","content":"StudyNote"}],["meta",{"property":"og:title","content":"Java中Comparable和Comparator"}],["meta",{"property":"og:description","content":"Java中Comparable和Comparator Comparable和Comparator都是接口，可以用于对集合元素进行排序。 然而，Comparable和Comparator接口之间有许多不同之处，如下所示： Comparable Comparator 1) Comparable提供单一的排序顺序。换句话说，我们可以根据单个元素（例如id、name和price）对集合进行排序。 Comparator提供多个排序顺序。换句话说，我们可以根据多个元素（例如id、name和price等）对集合进行排序。 2) Comparable影响原始类，即实际类被修改。 Comparator不影响原始类，即实际类不被修改。 3) Comparable提供compareTo()方法来排序元素。 Comparator提供compare()方法来排序元素。 4) Comparable位于java.lang包中。 Comparator位于java.util包中。 5) 我们可以使用Collections.sort(List)方法对Comparable类型的列表元素进行排序。 我们可以使用Collections.sort(List, Comparator)方法对Comparator类型的列表元素进行排序。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-15T14:53:41.000Z"}],["meta",{"property":"article:author","content":"xlc520"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2023-10-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-15T14:53:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中Comparable和Comparator\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-16T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-15T14:53:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xlc520\\"}]}"]]},"headers":[{"level":2,"title":"Java Comparable示例","slug":"java-comparable示例","link":"#java-comparable示例","children":[]},{"level":2,"title":"Java Comparator示例","slug":"java-comparator示例","link":"#java-comparator示例","children":[]}],"git":{"createdTime":1697381621000,"updatedTime":1697381621000,"contributors":[{"name":"xlc520","email":"2215400217@qq.com","commits":1}]},"readingTime":{"minutes":2.4,"words":721},"filePathRelative":"dev/Java中Comparable和Comparator.md","localizedDate":"2023年10月16日","excerpt":"<h1> Java中Comparable和Comparator</h1>\\n<p>Comparable和Comparator都是接口，可以用于对集合元素进行排序。</p>\\n<p>然而，Comparable和Comparator接口之间有许多不同之处，如下所示：</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Comparable</th>\\n<th>Comparator</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>1) Comparable提供单一的排序顺序。换句话说，我们可以根据单个元素（例如id、name和price）对集合进行排序。</td>\\n<td>Comparator提供多个排序顺序。换句话说，我们可以根据多个元素（例如id、name和price等）对集合进行排序。</td>\\n</tr>\\n<tr>\\n<td>2) Comparable影响原始类，即实际类被修改。</td>\\n<td>Comparator不影响原始类，即实际类不被修改。</td>\\n</tr>\\n<tr>\\n<td>3) Comparable提供compareTo()方法来排序元素。</td>\\n<td>Comparator提供compare()方法来排序元素。</td>\\n</tr>\\n<tr>\\n<td>4) Comparable位于java.lang包中。</td>\\n<td>Comparator位于java.util包中。</td>\\n</tr>\\n<tr>\\n<td>5) 我们可以使用Collections.sort(List)方法对Comparable类型的列表元素进行排序。</td>\\n<td>我们可以使用Collections.sort(List, Comparator)方法对Comparator类型的列表元素进行排序。</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{a as data};
