import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as a,a as e}from"./app-a8514216.js";const t={},p=e(`<h1 id="list-extends-t-与list-super-t-的区别" tabindex="-1"><a class="header-anchor" href="#list-extends-t-与list-super-t-的区别" aria-hidden="true">#</a> List&lt;? extends T&gt;与List&lt;? super T&gt;的区别</h1><p><strong>List&lt;? extends T&gt;与List&lt;? super T&gt;的区别</strong></p><p>这个问题，初级工程师在做面试题时会出现。高级工程师很少会遇到，但实际上，不少工作了 5 年左右的工程师也回答的不是很好。基于此，整理了本文，分享给大家！</p><figure><img src="https://static.xlc520.tk/blogImage/640-1697803438447-0.jpeg" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>我们先来看一下名词解释：</p><h2 id="_1" tabindex="-1"><a class="header-anchor" href="#_1" aria-hidden="true">#</a> 1）<code>？</code></h2><p>？表示类型通配符，即具体传什么参数类型，在List定义时不用考虑。</p><h2 id="_2-t" tabindex="-1"><a class="header-anchor" href="#_2-t" aria-hidden="true">#</a> 2）<code>&lt;T&gt;</code></h2><p>这里的 <code>&lt;&gt;</code> 表示泛型，T 表示泛型中装载的类型为T类型，等到需要的时候，我们可以具体这个 T。我们在使用动态数组实现 ArrayList 的时候，如果希望这个 ArrayList 不仅仅支持一个类型的话，我们可以给这个 ArrayList 定义泛型，泛型中存放的是T类型。在实际创建出这个 ArrayList 对象时，我们可以指定泛型中的具体类型。</p><h2 id="_3-extends-t" tabindex="-1"><a class="header-anchor" href="#_3-extends-t" aria-hidden="true">#</a> 3）<code>&lt;? extends T&gt;</code></h2><p>类型上界，这里的 ? 可以是 T 类型或者 T 的子类类型。</p><h2 id="_4-super-t" tabindex="-1"><a class="header-anchor" href="#_4-super-t" aria-hidden="true">#</a> 4）<code>&lt;? super T&gt;</code></h2><p>类型下界，这里的?可以是T类型或者T的超类类型，但不代表我们可以往里面添加任意超类类型的元素。 <img src="https://static.xlc520.tk/blogImage/640-1697803438447-1.png" alt="图片" loading="lazy"></p><p><strong>在List中引入通配符界限限制的假设</strong></p><p>不管是<code>List&lt;? extends T&gt;</code>还是<code>List&lt;? super T&gt;</code>，如果能读取元素，那么这个元素一定能转化为 T 类型，注意不是强制类型转换，强制类型转换是容易出现问题。</p><p>显然<code>List&lt;? extends T&gt;</code>内都是 T 的子类类型，能够向上转型为 T 类型，因此该 list 可以读取。</p><p>而<code>List&lt;? super T&gt;</code>内可以是 T 的超类类型，T 的超类转 T 是有可能出现异常的。</p><p>那我干脆转化成 Object 类型不好吗，所有类的基类都是 Object，不属于强制类型转换。哥们，转换成 Object 了，那你还图个啥？转换为 Object 类型是没有意义的。</p><p>假设<code>List&lt;? extends T&gt;</code>能添加元素，那么需要满足添加的任意元素需要能够直接转化成 T 的任何一个子类，T 的子类 A 和子类 B 是不能相互转化的，显然该 list 是不能添加元素的。</p><p>假设<code>List&lt;? super T&gt;</code>能添加元素，那么同样需要满足添加的任意元素能够直接转化成 T 的任何一个超类。此时添加 T 的子类元素就能满足该要求，因为 T 的任意子类可以向上转型成 T 的任何超类。</p><p><strong>List&lt;? extends T&gt;</strong></p><p><code>List&lt;? extends T&gt;</code>是被设计用来读取数据的泛型，并且只能读取类型为 T 的元素。原因如下：</p><p>元素是可以进行向上转型的，因此，我们可以这样做来读取元素。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>List&lt;? extends Number&gt; list = new ArrayList&lt;&gt;(); 
Number number = list.get(0);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以读取，但不能写入，比如以下的代码就直接报错。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>

    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//编译报错</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//编译报错</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//编译报错</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A 的子类 B 与子类 C 是不能相互转换的，因此是不能往该 list 中添加元素。</p><p>虽然不能添加元素，但可以在初始化的时候，接受一个已经定义好的 list，而该 list 存放的类型一定相同。因此，<code>List&lt;? extends T&gt;</code>可直接接受一个定义好的 list。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> list<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// ....</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    list<span class="token operator">=</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>List&lt;? super T&gt;</strong></p><p><code>List&lt;? super T&gt;</code>是被设计用来添加数据的泛型，并且只能添加 T 类型或其子类类型的元素。面试宝典：https://www.yoodb.com</p><p>为什么只能是 T 类型及其子类型元素，超类类型的元素不可以吗？</p><p>超类类型转化为 T 类型，是需要强制类型转换的，是容易出现异常的，无法保障的。</p><p>而传入 T 类型及其子类类型时，能够直接转化为 T 的任意超类类型。比如，下面的代码是可以运行的</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>

    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">A</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该 list 也可以读取其中的元素，从第二节可以得出，只能用 Object 接收，没多大意义。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Object</span> integer<span class="token operator">=</span>list2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们使用 Object 类型来接收获取到的元素，那么元素本身的类型就会丢失，因此，我们不使用<code>List&lt;? super T&gt;</code>来获取元素。</p><p>如果我们非要使用<code>List&lt;? super Integer&gt;</code>中的 Integer 类型来接收获取到的元素，那么必须进行强制类型转换，是会出现异常的，无法保障。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> integer1<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> list2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>总结</strong></p><p>（1）<code>List&lt;? extends T&gt;</code>适用于读取数据，读取出来的数据全部用T类型接收。如果我们往此 list 中添加 T 类型不同的子类的话，各种子类无法相互转换，因此不能添加元素，但可接受初始赋值。公众 号Java精选，回复java面试，获取面试资料，支持在线刷题。</p><p>（2）<code>List&lt;? super T&gt;</code>适用于添加元素，只能添加 T 类型或其子类类型。因为这些类型都能转换为T的任意超类类型（向上转型），因此我们可以对此 list 添加元素。只能用 Object 类型来接收获取到的元素，但是这些元素原本的类型会丢失。</p><p><strong>更加通俗易懂的例子</strong></p><p>什么，你还没明白？那我举一些直观的例子。</p><figure><img src="https://static.xlc520.tk/blogImage/640-1697803438447-2.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>注意：<code>向上转型是安全的，向下转型是不安全的，除非你知道 List 中的真实类型，否则向下转型就会报错</code>。</p><h2 id="extends" tabindex="-1"><a class="header-anchor" href="#extends" aria-hidden="true">#</a> <code>extends</code></h2><p><code>List&lt;? extends Number&gt; foo3</code>意味着下面的赋值语句都是合法的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span> foo3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Number &quot;extends&quot; Number (in this context)</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span> foo3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Integer extends Number</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span> foo3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Double extends Number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>读取</li></ol><p>给定上述可能的赋值语句，能保证你从<code>List foo3</code>中取出什么样类型的对象？</p><ul><li>你可以读取一个<code>Number</code>对象，因为上面任意一个list都包含<code>Number</code>对象或者<code>Number</code>子类的对象（上面的Number、Integer、Double都可以转型成Number，并且是安全的，所以读取总是可以的）。如下代码就不会报错：</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span> foo4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Number</span> number <span class="token operator">=</span> foo4<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>你不能读取一个<code>Integer</code>对象，因为<code>foo3</code>可能指向的是<code>List&lt;Double&gt;</code>（与其运行时发现Double转成Integer报错，不如编译时就不让从<code>foo3</code>中取<code>Integer</code>对象）。如下代码编译时会报<code>Incompatible types</code>错的：</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span> foo4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> number <span class="token operator">=</span> foo4<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>因为编译的时候编译器只知道foo4引用是一个List&lt;? extends Number&gt;，要到运行时才会绑定到new ArrayList()，所以编译的时候是无法判断foo4指向的List中到底是什么类型，唯一能确定的就是这个类型是Number的子类（或者就是Number类）。</p><ul><li>你也不能读取一个<code>Double</code>对象，因为<code>foo3</code>可能指向的是<code>List&lt;Integer&gt;</code>。</li></ul><ol><li>写入</li></ol><p>给定上述可能的赋值语句，你能往<code>List foo3</code>中添加什么类型的对象从而保证它对于所有可能的<code>ArrayList</code>都是合法的呢？</p><ul><li>你不能添加一个<code>Integer</code>对象，因为<code>foo3</code>可能指向的是<code>List&lt;Double&gt;</code>。如下代码是会编译报错的：</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span> foo4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
foo4<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>因为编译期间是无法知道foo4指向的ArrayList中到底放的是什么类型，只有到运行时才知道（就是Java所谓的晚绑定或运行时绑定）。与其到运行时发现往一个ArrayList中add一个Integer导致抛出类型转换异常，倒不如编译时就报错，即使ArrayList中放的就是Integer类型。</p><ul><li>你不能添加一个<code>Double</code>对象，因为<code>foo3</code>可能指向的是<code>List&lt;Integer&gt;</code>。</li><li>你不能添加一个<code>Number</code>对象，因为<code>foo3</code>可能指向的是<code>List&lt;Integer&gt;</code>。</li></ul><p><strong>「总结一下」</strong>：你不能往<code>List&lt;? extends T&gt;</code>中添加任何对象，因为你不能保证<code>List</code>真正指向哪个类型，所以不能确定添加的对象就是<code>List</code>所能接受的类型。能保证的，仅仅是你可以从<code>List</code>中读取的时候，你获得的肯定是一个<code>T</code>类型的对象（即使是<code>T</code>类型的子类对象也是<code>T</code>类型的）。</p><h2 id="supers" tabindex="-1"><a class="header-anchor" href="#supers" aria-hidden="true">#</a> <code>supers</code></h2><p>现在考虑<code>List&lt;? super T&gt;</code> 包含通配符的声明<code>List&lt;? super Integer&gt; foo3</code>意味着下面任何一个赋值语句都是合法的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> foo3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Integer is a &quot;superclass&quot; of Integer (in this context)</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> foo3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Number is a superclass of Integer</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> foo3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Object is a superclass of Integer</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><strong>读取</strong></li></ol><p>给定上述可能的赋值语句，当读取<code>List foo3</code>中的元素的时候，你能保证接收到什么类型的对象呢？</p><ul><li>你不能保证是一个<code>Integer</code>对象，因为<code>foo3</code>可能指向一个<code>List&lt;Number&gt;</code>或者<code>List&lt;Object&gt;</code>。</li><li>你不能保证是一个<code>Number</code>对象，因为<code>foo3</code>可能指向一个<code>List&lt;Object&gt;</code>。</li><li>你能保证的仅仅是它一定是一个<code>Object</code>类的实例或者<code>Object</code>子类的实例（但是你不知道到底是哪个子类）。</li></ul><ol><li><strong>写入</strong></li></ol><p>给定上述可能的赋值语句，你能往<code>List foo3</code>中添加什么类型的对象从而保证它对于所有可能的<code>ArrayList</code>都是合法的呢？</p><ul><li>你可以添加一个<code>Integer</code>实例，因为<code>Integer</code>类型对于上述所有的list都是合法的。</li><li>你可以添加任何<code>Integer</code>子类的实例，因为一个<code>Integer</code>子类的实例都可以向上转型成上面列表中的元素类型。</li><li>你不可以添加<code>Double</code>类型，因为<code>foo3</code>可能指向的是<code>ArrayList&lt;Integer&gt;</code>。</li><li>你不可以添加<code>Number</code>类型，因为<code>foo3</code>可能指向的是<code>ArrayList&lt;Integer&gt;</code>。</li><li>你不可以添加<code>Object</code>类型，因为<code>foo3</code>可能指向的是<code>ArrayList&lt;Integer&gt;</code>。</li></ul><h2 id="pecs" tabindex="-1"><a class="header-anchor" href="#pecs" aria-hidden="true">#</a> <code>PECS</code></h2><p><code>PECS</code>是&quot;Producer Extends,Consumer Super&quot;（生产者用Extends，消费者用Super）的缩写。</p><ul><li>&quot;Producer Extends&quot;的意思是，如果你需要一个<code>List</code>去生产<code>T</code>类型values（也就是说你需要去list中读取<code>T</code>类型实例），你需要声明这个<code>List</code>中的元素为<code>? extends T</code>，例如<code>List&lt;? extends Integer&gt;</code>，但是你不能往里面添加元素。</li><li>&quot;Consumer Super&quot;的意思是，如果你需要一个<code>List</code>去消费<code>T</code>类型values（也就是说你需要往list中添加<code>T</code>类型实例），你需要声明这个<code>List</code>中的元素为<code>? super T</code>，例如<code>List&lt;? super Integer&gt;</code>。但是不能保证你从这个list中读取出来对象类型。</li><li>如果你既需要往list中写，也需要从list中读，那么你就不能用通配符<code>?</code>，必须用精确的类型，比如<code>List&lt;Integer&gt;</code>。</li><li>可以参考JDK源码中的Collections类的copy方法，来理解PECS，源码在文末有。</li></ul>`,77),o=[p];function c(l,i){return n(),a("div",null,o)}const r=s(t,[["render",c],["__file","List extends T与List super T的区别.html.vue"]]);export{r as default};
