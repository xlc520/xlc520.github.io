const e=JSON.parse('{"key":"v-60d5c536","path":"/dev/Java8%E5%A4%9A%E7%BA%BF%E7%A8%8BCompletableFuture.html","title":"Java8多线程CompletableFuture","lang":"zh-CN","frontmatter":{"author":"xlc520","title":"Java8多线程CompletableFuture","description":"Java8多线程CompletableFuture 日常开发中，我们都会用到线程池，一般会用execute()和submit()方法提交任务。但是当你用过CompletableFuture之后，就会发现以前的线程池处理任务有多难用，功能有多简陋，CompletableFuture又是多么简洁优雅。 要知道CompletableFuture已经随着Jav...","date":"2022-09-03T00:00:00.000Z","category":"Java","tag":"Java","article":true,"timeline":true,"icon":"java","head":[["meta",{"property":"og:url","content":"https://blog.ciberviler.top/dev/Java8%E5%A4%9A%E7%BA%BF%E7%A8%8BCompletableFuture.html"}],["meta",{"property":"og:site_name","content":"StudyNote"}],["meta",{"property":"og:title","content":"Java8多线程CompletableFuture"}],["meta",{"property":"og:description","content":"Java8多线程CompletableFuture 日常开发中，我们都会用到线程池，一般会用execute()和submit()方法提交任务。但是当你用过CompletableFuture之后，就会发现以前的线程池处理任务有多难用，功能有多简陋，CompletableFuture又是多么简洁优雅。 要知道CompletableFuture已经随着Jav..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-15T09:41:05.000Z"}],["meta",{"property":"article:author","content":"xlc520"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2022-09-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-15T09:41:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java8多线程CompletableFuture\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-09-03T00:00:00.000Z\\",\\"dateModified\\":\\"2023-03-15T09:41:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xlc520\\"}]}"]]},"headers":[{"level":2,"title":"1. 使用线程池处理任务","slug":"_1-使用线程池处理任务","link":"#_1-使用线程池处理任务","children":[]},{"level":2,"title":"2. 使用CompletableFuture重构任务处理","slug":"_2-使用completablefuture重构任务处理","link":"#_2-使用completablefuture重构任务处理","children":[]},{"level":2,"title":"3. CompletableFuture更多妙用","slug":"_3-completablefuture更多妙用","link":"#_3-completablefuture更多妙用","children":[{"level":3,"title":"3.1 等待所有任务执行完成","slug":"_3-1-等待所有任务执行完成","link":"#_3-1-等待所有任务执行完成","children":[]},{"level":3,"title":"3.2 任何一个任务处理完成就返回","slug":"_3-2-任何一个任务处理完成就返回","link":"#_3-2-任何一个任务处理完成就返回","children":[]},{"level":3,"title":"3.3 一个线程执行完成，交给另一个线程接着执行","slug":"_3-3-一个线程执行完成-交给另一个线程接着执行","link":"#_3-3-一个线程执行完成-交给另一个线程接着执行","children":[]}]},{"level":2,"title":"4. CompletableFuture常用API","slug":"_4-completablefuture常用api","link":"#_4-completablefuture常用api","children":[{"level":3,"title":"4.1 CompletableFuture常用API说明","slug":"_4-1-completablefuture常用api说明","link":"#_4-1-completablefuture常用api说明","children":[]},{"level":3,"title":"4. CompletableFuture常用API使用示例","slug":"_4-completablefuture常用api使用示例","link":"#_4-completablefuture常用api使用示例","children":[]},{"level":3,"title":"4.1 then、handle方法使用示例","slug":"_4-1-then、handle方法使用示例","link":"#_4-1-then、handle方法使用示例","children":[]},{"level":3,"title":"4.2 complete方法使用示例","slug":"_4-2-complete方法使用示例","link":"#_4-2-complete方法使用示例","children":[]},{"level":3,"title":"4.3 either方法使用示例","slug":"_4-3-either方法使用示例","link":"#_4-3-either方法使用示例","children":[]}]}],"git":{"createdTime":1668948234000,"updatedTime":1678873265000,"contributors":[{"name":"xlc520","email":"2215400217@qq.com","commits":2}]},"readingTime":{"minutes":8.13,"words":2438},"filePathRelative":"dev/Java8多线程CompletableFuture.md","localizedDate":"2022年9月3日","excerpt":"\\n<p>日常开发中，我们都会用到线程池，一般会用execute()和submit()方法提交任务。但是当你用过CompletableFuture之后，就会发现以前的线程池处理任务有多难用，功能有多简陋，CompletableFuture又是多么简洁优雅。</p>","autoDesc":true}');export{e as data};
