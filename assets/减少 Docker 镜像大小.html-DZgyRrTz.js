import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as e,a as n}from"./app-DWXdHMII.js";const l={};function t(r,i){return a(),e("div",null,i[0]||(i[0]=[n(`<h1 id="_10-个优化技巧-减少-docker-镜像大小" tabindex="-1"><a class="header-anchor" href="#_10-个优化技巧-减少-docker-镜像大小"><span>10 个优化技巧，减少 Docker 镜像大小</span></a></h1><h2 id="什么是-docker" tabindex="-1"><a class="header-anchor" href="#什么是-docker"><span>什么是 docker？</span></a></h2><p>Docker 是一种容器引擎，可以在容器内运行一段代码。Docker 镜像是在任何地方运行您的应用程序而无需担心应用程序依赖性的方式。</p><p>要构建镜像，docker 使用一个名为 Dockerfile 的文件。Dockerfile 是一个包含许多指令（RUN、COPY、EXPOSE 等）的文件。成功执行这些命令后，docker 将创建一个镜像供我们在任何地方使用。</p><h2 id="为什么要减小-docker-镜像大小" tabindex="-1"><a class="header-anchor" href="#为什么要减小-docker-镜像大小"><span>为什么要减小 docker 镜像大小？</span></a></h2><ol><li>安装不必要的软件包会增加攻击面，从而增加安全风险。</li><li>镜像传输需要更多时间。</li><li>部署大镜像需要更多时间。</li></ol><p>我们必须以某种方式创建我们的 Dockerfile，以便从该 Dockerfile 构建的镜像在大小方面得到优化。</p><p>在本文中，我们将讨论 10 种减少 docker 镜像大小的有效方法。</p><h2 id="_1-最小化镜像层" tabindex="-1"><a class="header-anchor" href="#_1-最小化镜像层"><span>1：最小化镜像层</span></a></h2><p>我们可以减少 Dockerfile 中的层数。</p><p>dockerfile 中的每个 FROM、RUN、COPY 命令都会创建一个单独的层，并增加镜像的整体大小和构建时间。</p><p>要减小 docker 镜像大小，请在单个 RUN 或 COPY 指令中执行多个命令来最小化 Dockerfile 中的层数。</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ubuntu:latest</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> apt update  - y</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> apt install unzip - y</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> apt install curl - y</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> apt install python3 - y</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与其对每个命令使用单独的指令，不如将它们组合起来：</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ubuntu:latest</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> apt update  -y &amp;&amp; \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">apt install unzip -y &amp;&amp; \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">apt install curl -y &amp;&amp; \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">apt install python3 -y</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从下图中可以看出，通过减少层数，可以减少一些 MB 的大小。</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;%3F%3E%3Csvg width=&#39;1px&#39; height=&#39;1px&#39; viewBox=&#39;0 0 1 1&#39; version=&#39;1.1&#39; xmlns=&#39;<a href="http://www.w3.org/2000/svg" target="_blank" rel="noopener noreferrer">http://www.w3.org/2000/svg</a>&#39; xmlns: xlink=&#39;<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg" target="_blank" rel="noopener noreferrer">http://www.w3.org/1999/xlink&#39;&gt;&lt;title&gt;&lt;/title&gt;&lt;g</a> stroke=&#39;none&#39; stroke-width=&#39;1&#39; fill=&#39;none&#39; fill-rule=&#39;evenodd&#39; fill-opacity=&#39;0&#39;%3E%3Cg transform=&#39;translate(-249.000000, -126.000000)&#39; fill=&#39;%23FFFFFF&#39;%3E%3Crect x=&#39;249&#39; y=&#39;126&#39; width=&#39;1&#39; height=&#39;1&#39;%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><h2 id="_2-使用-docker-squash-减小镜像大小" tabindex="-1"><a class="header-anchor" href="#_2-使用-docker-squash-减小镜像大小"><span>2：使用 Docker Squash 减小镜像大小</span></a></h2><p>Docker 在构建镜像时创建了很多层。压缩有助于在逻辑层中组织镜像。我们可以控制镜像的结构，而不是让镜像具有多个不必要的层。</p><p>您可以使用以下命令安装 docker-squash。</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">pip install docker-squash</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>您可以运行以下命令来减小镜像的大小。</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">docker-squash image:old -t image:new</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>![图片](data:image/svg+xml,%3C%3Fxml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;%3F%3E%3Csvg width=&#39;1px&#39; height=&#39;1px&#39; viewBox=&#39;0 0 1 1&#39; version=&#39;1.1&#39; xmlns=&#39;<a href="http://www.w3.org/2000/svg" target="_blank" rel="noopener noreferrer">http://www.w3.org/2000/svg</a>&#39; xmlns: xlink=&#39;<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg" target="_blank" rel="noopener noreferrer">http://www.w3.org/1999/xlink&#39;&gt;&lt;title&gt;&lt;/title&gt;&lt;g</a> stroke=&#39;none&#39; stroke-width=&#39;1&#39; fill=&#39;none&#39; fill-rule=&#39;evenodd&#39; fill-opacity=&#39;0&#39;%3E%3Cg transform=&#39;translate(-249.000000, -126.000000)&#39; fill=&#39;%23FFFFFF&#39;%3E%3Crect x=&#39;249&#39; y=&#39;126&#39; width=&#39;1&#39; height=&#39;1&#39;%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><h2 id="_3-使用较小的基础镜像" tabindex="-1"><a class="header-anchor" href="#_3-使用较小的基础镜像"><span>3：使用较小的基础镜像</span></a></h2><p>减小 docker 镜像大小最明显的方法是使用较小的基础镜像。</p><p>如果希望为 python 应用程序创建镜像，请考虑使用 python:3.9-slim 镜像而不是 python:3.9。</p><p>python:3.9 的大小约为 1.3 GB，而 python:3.9-slim 的大小仅为 1 GB 左右。</p><p>您可以使用 alpine 版本进一步减少镜像。alpine 镜像是专门为作为容器运行而设计的，而且体积非常小。python:3.9-alpine 镜像只有 49 MB。</p><h2 id="_4-使用多阶段构建来减小大小" tabindex="-1"><a class="header-anchor" href="#_4-使用多阶段构建来减小大小"><span>4：使用多阶段构建来减小大小</span></a></h2><p>为了显着减小大小，我们可以使用 docker 多阶段构建的概念。这里我们使用不同的 images/Dockerfile 来构建和打包应用代码。</p><p>它将 Dockerfile 分成多个阶段，并将所需的工件从一个阶段传递到另一个阶段，然后在最后一个阶段交付缩小镜像大小的最终镜像。它显着减小镜像尺寸。</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Official docker build image, Using  node:14.17-alpine3.14 image for stage-1.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Stage-1</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> node:14.17-alpine3.14 </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> build</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Copy Required files</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> public /home/app/public/</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> src /home/app/src/</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># dockerfile install multiple packages</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> apk add g++ make python2</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> npm install --silent</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Create Build</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> npm run build</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> apk --purge del python2</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#Run the build by copying the files form previous stage.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Stage-2</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> nginx:stable-alpine</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> nginx.conf /etc/nginx/conf.d/default.conf</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> --from=build /home/app/build /usr/share/nginx/html</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">EXPOSE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 80</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">CMD</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;nginx&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;-g&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;daemon off;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们使用两个阶段从 docker 文件创建镜像。在 Stage-1 中，我们复制代码并构建它，在 stage-2 中，我们使用在 stage-1 中构建的代码在 Nginx 中运行。</p><h2 id="_5-apt-安装中使用-no-install-recommends-标志" tabindex="-1"><a class="header-anchor" href="#_5-apt-安装中使用-no-install-recommends-标志"><span>5：apt 安装中使用 --no-install-recommends 标志</span></a></h2><p>当我们运行 apt install 命令来安装某些包时，它会安装一些不需要的推荐包。使用 --no-install-recommends 标志可以显着减小镜像大小。</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ubuntu:latest</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> apt update -y &amp;&amp; \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">apt install unzip -y --no-install-recommends &amp;&amp; \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">apt install curl --no-install-recommends -y &amp;&amp; \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">apt install python3 -y --no-install-recommends</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如下图所示，带有 new 标签的镜像由于添加了此标志而减少了 5MB。当我们要安装多个包时，这将非常有帮助。<img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1679364162221-0.png" alt="图片" loading="lazy"></p><p>您可以在 apk add 命令中添加 --no-cache。</p><h2 id="_6-在-apt-install-命令后添加-rm-rf-var-lib-apt-lists" tabindex="-1"><a class="header-anchor" href="#_6-在-apt-install-命令后添加-rm-rf-var-lib-apt-lists"><span>6：在 apt install 命令后添加 rm -rf /var/lib/apt/lists/</span></a></h2><p>我们可以在 apt install 之后添加这个命令来减少 docker 镜像的大小。</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ubuntu:latest</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> apt update -y &amp;&amp; \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">apt install unzip -y --no-install-recommends &amp;&amp; \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">apt install curl --no-install-recommends -y &amp;&amp; \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">apt install python3 -y --no-install-recommends &amp;&amp; \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">rm -rf /var/lib/apt/lists/*</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1679364162221-1.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>从上图中可以看出，我们已将 docker 镜像的大小减少了约 41 MB。</p><h2 id="_7-使用-dockerignore-文件" tabindex="-1"><a class="header-anchor" href="#_7-使用-dockerignore-文件"><span>7：使用 .dockerignore 文件</span></a></h2><p>如果您不想将某些文件复制到 docker 镜像，那么使用 .dockerignore 文件可以为您节省一些空间。</p><p>在构建上下文中有一些隐藏的文件/文件夹，您可以使用 ADD 或 COPY 命令（如 .git 等）将其传输到镜像。包含一个 .dockerignore 文件以减小 docker 镜像大小是一个很好的做法。</p><p><code>.dockerignore</code> 文件示例。</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ignorethisfile.txt</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">logs/</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ignorethisfolder/</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.git</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.cache</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">*.md</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-在-run-之后放置-copy" tabindex="-1"><a class="header-anchor" href="#_8-在-run-之后放置-copy"><span>8：在 RUN 之后放置 COPY</span></a></h2><p>在某些情况下，您对代码进行了细微的更改，并且需要反复从 dockerfile 构建镜像。 在这种情况下，将 COPY 命令放在 RUN 命令之后将有助于减小镜像大小，因为在这种情况下 docker 将能够更好地使用缓存功能。</p><p>它将为安装了依赖项的镜像创建缓存，每次更改代码时，docker 都会使用该缓存并创建镜像。它还将减少 docker 构建时间。</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#Dockerfile-1</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ubuntu:latest</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> apt update -y &amp;&amp; \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">apt install unzip -y --no-install-recommends &amp;&amp; \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">apt install curl --no-install-recommends -y &amp;&amp; \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">apt install python3 -y --no-install-recommends &amp;&amp; \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">rm -rf /var/lib/apt/lists/*</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> file /home/ubuntu</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#Dockerfile-2</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ubuntu:latest</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> file /home/ubuntu</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> apt update -y &amp;&amp; \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">apt install unzip -y --no-install-recommends &amp;&amp; \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">apt install curl --no-install-recommends -y &amp;&amp; \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">apt install python3 -y --no-install-recommends &amp;&amp; \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">rm -rf /var/lib/apt/lists/*</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述情况下，dockerfile-1 将能够比 dockerfile-2 表现得更好。</p><h2 id="_9-安装后删除软件包" tabindex="-1"><a class="header-anchor" href="#_9-安装后删除软件包"><span>9：安装后删除软件包</span></a></h2><p>如果您需要在 docker 镜像中安装一些包，并且您是从外部下载它们，那么最好在安装后删除这些包。</p><p>例如，如果您希望从 zip 文件安装 AWS CLI V2，那么在成功安装后请记住也删除该 zip 文件。</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ubuntu:latest</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> curl </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -o </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;awscliv2.zip&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &amp;&amp; \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">unzip awscliv2.zip &amp;&amp; \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">sudo ./aws/install &amp;&amp; \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">rm awscliv2.zip</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-使用-docker-镜像缩容工具" tabindex="-1"><a class="header-anchor" href="#_10-使用-docker-镜像缩容工具"><span>10：使用 Docker 镜像缩容工具</span></a></h2><p>有几个<strong>dockerfile 优化工具</strong>可以帮助你减少 docker 镜像的大小。下面列出了其中一些。</p><ol><li><p><strong>Dive</strong>：Dive 是一个开源工具，用于探索 Docker 镜像及其层内容，然后发现缩小 Docker/OCI 镜像大小的方法。</p><p><a href="https://github.com/wagoodman/dive" target="_blank" rel="noopener noreferrer">https://github.com/wagoodman/dive</a></p></li><li><p><strong>fromlatest.io</strong>：此工具将检查您的 Dockerfile 并检查可以执行的更多步骤以减小镜像大小。</p><p><a href="https://www.fromlatest.io/" target="_blank" rel="noopener noreferrer">https://www.fromlatest.io/</a></p></li><li><p>Docker Slim：它让你的容器更好、更小、更安全。您可以使用<strong>dockerslim 来最小化容器镜像</strong>。</p><p><a href="https://github.com/slimtoolkit/slim" target="_blank" rel="noopener noreferrer">https://github.com/slimtoolkit/slim</a></p></li></ol>`,61)]))}const d=s(l,[["render",t],["__file","减少 Docker 镜像大小.html.vue"]]),k=JSON.parse('{"path":"/dev/%E5%87%8F%E5%B0%91%20Docker%20%E9%95%9C%E5%83%8F%E5%A4%A7%E5%B0%8F.html","title":"10 个优化技巧，减少 Docker 镜像大小","lang":"zh-CN","frontmatter":{"author":"xlc520","title":"10 个优化技巧，减少 Docker 镜像大小","excerpt":null,"description":"10 个优化技巧，减少 Docker 镜像大小 什么是 docker？ Docker 是一种容器引擎，可以在容器内运行一段代码。Docker 镜像是在任何地方运行您的应用程序而无需担心应用程序依赖性的方式。 要构建镜像，docker 使用一个名为 Dockerfile 的文件。Dockerfile 是一个包含许多指令（RUN、COPY、EXPOSE 等...","date":"2023-03-21T00:00:00.000Z","category":"Java","tag":["Java","Docker"],"article":true,"timeline":true,"icon":"java","head":[["meta",{"property":"og:url","content":"https://blog.ciberviler.top/dev/%E5%87%8F%E5%B0%91%20Docker%20%E9%95%9C%E5%83%8F%E5%A4%A7%E5%B0%8F.html"}],["meta",{"property":"og:site_name","content":"StudyNote - 丰富的知识笔记库"}],["meta",{"property":"og:title","content":"10 个优化技巧，减少 Docker 镜像大小"}],["meta",{"property":"og:description","content":"10 个优化技巧，减少 Docker 镜像大小 什么是 docker？ Docker 是一种容器引擎，可以在容器内运行一段代码。Docker 镜像是在任何地方运行您的应用程序而无需担心应用程序依赖性的方式。 要构建镜像，docker 使用一个名为 Dockerfile 的文件。Dockerfile 是一个包含许多指令（RUN、COPY、EXPOSE 等..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1679364162221-0.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-27T13:32:36.000Z"}],["meta",{"property":"article:author","content":"xlc520"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Docker"}],["meta",{"property":"article:published_time","content":"2023-03-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-27T13:32:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"10 个优化技巧，减少 Docker 镜像大小\\",\\"image\\":[\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1679364162221-0.png\\",\\"https://bitbucket.org/xlc520/blogasset/raw/main/images3/640-1679364162221-1.png\\"],\\"datePublished\\":\\"2023-03-21T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-27T13:32:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xlc520\\"}]}"]]},"headers":[{"level":2,"title":"什么是 docker？","slug":"什么是-docker","link":"#什么是-docker","children":[]},{"level":2,"title":"为什么要减小 docker 镜像大小？","slug":"为什么要减小-docker-镜像大小","link":"#为什么要减小-docker-镜像大小","children":[]},{"level":2,"title":"1：最小化镜像层","slug":"_1-最小化镜像层","link":"#_1-最小化镜像层","children":[]},{"level":2,"title":"2：使用 Docker Squash 减小镜像大小","slug":"_2-使用-docker-squash-减小镜像大小","link":"#_2-使用-docker-squash-减小镜像大小","children":[]},{"level":2,"title":"3：使用较小的基础镜像","slug":"_3-使用较小的基础镜像","link":"#_3-使用较小的基础镜像","children":[]},{"level":2,"title":"4：使用多阶段构建来减小大小","slug":"_4-使用多阶段构建来减小大小","link":"#_4-使用多阶段构建来减小大小","children":[]},{"level":2,"title":"5：apt 安装中使用 --no-install-recommends 标志","slug":"_5-apt-安装中使用-no-install-recommends-标志","link":"#_5-apt-安装中使用-no-install-recommends-标志","children":[]},{"level":2,"title":"6：在 apt install 命令后添加 rm -rf /var/lib/apt/lists/","slug":"_6-在-apt-install-命令后添加-rm-rf-var-lib-apt-lists","link":"#_6-在-apt-install-命令后添加-rm-rf-var-lib-apt-lists","children":[]},{"level":2,"title":"7：使用 .dockerignore 文件","slug":"_7-使用-dockerignore-文件","link":"#_7-使用-dockerignore-文件","children":[]},{"level":2,"title":"8：在 RUN 之后放置 COPY","slug":"_8-在-run-之后放置-copy","link":"#_8-在-run-之后放置-copy","children":[]},{"level":2,"title":"9：安装后删除软件包","slug":"_9-安装后删除软件包","link":"#_9-安装后删除软件包","children":[]},{"level":2,"title":"10：使用 Docker 镜像缩容工具","slug":"_10-使用-docker-镜像缩容工具","link":"#_10-使用-docker-镜像缩容工具","children":[]}],"git":{"createdTime":1679710241000,"updatedTime":1714224756000,"contributors":[{"name":"xlc520","email":"2215400217@qq.com","commits":3},{"name":"xlc","email":"2215400217@qq.com","commits":2}]},"readingTime":{"minutes":6.44,"words":1933},"filePathRelative":"dev/减少 Docker 镜像大小.md","localizedDate":"2023年3月21日","excerpt":"\\n<h2>什么是 docker？</h2>\\n<p>Docker 是一种容器引擎，可以在容器内运行一段代码。Docker 镜像是在任何地方运行您的应用程序而无需担心应用程序依赖性的方式。</p>\\n<p>要构建镜像，docker 使用一个名为 Dockerfile 的文件。Dockerfile 是一个包含许多指令（RUN、COPY、EXPOSE 等）的文件。成功执行这些命令后，docker\\n将创建一个镜像供我们在任何地方使用。</p>","autoDesc":true}');export{d as comp,k as data};
